"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@langchain";
exports.ids = ["vendor-chunks/@langchain"];
exports.modules = {

/***/ "(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/node_modules/ansi-styles/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nconst ANSI_BACKGROUND_OFFSET = 10;\nconst wrapAnsi256 = (offset = 0)=>(code)=>`\\u001B[${38 + offset};5;${code}m`;\nconst wrapAnsi16m = (offset = 0)=>(red, green, blue)=>`\\u001B[${38 + offset};2;${red};${green};${blue}m`;\nfunction assembleStyles() {\n    const codes = new Map();\n    const styles = {\n        modifier: {\n            reset: [\n                0,\n                0\n            ],\n            // 21 isn't widely supported and 22 does the same thing\n            bold: [\n                1,\n                22\n            ],\n            dim: [\n                2,\n                22\n            ],\n            italic: [\n                3,\n                23\n            ],\n            underline: [\n                4,\n                24\n            ],\n            overline: [\n                53,\n                55\n            ],\n            inverse: [\n                7,\n                27\n            ],\n            hidden: [\n                8,\n                28\n            ],\n            strikethrough: [\n                9,\n                29\n            ]\n        },\n        color: {\n            black: [\n                30,\n                39\n            ],\n            red: [\n                31,\n                39\n            ],\n            green: [\n                32,\n                39\n            ],\n            yellow: [\n                33,\n                39\n            ],\n            blue: [\n                34,\n                39\n            ],\n            magenta: [\n                35,\n                39\n            ],\n            cyan: [\n                36,\n                39\n            ],\n            white: [\n                37,\n                39\n            ],\n            // Bright color\n            blackBright: [\n                90,\n                39\n            ],\n            redBright: [\n                91,\n                39\n            ],\n            greenBright: [\n                92,\n                39\n            ],\n            yellowBright: [\n                93,\n                39\n            ],\n            blueBright: [\n                94,\n                39\n            ],\n            magentaBright: [\n                95,\n                39\n            ],\n            cyanBright: [\n                96,\n                39\n            ],\n            whiteBright: [\n                97,\n                39\n            ]\n        },\n        bgColor: {\n            bgBlack: [\n                40,\n                49\n            ],\n            bgRed: [\n                41,\n                49\n            ],\n            bgGreen: [\n                42,\n                49\n            ],\n            bgYellow: [\n                43,\n                49\n            ],\n            bgBlue: [\n                44,\n                49\n            ],\n            bgMagenta: [\n                45,\n                49\n            ],\n            bgCyan: [\n                46,\n                49\n            ],\n            bgWhite: [\n                47,\n                49\n            ],\n            // Bright color\n            bgBlackBright: [\n                100,\n                49\n            ],\n            bgRedBright: [\n                101,\n                49\n            ],\n            bgGreenBright: [\n                102,\n                49\n            ],\n            bgYellowBright: [\n                103,\n                49\n            ],\n            bgBlueBright: [\n                104,\n                49\n            ],\n            bgMagentaBright: [\n                105,\n                49\n            ],\n            bgCyanBright: [\n                106,\n                49\n            ],\n            bgWhiteBright: [\n                107,\n                49\n            ]\n        }\n    };\n    // Alias bright black as gray (and grey)\n    styles.color.gray = styles.color.blackBright;\n    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n    styles.color.grey = styles.color.blackBright;\n    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n    for (const [groupName, group] of Object.entries(styles)){\n        for (const [styleName, style] of Object.entries(group)){\n            styles[styleName] = {\n                open: `\\u001B[${style[0]}m`,\n                close: `\\u001B[${style[1]}m`\n            };\n            group[styleName] = styles[styleName];\n            codes.set(style[0], style[1]);\n        }\n        Object.defineProperty(styles, groupName, {\n            value: group,\n            enumerable: false\n        });\n    }\n    Object.defineProperty(styles, \"codes\", {\n        value: codes,\n        enumerable: false\n    });\n    styles.color.close = \"\\x1b[39m\";\n    styles.bgColor.close = \"\\x1b[49m\";\n    styles.color.ansi256 = wrapAnsi256();\n    styles.color.ansi16m = wrapAnsi16m();\n    styles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n    styles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n    // From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n    Object.defineProperties(styles, {\n        rgbToAnsi256: {\n            value: (red, green, blue)=>{\n                // We use the extended greyscale palette here, with the exception of\n                // black and white. normal palette only has 4 greyscale shades.\n                if (red === green && green === blue) {\n                    if (red < 8) {\n                        return 16;\n                    }\n                    if (red > 248) {\n                        return 231;\n                    }\n                    return Math.round((red - 8) / 247 * 24) + 232;\n                }\n                return 16 + 36 * Math.round(red / 255 * 5) + 6 * Math.round(green / 255 * 5) + Math.round(blue / 255 * 5);\n            },\n            enumerable: false\n        },\n        hexToRgb: {\n            value: (hex)=>{\n                const matches = /(?<colorString>[a-f\\d]{6}|[a-f\\d]{3})/i.exec(hex.toString(16));\n                if (!matches) {\n                    return [\n                        0,\n                        0,\n                        0\n                    ];\n                }\n                let { colorString } = matches.groups;\n                if (colorString.length === 3) {\n                    colorString = colorString.split(\"\").map((character)=>character + character).join(\"\");\n                }\n                const integer = Number.parseInt(colorString, 16);\n                return [\n                    integer >> 16 & 0xFF,\n                    integer >> 8 & 0xFF,\n                    integer & 0xFF\n                ];\n            },\n            enumerable: false\n        },\n        hexToAnsi256: {\n            value: (hex)=>styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n            enumerable: false\n        }\n    });\n    return styles;\n}\n// Make the export immutable\nObject.defineProperty(module, \"exports\", {\n    enumerable: true,\n    get: assembleStyles\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL25vZGVfbW9kdWxlcy9hbnNpLXN0eWxlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQUE7QUFFQSxNQUFNQSx5QkFBeUI7QUFFL0IsTUFBTUMsY0FBYyxDQUFDQyxTQUFTLENBQUMsR0FBS0MsQ0FBQUEsT0FBUSxDQUFDLE9BQU8sRUFBRSxLQUFLRCxPQUFPLEdBQUcsRUFBRUMsS0FBSyxDQUFDLENBQUM7QUFFOUUsTUFBTUMsY0FBYyxDQUFDRixTQUFTLENBQUMsR0FBSyxDQUFDRyxLQUFLQyxPQUFPQyxPQUFTLENBQUMsT0FBTyxFQUFFLEtBQUtMLE9BQU8sR0FBRyxFQUFFRyxJQUFJLENBQUMsRUFBRUMsTUFBTSxDQUFDLEVBQUVDLEtBQUssQ0FBQyxDQUFDO0FBRTVHLFNBQVNDO0lBQ1IsTUFBTUMsUUFBUSxJQUFJQztJQUNsQixNQUFNQyxTQUFTO1FBQ2RDLFVBQVU7WUFDVEMsT0FBTztnQkFBQztnQkFBRzthQUFFO1lBQ2IsdURBQXVEO1lBQ3ZEQyxNQUFNO2dCQUFDO2dCQUFHO2FBQUc7WUFDYkMsS0FBSztnQkFBQztnQkFBRzthQUFHO1lBQ1pDLFFBQVE7Z0JBQUM7Z0JBQUc7YUFBRztZQUNmQyxXQUFXO2dCQUFDO2dCQUFHO2FBQUc7WUFDbEJDLFVBQVU7Z0JBQUM7Z0JBQUk7YUFBRztZQUNsQkMsU0FBUztnQkFBQztnQkFBRzthQUFHO1lBQ2hCQyxRQUFRO2dCQUFDO2dCQUFHO2FBQUc7WUFDZkMsZUFBZTtnQkFBQztnQkFBRzthQUFHO1FBQ3ZCO1FBQ0FDLE9BQU87WUFDTkMsT0FBTztnQkFBQztnQkFBSTthQUFHO1lBQ2ZsQixLQUFLO2dCQUFDO2dCQUFJO2FBQUc7WUFDYkMsT0FBTztnQkFBQztnQkFBSTthQUFHO1lBQ2ZrQixRQUFRO2dCQUFDO2dCQUFJO2FBQUc7WUFDaEJqQixNQUFNO2dCQUFDO2dCQUFJO2FBQUc7WUFDZGtCLFNBQVM7Z0JBQUM7Z0JBQUk7YUFBRztZQUNqQkMsTUFBTTtnQkFBQztnQkFBSTthQUFHO1lBQ2RDLE9BQU87Z0JBQUM7Z0JBQUk7YUFBRztZQUVmLGVBQWU7WUFDZkMsYUFBYTtnQkFBQztnQkFBSTthQUFHO1lBQ3JCQyxXQUFXO2dCQUFDO2dCQUFJO2FBQUc7WUFDbkJDLGFBQWE7Z0JBQUM7Z0JBQUk7YUFBRztZQUNyQkMsY0FBYztnQkFBQztnQkFBSTthQUFHO1lBQ3RCQyxZQUFZO2dCQUFDO2dCQUFJO2FBQUc7WUFDcEJDLGVBQWU7Z0JBQUM7Z0JBQUk7YUFBRztZQUN2QkMsWUFBWTtnQkFBQztnQkFBSTthQUFHO1lBQ3BCQyxhQUFhO2dCQUFDO2dCQUFJO2FBQUc7UUFDdEI7UUFDQUMsU0FBUztZQUNSQyxTQUFTO2dCQUFDO2dCQUFJO2FBQUc7WUFDakJDLE9BQU87Z0JBQUM7Z0JBQUk7YUFBRztZQUNmQyxTQUFTO2dCQUFDO2dCQUFJO2FBQUc7WUFDakJDLFVBQVU7Z0JBQUM7Z0JBQUk7YUFBRztZQUNsQkMsUUFBUTtnQkFBQztnQkFBSTthQUFHO1lBQ2hCQyxXQUFXO2dCQUFDO2dCQUFJO2FBQUc7WUFDbkJDLFFBQVE7Z0JBQUM7Z0JBQUk7YUFBRztZQUNoQkMsU0FBUztnQkFBQztnQkFBSTthQUFHO1lBRWpCLGVBQWU7WUFDZkMsZUFBZTtnQkFBQztnQkFBSzthQUFHO1lBQ3hCQyxhQUFhO2dCQUFDO2dCQUFLO2FBQUc7WUFDdEJDLGVBQWU7Z0JBQUM7Z0JBQUs7YUFBRztZQUN4QkMsZ0JBQWdCO2dCQUFDO2dCQUFLO2FBQUc7WUFDekJDLGNBQWM7Z0JBQUM7Z0JBQUs7YUFBRztZQUN2QkMsaUJBQWlCO2dCQUFDO2dCQUFLO2FBQUc7WUFDMUJDLGNBQWM7Z0JBQUM7Z0JBQUs7YUFBRztZQUN2QkMsZUFBZTtnQkFBQztnQkFBSzthQUFHO1FBQ3pCO0lBQ0Q7SUFFQSx3Q0FBd0M7SUFDeEN6QyxPQUFPVyxLQUFLLENBQUMrQixJQUFJLEdBQUcxQyxPQUFPVyxLQUFLLENBQUNNLFdBQVc7SUFDNUNqQixPQUFPeUIsT0FBTyxDQUFDa0IsTUFBTSxHQUFHM0MsT0FBT3lCLE9BQU8sQ0FBQ1MsYUFBYTtJQUNwRGxDLE9BQU9XLEtBQUssQ0FBQ2lDLElBQUksR0FBRzVDLE9BQU9XLEtBQUssQ0FBQ00sV0FBVztJQUM1Q2pCLE9BQU95QixPQUFPLENBQUNvQixNQUFNLEdBQUc3QyxPQUFPeUIsT0FBTyxDQUFDUyxhQUFhO0lBRXBELEtBQUssTUFBTSxDQUFDWSxXQUFXQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ2pELFFBQVM7UUFDeEQsS0FBSyxNQUFNLENBQUNrRCxXQUFXQyxNQUFNLElBQUlILE9BQU9DLE9BQU8sQ0FBQ0YsT0FBUTtZQUN2RC9DLE1BQU0sQ0FBQ2tELFVBQVUsR0FBRztnQkFDbkJFLE1BQU0sQ0FBQyxPQUFPLEVBQUVELEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzQkUsT0FBTyxDQUFDLE9BQU8sRUFBRUYsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDN0I7WUFFQUosS0FBSyxDQUFDRyxVQUFVLEdBQUdsRCxNQUFNLENBQUNrRCxVQUFVO1lBRXBDcEQsTUFBTXdELEdBQUcsQ0FBQ0gsS0FBSyxDQUFDLEVBQUUsRUFBRUEsS0FBSyxDQUFDLEVBQUU7UUFDN0I7UUFFQUgsT0FBT08sY0FBYyxDQUFDdkQsUUFBUThDLFdBQVc7WUFDeENVLE9BQU9UO1lBQ1BVLFlBQVk7UUFDYjtJQUNEO0lBRUFULE9BQU9PLGNBQWMsQ0FBQ3ZELFFBQVEsU0FBUztRQUN0Q3dELE9BQU8xRDtRQUNQMkQsWUFBWTtJQUNiO0lBRUF6RCxPQUFPVyxLQUFLLENBQUMwQyxLQUFLLEdBQUc7SUFDckJyRCxPQUFPeUIsT0FBTyxDQUFDNEIsS0FBSyxHQUFHO0lBRXZCckQsT0FBT1csS0FBSyxDQUFDK0MsT0FBTyxHQUFHcEU7SUFDdkJVLE9BQU9XLEtBQUssQ0FBQ2dELE9BQU8sR0FBR2xFO0lBQ3ZCTyxPQUFPeUIsT0FBTyxDQUFDaUMsT0FBTyxHQUFHcEUsWUFBWUQ7SUFDckNXLE9BQU95QixPQUFPLENBQUNrQyxPQUFPLEdBQUdsRSxZQUFZSjtJQUVyQywwR0FBMEc7SUFDMUcyRCxPQUFPWSxnQkFBZ0IsQ0FBQzVELFFBQVE7UUFDL0I2RCxjQUFjO1lBQ2JMLE9BQU8sQ0FBQzlELEtBQUtDLE9BQU9DO2dCQUNuQixvRUFBb0U7Z0JBQ3BFLCtEQUErRDtnQkFDL0QsSUFBSUYsUUFBUUMsU0FBU0EsVUFBVUMsTUFBTTtvQkFDcEMsSUFBSUYsTUFBTSxHQUFHO3dCQUNaLE9BQU87b0JBQ1I7b0JBRUEsSUFBSUEsTUFBTSxLQUFLO3dCQUNkLE9BQU87b0JBQ1I7b0JBRUEsT0FBT29FLEtBQUtDLEtBQUssQ0FBQyxDQUFFckUsTUFBTSxLQUFLLE1BQU8sTUFBTTtnQkFDN0M7Z0JBRUEsT0FBTyxLQUNMLEtBQUtvRSxLQUFLQyxLQUFLLENBQUNyRSxNQUFNLE1BQU0sS0FDNUIsSUFBSW9FLEtBQUtDLEtBQUssQ0FBQ3BFLFFBQVEsTUFBTSxLQUM5Qm1FLEtBQUtDLEtBQUssQ0FBQ25FLE9BQU8sTUFBTTtZQUMxQjtZQUNBNkQsWUFBWTtRQUNiO1FBQ0FPLFVBQVU7WUFDVFIsT0FBT1MsQ0FBQUE7Z0JBQ04sTUFBTUMsVUFBVSx5Q0FBeUNDLElBQUksQ0FBQ0YsSUFBSUcsUUFBUSxDQUFDO2dCQUMzRSxJQUFJLENBQUNGLFNBQVM7b0JBQ2IsT0FBTzt3QkFBQzt3QkFBRzt3QkFBRztxQkFBRTtnQkFDakI7Z0JBRUEsSUFBSSxFQUFDRyxXQUFXLEVBQUMsR0FBR0gsUUFBUUksTUFBTTtnQkFFbEMsSUFBSUQsWUFBWUUsTUFBTSxLQUFLLEdBQUc7b0JBQzdCRixjQUFjQSxZQUFZRyxLQUFLLENBQUMsSUFBSUMsR0FBRyxDQUFDQyxDQUFBQSxZQUFhQSxZQUFZQSxXQUFXQyxJQUFJLENBQUM7Z0JBQ2xGO2dCQUVBLE1BQU1DLFVBQVVDLE9BQU9DLFFBQVEsQ0FBQ1QsYUFBYTtnQkFFN0MsT0FBTztvQkFDTE8sV0FBVyxLQUFNO29CQUNqQkEsV0FBVyxJQUFLO29CQUNqQkEsVUFBVTtpQkFDVjtZQUNGO1lBQ0FuQixZQUFZO1FBQ2I7UUFDQXNCLGNBQWM7WUFDYnZCLE9BQU9TLENBQUFBLE1BQU9qRSxPQUFPNkQsWUFBWSxJQUFJN0QsT0FBT2dFLFFBQVEsQ0FBQ0M7WUFDckRSLFlBQVk7UUFDYjtJQUNEO0lBRUEsT0FBT3pEO0FBQ1I7QUFFQSw0QkFBNEI7QUFDNUJnRCxPQUFPTyxjQUFjLENBQUN5QixRQUFRLFdBQVc7SUFDeEN2QixZQUFZO0lBQ1p3QixLQUFLcEY7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ub2RlX21vZHVsZXMvYW5zaS1zdHlsZXMvaW5kZXguanM/NzY0MSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFOU0lfQkFDS0dST1VORF9PRkZTRVQgPSAxMDtcblxuY29uc3Qgd3JhcEFuc2kyNTYgPSAob2Zmc2V0ID0gMCkgPT4gY29kZSA9PiBgXFx1MDAxQlskezM4ICsgb2Zmc2V0fTs1OyR7Y29kZX1tYDtcblxuY29uc3Qgd3JhcEFuc2kxNm0gPSAob2Zmc2V0ID0gMCkgPT4gKHJlZCwgZ3JlZW4sIGJsdWUpID0+IGBcXHUwMDFCWyR7MzggKyBvZmZzZXR9OzI7JHtyZWR9OyR7Z3JlZW59OyR7Ymx1ZX1tYDtcblxuZnVuY3Rpb24gYXNzZW1ibGVTdHlsZXMoKSB7XG5cdGNvbnN0IGNvZGVzID0gbmV3IE1hcCgpO1xuXHRjb25zdCBzdHlsZXMgPSB7XG5cdFx0bW9kaWZpZXI6IHtcblx0XHRcdHJlc2V0OiBbMCwgMF0sXG5cdFx0XHQvLyAyMSBpc24ndCB3aWRlbHkgc3VwcG9ydGVkIGFuZCAyMiBkb2VzIHRoZSBzYW1lIHRoaW5nXG5cdFx0XHRib2xkOiBbMSwgMjJdLFxuXHRcdFx0ZGltOiBbMiwgMjJdLFxuXHRcdFx0aXRhbGljOiBbMywgMjNdLFxuXHRcdFx0dW5kZXJsaW5lOiBbNCwgMjRdLFxuXHRcdFx0b3ZlcmxpbmU6IFs1MywgNTVdLFxuXHRcdFx0aW52ZXJzZTogWzcsIDI3XSxcblx0XHRcdGhpZGRlbjogWzgsIDI4XSxcblx0XHRcdHN0cmlrZXRocm91Z2g6IFs5LCAyOV1cblx0XHR9LFxuXHRcdGNvbG9yOiB7XG5cdFx0XHRibGFjazogWzMwLCAzOV0sXG5cdFx0XHRyZWQ6IFszMSwgMzldLFxuXHRcdFx0Z3JlZW46IFszMiwgMzldLFxuXHRcdFx0eWVsbG93OiBbMzMsIDM5XSxcblx0XHRcdGJsdWU6IFszNCwgMzldLFxuXHRcdFx0bWFnZW50YTogWzM1LCAzOV0sXG5cdFx0XHRjeWFuOiBbMzYsIDM5XSxcblx0XHRcdHdoaXRlOiBbMzcsIDM5XSxcblxuXHRcdFx0Ly8gQnJpZ2h0IGNvbG9yXG5cdFx0XHRibGFja0JyaWdodDogWzkwLCAzOV0sXG5cdFx0XHRyZWRCcmlnaHQ6IFs5MSwgMzldLFxuXHRcdFx0Z3JlZW5CcmlnaHQ6IFs5MiwgMzldLFxuXHRcdFx0eWVsbG93QnJpZ2h0OiBbOTMsIDM5XSxcblx0XHRcdGJsdWVCcmlnaHQ6IFs5NCwgMzldLFxuXHRcdFx0bWFnZW50YUJyaWdodDogWzk1LCAzOV0sXG5cdFx0XHRjeWFuQnJpZ2h0OiBbOTYsIDM5XSxcblx0XHRcdHdoaXRlQnJpZ2h0OiBbOTcsIDM5XVxuXHRcdH0sXG5cdFx0YmdDb2xvcjoge1xuXHRcdFx0YmdCbGFjazogWzQwLCA0OV0sXG5cdFx0XHRiZ1JlZDogWzQxLCA0OV0sXG5cdFx0XHRiZ0dyZWVuOiBbNDIsIDQ5XSxcblx0XHRcdGJnWWVsbG93OiBbNDMsIDQ5XSxcblx0XHRcdGJnQmx1ZTogWzQ0LCA0OV0sXG5cdFx0XHRiZ01hZ2VudGE6IFs0NSwgNDldLFxuXHRcdFx0YmdDeWFuOiBbNDYsIDQ5XSxcblx0XHRcdGJnV2hpdGU6IFs0NywgNDldLFxuXG5cdFx0XHQvLyBCcmlnaHQgY29sb3Jcblx0XHRcdGJnQmxhY2tCcmlnaHQ6IFsxMDAsIDQ5XSxcblx0XHRcdGJnUmVkQnJpZ2h0OiBbMTAxLCA0OV0sXG5cdFx0XHRiZ0dyZWVuQnJpZ2h0OiBbMTAyLCA0OV0sXG5cdFx0XHRiZ1llbGxvd0JyaWdodDogWzEwMywgNDldLFxuXHRcdFx0YmdCbHVlQnJpZ2h0OiBbMTA0LCA0OV0sXG5cdFx0XHRiZ01hZ2VudGFCcmlnaHQ6IFsxMDUsIDQ5XSxcblx0XHRcdGJnQ3lhbkJyaWdodDogWzEwNiwgNDldLFxuXHRcdFx0YmdXaGl0ZUJyaWdodDogWzEwNywgNDldXG5cdFx0fVxuXHR9O1xuXG5cdC8vIEFsaWFzIGJyaWdodCBibGFjayBhcyBncmF5IChhbmQgZ3JleSlcblx0c3R5bGVzLmNvbG9yLmdyYXkgPSBzdHlsZXMuY29sb3IuYmxhY2tCcmlnaHQ7XG5cdHN0eWxlcy5iZ0NvbG9yLmJnR3JheSA9IHN0eWxlcy5iZ0NvbG9yLmJnQmxhY2tCcmlnaHQ7XG5cdHN0eWxlcy5jb2xvci5ncmV5ID0gc3R5bGVzLmNvbG9yLmJsYWNrQnJpZ2h0O1xuXHRzdHlsZXMuYmdDb2xvci5iZ0dyZXkgPSBzdHlsZXMuYmdDb2xvci5iZ0JsYWNrQnJpZ2h0O1xuXG5cdGZvciAoY29uc3QgW2dyb3VwTmFtZSwgZ3JvdXBdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlcykpIHtcblx0XHRmb3IgKGNvbnN0IFtzdHlsZU5hbWUsIHN0eWxlXSBvZiBPYmplY3QuZW50cmllcyhncm91cCkpIHtcblx0XHRcdHN0eWxlc1tzdHlsZU5hbWVdID0ge1xuXHRcdFx0XHRvcGVuOiBgXFx1MDAxQlske3N0eWxlWzBdfW1gLFxuXHRcdFx0XHRjbG9zZTogYFxcdTAwMUJbJHtzdHlsZVsxXX1tYFxuXHRcdFx0fTtcblxuXHRcdFx0Z3JvdXBbc3R5bGVOYW1lXSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuXG5cdFx0XHRjb2Rlcy5zZXQoc3R5bGVbMF0sIHN0eWxlWzFdKTtcblx0XHR9XG5cblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoc3R5bGVzLCBncm91cE5hbWUsIHtcblx0XHRcdHZhbHVlOiBncm91cCxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlXG5cdFx0fSk7XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoc3R5bGVzLCAnY29kZXMnLCB7XG5cdFx0dmFsdWU6IGNvZGVzLFxuXHRcdGVudW1lcmFibGU6IGZhbHNlXG5cdH0pO1xuXG5cdHN0eWxlcy5jb2xvci5jbG9zZSA9ICdcXHUwMDFCWzM5bSc7XG5cdHN0eWxlcy5iZ0NvbG9yLmNsb3NlID0gJ1xcdTAwMUJbNDltJztcblxuXHRzdHlsZXMuY29sb3IuYW5zaTI1NiA9IHdyYXBBbnNpMjU2KCk7XG5cdHN0eWxlcy5jb2xvci5hbnNpMTZtID0gd3JhcEFuc2kxNm0oKTtcblx0c3R5bGVzLmJnQ29sb3IuYW5zaTI1NiA9IHdyYXBBbnNpMjU2KEFOU0lfQkFDS0dST1VORF9PRkZTRVQpO1xuXHRzdHlsZXMuYmdDb2xvci5hbnNpMTZtID0gd3JhcEFuc2kxNm0oQU5TSV9CQUNLR1JPVU5EX09GRlNFVCk7XG5cblx0Ly8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vUWl4LS9jb2xvci1jb252ZXJ0L2Jsb2IvM2YwZTBkNGU5MmUyMzU3OTZjY2IxN2Y2ZTg1YzcyMDk0YTY1MWY0OS9jb252ZXJzaW9ucy5qc1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHlsZXMsIHtcblx0XHRyZ2JUb0Fuc2kyNTY6IHtcblx0XHRcdHZhbHVlOiAocmVkLCBncmVlbiwgYmx1ZSkgPT4ge1xuXHRcdFx0XHQvLyBXZSB1c2UgdGhlIGV4dGVuZGVkIGdyZXlzY2FsZSBwYWxldHRlIGhlcmUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZlxuXHRcdFx0XHQvLyBibGFjayBhbmQgd2hpdGUuIG5vcm1hbCBwYWxldHRlIG9ubHkgaGFzIDQgZ3JleXNjYWxlIHNoYWRlcy5cblx0XHRcdFx0aWYgKHJlZCA9PT0gZ3JlZW4gJiYgZ3JlZW4gPT09IGJsdWUpIHtcblx0XHRcdFx0XHRpZiAocmVkIDwgOCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE2O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChyZWQgPiAyNDgpIHtcblx0XHRcdFx0XHRcdHJldHVybiAyMzE7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgucm91bmQoKChyZWQgLSA4KSAvIDI0NykgKiAyNCkgKyAyMzI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gMTYgK1xuXHRcdFx0XHRcdCgzNiAqIE1hdGgucm91bmQocmVkIC8gMjU1ICogNSkpICtcblx0XHRcdFx0XHQoNiAqIE1hdGgucm91bmQoZ3JlZW4gLyAyNTUgKiA1KSkgK1xuXHRcdFx0XHRcdE1hdGgucm91bmQoYmx1ZSAvIDI1NSAqIDUpO1xuXHRcdFx0fSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlXG5cdFx0fSxcblx0XHRoZXhUb1JnYjoge1xuXHRcdFx0dmFsdWU6IGhleCA9PiB7XG5cdFx0XHRcdGNvbnN0IG1hdGNoZXMgPSAvKD88Y29sb3JTdHJpbmc+W2EtZlxcZF17Nn18W2EtZlxcZF17M30pL2kuZXhlYyhoZXgudG9TdHJpbmcoMTYpKTtcblx0XHRcdFx0aWYgKCFtYXRjaGVzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFswLCAwLCAwXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCB7Y29sb3JTdHJpbmd9ID0gbWF0Y2hlcy5ncm91cHM7XG5cblx0XHRcdFx0aWYgKGNvbG9yU3RyaW5nLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRcdGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcuc3BsaXQoJycpLm1hcChjaGFyYWN0ZXIgPT4gY2hhcmFjdGVyICsgY2hhcmFjdGVyKS5qb2luKCcnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnN0IGludGVnZXIgPSBOdW1iZXIucGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTtcblxuXHRcdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHRcdChpbnRlZ2VyID4+IDE2KSAmIDB4RkYsXG5cdFx0XHRcdFx0KGludGVnZXIgPj4gOCkgJiAweEZGLFxuXHRcdFx0XHRcdGludGVnZXIgJiAweEZGXG5cdFx0XHRcdF07XG5cdFx0XHR9LFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2Vcblx0XHR9LFxuXHRcdGhleFRvQW5zaTI1Njoge1xuXHRcdFx0dmFsdWU6IGhleCA9PiBzdHlsZXMucmdiVG9BbnNpMjU2KC4uLnN0eWxlcy5oZXhUb1JnYihoZXgpKSxcblx0XHRcdGVudW1lcmFibGU6IGZhbHNlXG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG4vLyBNYWtlIHRoZSBleHBvcnQgaW1tdXRhYmxlXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCAnZXhwb3J0cycsIHtcblx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0Z2V0OiBhc3NlbWJsZVN0eWxlc1xufSk7XG4iXSwibmFtZXMiOlsiQU5TSV9CQUNLR1JPVU5EX09GRlNFVCIsIndyYXBBbnNpMjU2Iiwib2Zmc2V0IiwiY29kZSIsIndyYXBBbnNpMTZtIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiYXNzZW1ibGVTdHlsZXMiLCJjb2RlcyIsIk1hcCIsInN0eWxlcyIsIm1vZGlmaWVyIiwicmVzZXQiLCJib2xkIiwiZGltIiwiaXRhbGljIiwidW5kZXJsaW5lIiwib3ZlcmxpbmUiLCJpbnZlcnNlIiwiaGlkZGVuIiwic3RyaWtldGhyb3VnaCIsImNvbG9yIiwiYmxhY2siLCJ5ZWxsb3ciLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwiYmxhY2tCcmlnaHQiLCJyZWRCcmlnaHQiLCJncmVlbkJyaWdodCIsInllbGxvd0JyaWdodCIsImJsdWVCcmlnaHQiLCJtYWdlbnRhQnJpZ2h0IiwiY3lhbkJyaWdodCIsIndoaXRlQnJpZ2h0IiwiYmdDb2xvciIsImJnQmxhY2siLCJiZ1JlZCIsImJnR3JlZW4iLCJiZ1llbGxvdyIsImJnQmx1ZSIsImJnTWFnZW50YSIsImJnQ3lhbiIsImJnV2hpdGUiLCJiZ0JsYWNrQnJpZ2h0IiwiYmdSZWRCcmlnaHQiLCJiZ0dyZWVuQnJpZ2h0IiwiYmdZZWxsb3dCcmlnaHQiLCJiZ0JsdWVCcmlnaHQiLCJiZ01hZ2VudGFCcmlnaHQiLCJiZ0N5YW5CcmlnaHQiLCJiZ1doaXRlQnJpZ2h0IiwiZ3JheSIsImJnR3JheSIsImdyZXkiLCJiZ0dyZXkiLCJncm91cE5hbWUiLCJncm91cCIsIk9iamVjdCIsImVudHJpZXMiLCJzdHlsZU5hbWUiLCJzdHlsZSIsIm9wZW4iLCJjbG9zZSIsInNldCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiYW5zaTI1NiIsImFuc2kxNm0iLCJkZWZpbmVQcm9wZXJ0aWVzIiwicmdiVG9BbnNpMjU2IiwiTWF0aCIsInJvdW5kIiwiaGV4VG9SZ2IiLCJoZXgiLCJtYXRjaGVzIiwiZXhlYyIsInRvU3RyaW5nIiwiY29sb3JTdHJpbmciLCJncm91cHMiLCJsZW5ndGgiLCJzcGxpdCIsIm1hcCIsImNoYXJhY3RlciIsImpvaW4iLCJpbnRlZ2VyIiwiTnVtYmVyIiwicGFyc2VJbnQiLCJoZXhUb0Fuc2kyNTYiLCJtb2R1bGUiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/caches/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/caches/base.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCache: () => (/* binding */ BaseCache),\n/* harmony export */   InMemoryCache: () => (/* binding */ InMemoryCache),\n/* harmony export */   deserializeStoredGeneration: () => (/* binding */ deserializeStoredGeneration),\n/* harmony export */   getCacheKey: () => (/* binding */ getCacheKey),\n/* harmony export */   serializeGeneration: () => (/* binding */ serializeGeneration)\n/* harmony export */ });\n/* harmony import */ var _utils_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n\n\n/**\n * This cache key should be consistent across all versions of LangChain.\n * It is currently NOT consistent across versions of LangChain.\n *\n * A huge benefit of having a remote cache (like redis) is that you can\n * access the cache from different processes/machines. The allows you to\n * separate concerns and scale horizontally.\n *\n * TODO: Make cache key consistent across versions of LangChain.\n */ const getCacheKey = (...strings)=>(0,_utils_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)(strings.join(\"_\"));\nfunction deserializeStoredGeneration(storedGeneration) {\n    if (storedGeneration.message !== undefined) {\n        return {\n            text: storedGeneration.text,\n            message: (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_1__.mapStoredMessageToChatMessage)(storedGeneration.message)\n        };\n    } else {\n        return {\n            text: storedGeneration.text\n        };\n    }\n}\nfunction serializeGeneration(generation) {\n    const serializedValue = {\n        text: generation.text\n    };\n    if (generation.message !== undefined) {\n        serializedValue.message = generation.message.toDict();\n    }\n    return serializedValue;\n}\n/**\n * Base class for all caches. All caches should extend this class.\n */ class BaseCache {\n}\nconst GLOBAL_MAP = new Map();\n/**\n * A cache for storing LLM generations that stores data in memory.\n */ class InMemoryCache extends BaseCache {\n    constructor(map){\n        super();\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.cache = map ?? new Map();\n    }\n    /**\n     * Retrieves data from the cache using a prompt and an LLM key. If the\n     * data is not found, it returns null.\n     * @param prompt The prompt used to find the data.\n     * @param llmKey The LLM key used to find the data.\n     * @returns The data corresponding to the prompt and LLM key, or null if not found.\n     */ lookup(prompt, llmKey) {\n        return Promise.resolve(this.cache.get(getCacheKey(prompt, llmKey)) ?? null);\n    }\n    /**\n     * Updates the cache with new data using a prompt and an LLM key.\n     * @param prompt The prompt used to store the data.\n     * @param llmKey The LLM key used to store the data.\n     * @param value The data to be stored.\n     */ async update(prompt, llmKey, value) {\n        this.cache.set(getCacheKey(prompt, llmKey), value);\n    }\n    /**\n     * Returns a global instance of InMemoryCache using a predefined global\n     * map as the initial cache.\n     * @returns A global instance of InMemoryCache.\n     */ static global() {\n        return new InMemoryCache(GLOBAL_MAP);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzL2Jhc2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFnRDtBQUNxQjtBQUNyRTs7Ozs7Ozs7O0NBU0MsR0FDTSxNQUFNRSxjQUFjLENBQUMsR0FBR0MsVUFBWUgsNERBQVlBLENBQUNHLFFBQVFDLElBQUksQ0FBQyxNQUFNO0FBQ3BFLFNBQVNDLDRCQUE0QkMsZ0JBQWdCO0lBQ3hELElBQUlBLGlCQUFpQkMsT0FBTyxLQUFLQyxXQUFXO1FBQ3hDLE9BQU87WUFDSEMsTUFBTUgsaUJBQWlCRyxJQUFJO1lBQzNCRixTQUFTTixpRkFBNkJBLENBQUNLLGlCQUFpQkMsT0FBTztRQUNuRTtJQUNKLE9BQ0s7UUFDRCxPQUFPO1lBQUVFLE1BQU1ILGlCQUFpQkcsSUFBSTtRQUFDO0lBQ3pDO0FBQ0o7QUFDTyxTQUFTQyxvQkFBb0JDLFVBQVU7SUFDMUMsTUFBTUMsa0JBQWtCO1FBQ3BCSCxNQUFNRSxXQUFXRixJQUFJO0lBQ3pCO0lBQ0EsSUFBSUUsV0FBV0osT0FBTyxLQUFLQyxXQUFXO1FBQ2xDSSxnQkFBZ0JMLE9BQU8sR0FBR0ksV0FBV0osT0FBTyxDQUFDTSxNQUFNO0lBQ3ZEO0lBQ0EsT0FBT0Q7QUFDWDtBQUNBOztDQUVDLEdBQ00sTUFBTUU7QUFDYjtBQUNBLE1BQU1DLGFBQWEsSUFBSUM7QUFDdkI7O0NBRUMsR0FDTSxNQUFNQyxzQkFBc0JIO0lBQy9CSSxZQUFZQyxHQUFHLENBQUU7UUFDYixLQUFLO1FBQ0xDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUztZQUNqQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxLQUFLLEdBQUdQLE9BQU8sSUFBSUg7SUFDNUI7SUFDQTs7Ozs7O0tBTUMsR0FDRFcsT0FBT0MsTUFBTSxFQUFFQyxNQUFNLEVBQUU7UUFDbkIsT0FBT0MsUUFBUUMsT0FBTyxDQUFDLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxHQUFHLENBQUM5QixZQUFZMEIsUUFBUUMsWUFBWTtJQUMxRTtJQUNBOzs7OztLQUtDLEdBQ0QsTUFBTUksT0FBT0wsTUFBTSxFQUFFQyxNQUFNLEVBQUVKLEtBQUssRUFBRTtRQUNoQyxJQUFJLENBQUNDLEtBQUssQ0FBQ1EsR0FBRyxDQUFDaEMsWUFBWTBCLFFBQVFDLFNBQVNKO0lBQ2hEO0lBQ0E7Ozs7S0FJQyxHQUNELE9BQU9VLFNBQVM7UUFDWixPQUFPLElBQUlsQixjQUFjRjtJQUM3QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FjaGVzL2Jhc2UuanM/YTI3NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnNlY3VyZUhhc2ggfSBmcm9tIFwiLi4vdXRpbHMvaGFzaC5qc1wiO1xuaW1wb3J0IHsgbWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2UgfSBmcm9tIFwiLi4vbWVzc2FnZXMvdXRpbHMuanNcIjtcbi8qKlxuICogVGhpcyBjYWNoZSBrZXkgc2hvdWxkIGJlIGNvbnNpc3RlbnQgYWNyb3NzIGFsbCB2ZXJzaW9ucyBvZiBMYW5nQ2hhaW4uXG4gKiBJdCBpcyBjdXJyZW50bHkgTk9UIGNvbnNpc3RlbnQgYWNyb3NzIHZlcnNpb25zIG9mIExhbmdDaGFpbi5cbiAqXG4gKiBBIGh1Z2UgYmVuZWZpdCBvZiBoYXZpbmcgYSByZW1vdGUgY2FjaGUgKGxpa2UgcmVkaXMpIGlzIHRoYXQgeW91IGNhblxuICogYWNjZXNzIHRoZSBjYWNoZSBmcm9tIGRpZmZlcmVudCBwcm9jZXNzZXMvbWFjaGluZXMuIFRoZSBhbGxvd3MgeW91IHRvXG4gKiBzZXBhcmF0ZSBjb25jZXJucyBhbmQgc2NhbGUgaG9yaXpvbnRhbGx5LlxuICpcbiAqIFRPRE86IE1ha2UgY2FjaGUga2V5IGNvbnNpc3RlbnQgYWNyb3NzIHZlcnNpb25zIG9mIExhbmdDaGFpbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldENhY2hlS2V5ID0gKC4uLnN0cmluZ3MpID0+IGluc2VjdXJlSGFzaChzdHJpbmdzLmpvaW4oXCJfXCIpKTtcbmV4cG9ydCBmdW5jdGlvbiBkZXNlcmlhbGl6ZVN0b3JlZEdlbmVyYXRpb24oc3RvcmVkR2VuZXJhdGlvbikge1xuICAgIGlmIChzdG9yZWRHZW5lcmF0aW9uLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dDogc3RvcmVkR2VuZXJhdGlvbi50ZXh0LFxuICAgICAgICAgICAgbWVzc2FnZTogbWFwU3RvcmVkTWVzc2FnZVRvQ2hhdE1lc3NhZ2Uoc3RvcmVkR2VuZXJhdGlvbi5tZXNzYWdlKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7IHRleHQ6IHN0b3JlZEdlbmVyYXRpb24udGV4dCB9O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVHZW5lcmF0aW9uKGdlbmVyYXRpb24pIHtcbiAgICBjb25zdCBzZXJpYWxpemVkVmFsdWUgPSB7XG4gICAgICAgIHRleHQ6IGdlbmVyYXRpb24udGV4dCxcbiAgICB9O1xuICAgIGlmIChnZW5lcmF0aW9uLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzZXJpYWxpemVkVmFsdWUubWVzc2FnZSA9IGdlbmVyYXRpb24ubWVzc2FnZS50b0RpY3QoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWRWYWx1ZTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIGNhY2hlcy4gQWxsIGNhY2hlcyBzaG91bGQgZXh0ZW5kIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXNlQ2FjaGUge1xufVxuY29uc3QgR0xPQkFMX01BUCA9IG5ldyBNYXAoKTtcbi8qKlxuICogQSBjYWNoZSBmb3Igc3RvcmluZyBMTE0gZ2VuZXJhdGlvbnMgdGhhdCBzdG9yZXMgZGF0YSBpbiBtZW1vcnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbk1lbW9yeUNhY2hlIGV4dGVuZHMgQmFzZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3RvcihtYXApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiY2FjaGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jYWNoZSA9IG1hcCA/PyBuZXcgTWFwKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyBkYXRhIGZyb20gdGhlIGNhY2hlIHVzaW5nIGEgcHJvbXB0IGFuZCBhbiBMTE0ga2V5LiBJZiB0aGVcbiAgICAgKiBkYXRhIGlzIG5vdCBmb3VuZCwgaXQgcmV0dXJucyBudWxsLlxuICAgICAqIEBwYXJhbSBwcm9tcHQgVGhlIHByb21wdCB1c2VkIHRvIGZpbmQgdGhlIGRhdGEuXG4gICAgICogQHBhcmFtIGxsbUtleSBUaGUgTExNIGtleSB1c2VkIHRvIGZpbmQgdGhlIGRhdGEuXG4gICAgICogQHJldHVybnMgVGhlIGRhdGEgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbXB0IGFuZCBMTE0ga2V5LCBvciBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgKi9cbiAgICBsb29rdXAocHJvbXB0LCBsbG1LZXkpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLmNhY2hlLmdldChnZXRDYWNoZUtleShwcm9tcHQsIGxsbUtleSkpID8/IG51bGwpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBjYWNoZSB3aXRoIG5ldyBkYXRhIHVzaW5nIGEgcHJvbXB0IGFuZCBhbiBMTE0ga2V5LlxuICAgICAqIEBwYXJhbSBwcm9tcHQgVGhlIHByb21wdCB1c2VkIHRvIHN0b3JlIHRoZSBkYXRhLlxuICAgICAqIEBwYXJhbSBsbG1LZXkgVGhlIExMTSBrZXkgdXNlZCB0byBzdG9yZSB0aGUgZGF0YS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGRhdGEgdG8gYmUgc3RvcmVkLlxuICAgICAqL1xuICAgIGFzeW5jIHVwZGF0ZShwcm9tcHQsIGxsbUtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5zZXQoZ2V0Q2FjaGVLZXkocHJvbXB0LCBsbG1LZXkpLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBnbG9iYWwgaW5zdGFuY2Ugb2YgSW5NZW1vcnlDYWNoZSB1c2luZyBhIHByZWRlZmluZWQgZ2xvYmFsXG4gICAgICogbWFwIGFzIHRoZSBpbml0aWFsIGNhY2hlLlxuICAgICAqIEByZXR1cm5zIEEgZ2xvYmFsIGluc3RhbmNlIG9mIEluTWVtb3J5Q2FjaGUuXG4gICAgICovXG4gICAgc3RhdGljIGdsb2JhbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbk1lbW9yeUNhY2hlKEdMT0JBTF9NQVApO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJpbnNlY3VyZUhhc2giLCJtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZSIsImdldENhY2hlS2V5Iiwic3RyaW5ncyIsImpvaW4iLCJkZXNlcmlhbGl6ZVN0b3JlZEdlbmVyYXRpb24iLCJzdG9yZWRHZW5lcmF0aW9uIiwibWVzc2FnZSIsInVuZGVmaW5lZCIsInRleHQiLCJzZXJpYWxpemVHZW5lcmF0aW9uIiwiZ2VuZXJhdGlvbiIsInNlcmlhbGl6ZWRWYWx1ZSIsInRvRGljdCIsIkJhc2VDYWNoZSIsIkdMT0JBTF9NQVAiLCJNYXAiLCJJbk1lbW9yeUNhY2hlIiwiY29uc3RydWN0b3IiLCJtYXAiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiY2FjaGUiLCJsb29rdXAiLCJwcm9tcHQiLCJsbG1LZXkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldCIsInVwZGF0ZSIsInNldCIsImdsb2JhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/caches/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackHandler: () => (/* binding */ BaseCallbackHandler),\n/* harmony export */   callbackHandlerPrefersStreaming: () => (/* binding */ callbackHandlerPrefersStreaming),\n/* harmony export */   isBaseCallbackHandler: () => (/* binding */ isBaseCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n\n\n/**\n * Abstract class that provides a set of optional methods that can be\n * overridden in derived classes to handle various events during the\n * execution of a LangChain application.\n */ class BaseCallbackHandlerMethodsClass {\n}\nfunction callbackHandlerPrefersStreaming(x) {\n    return \"lc_prefer_streaming\" in x && x.lc_prefer_streaming;\n}\n/**\n * Abstract base class for creating callback handlers in the LangChain\n * framework. It provides a set of optional methods that can be overridden\n * in derived classes to handle various events during the execution of a\n * LangChain application.\n */ class BaseCallbackHandler extends BaseCallbackHandlerMethodsClass {\n    get lc_namespace() {\n        return [\n            \"langchain_core\",\n            \"callbacks\",\n            this.name\n        ];\n    }\n    get lc_secrets() {\n        return undefined;\n    }\n    get lc_attributes() {\n        return undefined;\n    }\n    get lc_aliases() {\n        return undefined;\n    }\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            (0,_load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.get_lc_unique_name)(this.constructor)\n        ];\n    }\n    constructor(input){\n        super();\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"ignoreLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreChain\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreAgent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreRetriever\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"ignoreCustomEvent\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"raiseError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"awaitHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\"\n        });\n        this.lc_kwargs = input || {};\n        if (input) {\n            this.ignoreLLM = input.ignoreLLM ?? this.ignoreLLM;\n            this.ignoreChain = input.ignoreChain ?? this.ignoreChain;\n            this.ignoreAgent = input.ignoreAgent ?? this.ignoreAgent;\n            this.ignoreRetriever = input.ignoreRetriever ?? this.ignoreRetriever;\n            this.ignoreCustomEvent = input.ignoreCustomEvent ?? this.ignoreCustomEvent;\n            this.raiseError = input.raiseError ?? this.raiseError;\n            this.awaitHandlers = this.raiseError || (input._awaitHandler ?? this.awaitHandlers);\n        }\n    }\n    copy() {\n        return new this.constructor(this);\n    }\n    toJSON() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSON.call(this);\n    }\n    toJSONNotImplemented() {\n        return _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable.prototype.toJSONNotImplemented.call(this);\n    }\n    static fromMethods(methods) {\n        class Handler extends BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n                });\n                Object.assign(this, methods);\n            }\n        }\n        return new Handler();\n    }\n}\nconst isBaseCallbackHandler = (x)=>{\n    const callbackHandler = x;\n    return callbackHandler !== undefined && typeof callbackHandler.copy === \"function\" && typeof callbackHandler.name === \"string\" && typeof callbackHandler.awaitHandlers === \"boolean\";\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/manager.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCallbackManager: () => (/* binding */ BaseCallbackManager),\n/* harmony export */   BaseRunManager: () => (/* binding */ BaseRunManager),\n/* harmony export */   CallbackManager: () => (/* binding */ CallbackManager),\n/* harmony export */   CallbackManagerForChainRun: () => (/* binding */ CallbackManagerForChainRun),\n/* harmony export */   CallbackManagerForLLMRun: () => (/* binding */ CallbackManagerForLLMRun),\n/* harmony export */   CallbackManagerForRetrieverRun: () => (/* binding */ CallbackManagerForRetrieverRun),\n/* harmony export */   CallbackManagerForToolRun: () => (/* binding */ CallbackManagerForToolRun),\n/* harmony export */   TraceGroup: () => (/* binding */ TraceGroup),\n/* harmony export */   ensureHandler: () => (/* binding */ ensureHandler),\n/* harmony export */   parseCallbackConfigArg: () => (/* binding */ parseCallbackConfigArg),\n/* harmony export */   traceAsGroup: () => (/* binding */ traceAsGroup)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n/* harmony import */ var _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tracers/console.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../tracers/tracer_langchain.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\");\n/* harmony import */ var _promises_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./promises.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\");\n/* harmony import */ var _utils_callbacks_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/callbacks.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.js\");\n/* harmony import */ var _tracers_base_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../tracers/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _singletons_async_local_storage_context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../singletons/async_local_storage/context.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js\");\n\n\n\n\n\n\n\n\n\n\nfunction parseCallbackConfigArg(arg) {\n    if (!arg) {\n        return {};\n    } else if (Array.isArray(arg) || \"name\" in arg) {\n        return {\n            callbacks: arg\n        };\n    } else {\n        return arg;\n    }\n}\n/**\n * Manage callbacks from different components of LangChain.\n */ class BaseCallbackManager {\n    setHandler(handler) {\n        return this.setHandlers([\n            handler\n        ]);\n    }\n}\n/**\n * Base class for run manager in LangChain.\n */ class BaseRunManager {\n    constructor(runId, handlers, inheritableHandlers, tags, inheritableTags, metadata, inheritableMetadata, _parentRunId){\n        Object.defineProperty(this, \"runId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: runId\n        });\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: handlers\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableHandlers\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tags\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableTags\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: metadata\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: inheritableMetadata\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: _parentRunId\n        });\n    }\n    get parentRunId() {\n        return this._parentRunId;\n    }\n    async handleText(text) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleText?.(text, this.runId, this._parentRunId, this.tags);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleText: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleCustomEvent(eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, _runId, _tags, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _metadata) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleCustomEvent?.(eventName, data, this.runId, this.tags, this.metadata);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleCustomEvent: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * Manages callbacks for retriever runs.\n */ class CallbackManagerForRetrieverRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleRetrieverEnd(documents) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverEnd?.(documents, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleRetriever`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleRetrieverError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreRetriever) {\n                    try {\n                        await handler.handleRetrieverError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (error) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleRetrieverError: ${error}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForLLMRun extends BaseRunManager {\n    async handleLLMNewToken(token, idx, _runId, _parentRunId, _tags, fields) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMNewToken?.(token, idx ?? {\n                            prompt: 0,\n                            completion: 0\n                        }, this.runId, this._parentRunId, this.tags, fields);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMNewToken: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMError: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleLLMEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreLLM) {\n                    try {\n                        await handler.handleLLMEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForChainRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleChainError(err, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainError?.(err, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleChainError: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleChainEnd(output, _runId, _parentRunId, _tags, kwargs) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreChain) {\n                    try {\n                        await handler.handleChainEnd?.(output, this.runId, this._parentRunId, this.tags, kwargs);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleChainEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentAction(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentAction?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleAgentAction: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    async handleAgentEnd(action) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleAgentEnd?.(action, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleAgentEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\nclass CallbackManagerForToolRun extends BaseRunManager {\n    getChild(tag) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        const manager = new CallbackManager(this.runId);\n        manager.setHandlers(this.inheritableHandlers);\n        manager.addTags(this.inheritableTags);\n        manager.addMetadata(this.inheritableMetadata);\n        if (tag) {\n            manager.addTags([\n                tag\n            ], false);\n        }\n        return manager;\n    }\n    async handleToolError(err) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolError?.(err, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleToolError: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreAgent) {\n                    try {\n                        await handler.handleToolEnd?.(output, this.runId, this._parentRunId, this.tags);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleToolEnd: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n}\n/**\n * @example\n * ```typescript\n * const prompt = PromptTemplate.fromTemplate(\"What is the answer to {question}?\");\n *\n * // Example of using LLMChain with OpenAI and a simple prompt\n * const chain = new LLMChain({\n *   llm: new ChatOpenAI({ temperature: 0.9 }),\n *   prompt,\n * });\n *\n * // Running the chain with a single question\n * const result = await chain.call({\n *   question: \"What is the airspeed velocity of an unladen swallow?\",\n * });\n * console.log(\"The answer is:\", result);\n * ```\n */ class CallbackManager extends BaseCallbackManager {\n    constructor(parentRunId, options){\n        super();\n        Object.defineProperty(this, \"handlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableHandlers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"inheritableTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"inheritableMetadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"callback_manager\"\n        });\n        Object.defineProperty(this, \"_parentRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.handlers = options?.handlers ?? this.handlers;\n        this.inheritableHandlers = options?.inheritableHandlers ?? this.inheritableHandlers;\n        this.tags = options?.tags ?? this.tags;\n        this.inheritableTags = options?.inheritableTags ?? this.inheritableTags;\n        this.metadata = options?.metadata ?? this.metadata;\n        this.inheritableMetadata = options?.inheritableMetadata ?? this.inheritableMetadata;\n        this._parentRunId = parentRunId;\n    }\n    /**\n     * Gets the parent run ID, if any.\n     *\n     * @returns The parent run ID.\n     */ getParentRunId() {\n        return this._parentRunId;\n    }\n    async handleLLMStart(llm, prompts, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(prompts.map(async (prompt, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>{\n                if (handler.ignoreLLM) {\n                    return;\n                }\n                if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                    // Create and add run to the run map.\n                    // We do this synchronously to avoid race conditions\n                    // when callbacks are backgrounded.\n                    handler._createRunForLLMStart(llm, [\n                        prompt\n                    ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                }\n                return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                    try {\n                        await handler.handleLLMStart?.(llm, [\n                            prompt\n                        ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }, handler.awaitHandlers);\n            }));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChatModelStart(llm, messages, runId = undefined, _parentRunId = undefined, extraParams = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        return Promise.all(messages.map(async (messageGroup, idx)=>{\n            // Can't have duplicate runs with the same run ID (if provided)\n            const runId_ = idx === 0 && runId ? runId : (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])();\n            await Promise.all(this.handlers.map((handler)=>{\n                if (handler.ignoreLLM) {\n                    return;\n                }\n                if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                    // Create and add run to the run map.\n                    // We do this synchronously to avoid race conditions\n                    // when callbacks are backgrounded.\n                    handler._createRunForChatModelStart(llm, [\n                        messageGroup\n                    ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                }\n                return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                    try {\n                        if (handler.handleChatModelStart) {\n                            await handler.handleChatModelStart?.(llm, [\n                                messageGroup\n                            ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        } else if (handler.handleLLMStart) {\n                            const messageString = (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBufferString)(messageGroup);\n                            await handler.handleLLMStart?.(llm, [\n                                messageString\n                            ], runId_, this._parentRunId, extraParams, this.tags, this.metadata, runName);\n                        }\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleLLMStart: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }, handler.awaitHandlers);\n            }));\n            return new CallbackManagerForLLMRun(runId_, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n        }));\n    }\n    async handleChainStart(chain, inputs, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(), runType = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>{\n            if (handler.ignoreChain) {\n                return;\n            }\n            if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForChainStart(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n            }\n            return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleChainStart?.(chain, inputs, runId, this._parentRunId, this.tags, this.metadata, runType, runName);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleChainStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForChainRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleToolStart(tool, input, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>{\n            if (handler.ignoreAgent) {\n                return;\n            }\n            if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForToolStart(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n            }\n            return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleToolStart?.(tool, input, runId, this._parentRunId, this.tags, this.metadata, runName);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleToolStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForToolRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleRetrieverStart(retriever, query, runId = (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(), _parentRunId = undefined, _tags = undefined, _metadata = undefined, runName = undefined) {\n        await Promise.all(this.handlers.map((handler)=>{\n            if (handler.ignoreRetriever) {\n                return;\n            }\n            if ((0,_tracers_base_js__WEBPACK_IMPORTED_MODULE_7__.isBaseTracer)(handler)) {\n                // Create and add run to the run map.\n                // We do this synchronously to avoid race conditions\n                // when callbacks are backgrounded.\n                handler._createRunForRetrieverStart(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n            }\n            return (0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                try {\n                    await handler.handleRetrieverStart?.(retriever, query, runId, this._parentRunId, this.tags, this.metadata, runName);\n                } catch (err) {\n                    const logFunction = handler.raiseError ? console.error : console.warn;\n                    logFunction(`Error in handler ${handler.constructor.name}, handleRetrieverStart: ${err}`);\n                    if (handler.raiseError) {\n                        throw err;\n                    }\n                }\n            }, handler.awaitHandlers);\n        }));\n        return new CallbackManagerForRetrieverRun(runId, this.handlers, this.inheritableHandlers, this.tags, this.inheritableTags, this.metadata, this.inheritableMetadata, this._parentRunId);\n    }\n    async handleCustomEvent(eventName, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, runId, _tags, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _metadata) {\n        await Promise.all(this.handlers.map((handler)=>(0,_promises_js__WEBPACK_IMPORTED_MODULE_5__.consumeCallback)(async ()=>{\n                if (!handler.ignoreCustomEvent) {\n                    try {\n                        await handler.handleCustomEvent?.(eventName, data, runId, this.tags, this.metadata);\n                    } catch (err) {\n                        const logFunction = handler.raiseError ? console.error : console.warn;\n                        logFunction(`Error in handler ${handler.constructor.name}, handleCustomEvent: ${err}`);\n                        if (handler.raiseError) {\n                            throw err;\n                        }\n                    }\n                }\n            }, handler.awaitHandlers)));\n    }\n    addHandler(handler, inherit = true) {\n        this.handlers.push(handler);\n        if (inherit) {\n            this.inheritableHandlers.push(handler);\n        }\n    }\n    removeHandler(handler) {\n        this.handlers = this.handlers.filter((_handler)=>_handler !== handler);\n        this.inheritableHandlers = this.inheritableHandlers.filter((_handler)=>_handler !== handler);\n    }\n    setHandlers(handlers, inherit = true) {\n        this.handlers = [];\n        this.inheritableHandlers = [];\n        for (const handler of handlers){\n            this.addHandler(handler, inherit);\n        }\n    }\n    addTags(tags, inherit = true) {\n        this.removeTags(tags); // Remove duplicates\n        this.tags.push(...tags);\n        if (inherit) {\n            this.inheritableTags.push(...tags);\n        }\n    }\n    removeTags(tags) {\n        this.tags = this.tags.filter((tag)=>!tags.includes(tag));\n        this.inheritableTags = this.inheritableTags.filter((tag)=>!tags.includes(tag));\n    }\n    addMetadata(metadata, inherit = true) {\n        this.metadata = {\n            ...this.metadata,\n            ...metadata\n        };\n        if (inherit) {\n            this.inheritableMetadata = {\n                ...this.inheritableMetadata,\n                ...metadata\n            };\n        }\n    }\n    removeMetadata(metadata) {\n        for (const key of Object.keys(metadata)){\n            delete this.metadata[key];\n            delete this.inheritableMetadata[key];\n        }\n    }\n    copy(additionalHandlers = [], inherit = true) {\n        const manager = new CallbackManager(this._parentRunId);\n        for (const handler of this.handlers){\n            const inheritable = this.inheritableHandlers.includes(handler);\n            manager.addHandler(handler, inheritable);\n        }\n        for (const tag of this.tags){\n            const inheritable = this.inheritableTags.includes(tag);\n            manager.addTags([\n                tag\n            ], inheritable);\n        }\n        for (const key of Object.keys(this.metadata)){\n            const inheritable = Object.keys(this.inheritableMetadata).includes(key);\n            manager.addMetadata({\n                [key]: this.metadata[key]\n            }, inheritable);\n        }\n        for (const handler of additionalHandlers){\n            if (// Prevent multiple copies of console_callback_handler\n            manager.handlers.filter((h)=>h.name === \"console_callback_handler\").some((h)=>h.name === handler.name)) {\n                continue;\n            }\n            manager.addHandler(handler, inherit);\n        }\n        return manager;\n    }\n    static fromHandlers(handlers) {\n        class Handler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n            constructor(){\n                super();\n                Object.defineProperty(this, \"name\", {\n                    enumerable: true,\n                    configurable: true,\n                    writable: true,\n                    value: (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])()\n                });\n                Object.assign(this, handlers);\n            }\n        }\n        const manager = new this();\n        manager.addHandler(new Handler());\n        return manager;\n    }\n    static configure(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        return this._configureSync(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options);\n    }\n    // TODO: Deprecate async method in favor of this one.\n    static _configureSync(inheritableHandlers, localHandlers, inheritableTags, localTags, inheritableMetadata, localMetadata, options) {\n        let callbackManager;\n        if (inheritableHandlers || localHandlers) {\n            if (Array.isArray(inheritableHandlers) || !inheritableHandlers) {\n                callbackManager = new CallbackManager();\n                callbackManager.setHandlers(inheritableHandlers?.map(ensureHandler) ?? [], true);\n            } else {\n                callbackManager = inheritableHandlers;\n            }\n            callbackManager = callbackManager.copy(Array.isArray(localHandlers) ? localHandlers.map(ensureHandler) : localHandlers?.handlers, false);\n        }\n        const verboseEnabled = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"LANGCHAIN_VERBOSE\") === \"true\" || options?.verbose;\n        const tracingV2Enabled = _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer.getTraceableRunTree()?.tracingEnabled || (0,_utils_callbacks_js__WEBPACK_IMPORTED_MODULE_6__.isTracingEnabled)();\n        const tracingEnabled = tracingV2Enabled || ((0,_utils_env_js__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(\"LANGCHAIN_TRACING\") ?? false);\n        if (verboseEnabled || tracingEnabled) {\n            if (!callbackManager) {\n                callbackManager = new CallbackManager();\n            }\n            if (verboseEnabled && !callbackManager.handlers.some((handler)=>handler.name === _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler.prototype.name)) {\n                const consoleHandler = new _tracers_console_js__WEBPACK_IMPORTED_MODULE_1__.ConsoleCallbackHandler();\n                callbackManager.addHandler(consoleHandler, true);\n            }\n            if (tracingEnabled && !callbackManager.handlers.some((handler)=>handler.name === \"langchain_tracer\")) {\n                if (tracingV2Enabled) {\n                    const tracerV2 = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer();\n                    callbackManager.addHandler(tracerV2, true);\n                    // handoff between langchain and langsmith/traceable\n                    // override the parent run ID\n                    callbackManager._parentRunId = _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer.getTraceableRunTree()?.id ?? callbackManager._parentRunId;\n                }\n            }\n        }\n        for (const { contextVar, inheritable = true, handlerClass, envVar } of (0,_singletons_async_local_storage_context_js__WEBPACK_IMPORTED_MODULE_8__._getConfigureHooks)()){\n            const createIfNotInContext = envVar && (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_3__.getEnvironmentVariable)(envVar) === \"true\" && handlerClass;\n            let handler;\n            const contextVarValue = contextVar !== undefined ? (0,_singletons_async_local_storage_context_js__WEBPACK_IMPORTED_MODULE_8__.getContextVariable)(contextVar) : undefined;\n            if (contextVarValue && (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.isBaseCallbackHandler)(contextVarValue)) {\n                handler = contextVarValue;\n            } else if (createIfNotInContext) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                handler = new handlerClass({});\n            }\n            if (handler !== undefined) {\n                if (!callbackManager) {\n                    callbackManager = new CallbackManager();\n                }\n                if (!callbackManager.handlers.some((h)=>h.name === handler.name)) {\n                    callbackManager.addHandler(handler, inheritable);\n                }\n            }\n        }\n        if (inheritableTags || localTags) {\n            if (callbackManager) {\n                callbackManager.addTags(inheritableTags ?? []);\n                callbackManager.addTags(localTags ?? [], false);\n            }\n        }\n        if (inheritableMetadata || localMetadata) {\n            if (callbackManager) {\n                callbackManager.addMetadata(inheritableMetadata ?? {});\n                callbackManager.addMetadata(localMetadata ?? {}, false);\n            }\n        }\n        return callbackManager;\n    }\n}\nfunction ensureHandler(handler) {\n    if (\"name\" in handler) {\n        return handler;\n    }\n    return _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler.fromMethods(handler);\n}\n/**\n * @deprecated Use [`traceable`](https://docs.smith.langchain.com/observability/how_to_guides/tracing/annotate_code)\n * from \"langsmith\" instead.\n */ class TraceGroup {\n    constructor(groupName, options){\n        Object.defineProperty(this, \"groupName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: groupName\n        });\n        Object.defineProperty(this, \"options\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: options\n        });\n        Object.defineProperty(this, \"runManager\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async getTraceGroupCallbackManager(group_name, inputs, options) {\n        const cb = new _tracers_tracer_langchain_js__WEBPACK_IMPORTED_MODULE_4__.LangChainTracer(options);\n        const cm = await CallbackManager.configure([\n            cb\n        ]);\n        const runManager = await cm?.handleChainStart({\n            lc: 1,\n            type: \"not_implemented\",\n            id: [\n                \"langchain\",\n                \"callbacks\",\n                \"groups\",\n                group_name\n            ]\n        }, inputs ?? {});\n        if (!runManager) {\n            throw new Error(\"Failed to create run group callback manager.\");\n        }\n        return runManager;\n    }\n    async start(inputs) {\n        if (!this.runManager) {\n            this.runManager = await this.getTraceGroupCallbackManager(this.groupName, inputs, this.options);\n        }\n        return this.runManager.getChild();\n    }\n    async error(err) {\n        if (this.runManager) {\n            await this.runManager.handleChainError(err);\n            this.runManager = undefined;\n        }\n    }\n    async end(output) {\n        if (this.runManager) {\n            await this.runManager.handleChainEnd(output ?? {});\n            this.runManager = undefined;\n        }\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function traceAsGroup(groupOptions, enclosedCode, ...args) {\n    const traceGroup = new TraceGroup(groupOptions.name, groupOptions);\n    const callbackManager = await traceGroup.start({\n        ...args\n    });\n    try {\n        const result = await enclosedCode(callbackManager, ...args);\n        await traceGroup.end(_coerceToDict(result, \"output\"));\n        return result;\n    } catch (err) {\n        await traceGroup.error(err);\n        throw err;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/callbacks/promises.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* reexport safe */ _singletons_callbacks_js__WEBPACK_IMPORTED_MODULE_0__.awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* reexport safe */ _singletons_callbacks_js__WEBPACK_IMPORTED_MODULE_0__.consumeCallback)\n/* harmony export */ });\n/* harmony import */ var _singletons_callbacks_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../singletons/callbacks.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvY2FsbGJhY2tzL3Byb21pc2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFnRjtBQUNsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2NhbGxiYWNrcy9wcm9taXNlcy5qcz9lYzMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGF3YWl0QWxsQ2FsbGJhY2tzLCBjb25zdW1lQ2FsbGJhY2sgfSBmcm9tIFwiLi4vc2luZ2xldG9ucy9jYWxsYmFja3MuanNcIjtcbmV4cG9ydCB7IGF3YWl0QWxsQ2FsbGJhY2tzLCBjb25zdW1lQ2FsbGJhY2sgfTtcbiJdLCJuYW1lcyI6WyJhd2FpdEFsbENhbGxiYWNrcyIsImNvbnN1bWVDYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/callbacks/promises.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/embeddings.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/embeddings.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* binding */ Embeddings)\n/* harmony export */ });\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n/**\n * An abstract class that provides methods for embedding documents and\n * queries using LangChain.\n */ class Embeddings {\n    constructor(params){\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_0__.AsyncCaller(params ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZW1iZWRkaW5ncy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFzRDtBQUN0RDs7O0NBR0MsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEI7OztTQUdDLEdBQ0RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVTtZQUNsQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxNQUFNLEdBQUcsSUFBSVYsK0RBQVdBLENBQUNHLFVBQVUsQ0FBQztJQUM3QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZW1iZWRkaW5ncy5qcz9lMTlmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jQ2FsbGVyIH0gZnJvbSBcIi4vdXRpbHMvYXN5bmNfY2FsbGVyLmpzXCI7XG4vKipcbiAqIEFuIGFic3RyYWN0IGNsYXNzIHRoYXQgcHJvdmlkZXMgbWV0aG9kcyBmb3IgZW1iZWRkaW5nIGRvY3VtZW50cyBhbmRcbiAqIHF1ZXJpZXMgdXNpbmcgTGFuZ0NoYWluLlxuICovXG5leHBvcnQgY2xhc3MgRW1iZWRkaW5ncyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXN5bmMgY2FsbGVyIHNob3VsZCBiZSB1c2VkIGJ5IHN1YmNsYXNzZXMgdG8gbWFrZSBhbnkgYXN5bmMgY2FsbHMsXG4gICAgICAgICAqIHdoaWNoIHdpbGwgdGh1cyBiZW5lZml0IGZyb20gdGhlIGNvbmN1cnJlbmN5IGFuZCByZXRyeSBsb2dpYy5cbiAgICAgICAgICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNhbGxlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNhbGxlciA9IG5ldyBBc3luY0NhbGxlcihwYXJhbXMgPz8ge30pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJBc3luY0NhbGxlciIsIkVtYmVkZGluZ3MiLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJjYWxsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/errors/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/errors/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLangChainErrorFields: () => (/* binding */ addLangChainErrorFields)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable no-param-reassign */ function addLangChainErrorFields(error, lc_error_code) {\n    error.lc_error_code = lc_error_code;\n    error.message = `${error.message}\\n\\nTroubleshooting URL: https://js.langchain.com/docs/troubleshooting/errors/${lc_error_code}/\\n`;\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxREFBcUQsR0FDckQsb0NBQW9DLEdBQzdCLFNBQVNBLHdCQUF3QkMsS0FBSyxFQUFFQyxhQUFhO0lBQ3hERCxNQUFNQyxhQUFhLEdBQUdBO0lBQ3RCRCxNQUFNRSxPQUFPLEdBQUcsQ0FBQyxFQUFFRixNQUFNRSxPQUFPLENBQUMsOEVBQThFLEVBQUVELGNBQWMsR0FBRyxDQUFDO0lBQ25JLE9BQU9EO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9lcnJvcnMvaW5kZXguanM/MTkxZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZExhbmdDaGFpbkVycm9yRmllbGRzKGVycm9yLCBsY19lcnJvcl9jb2RlKSB7XG4gICAgZXJyb3IubGNfZXJyb3JfY29kZSA9IGxjX2Vycm9yX2NvZGU7XG4gICAgZXJyb3IubWVzc2FnZSA9IGAke2Vycm9yLm1lc3NhZ2V9XFxuXFxuVHJvdWJsZXNob290aW5nIFVSTDogaHR0cHM6Ly9qcy5sYW5nY2hhaW4uY29tL2RvY3MvdHJvdWJsZXNob290aW5nL2Vycm9ycy8ke2xjX2Vycm9yX2NvZGV9L1xcbmA7XG4gICAgcmV0dXJuIGVycm9yO1xufVxuIl0sIm5hbWVzIjpbImFkZExhbmdDaGFpbkVycm9yRmllbGRzIiwiZXJyb3IiLCJsY19lcnJvcl9jb2RlIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/base.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/base.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* binding */ BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* binding */ BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* binding */ calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* binding */ getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* binding */ getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* binding */ getModelNameForTiktoken),\n/* harmony export */   isOpenAITool: () => (/* binding */ isOpenAITool)\n/* harmony export */ });\n/* harmony import */ var _caches_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../caches/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/caches/base.js\");\n/* harmony import */ var _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../prompt_values.js */ \"(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/tiktoken.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n\n\n\n\n\n\n// https://www.npmjs.com/package/js-tiktoken\nconst getModelNameForTiktoken = (modelName)=>{\n    if (modelName.startsWith(\"gpt-3.5-turbo-16k\")) {\n        return \"gpt-3.5-turbo-16k\";\n    }\n    if (modelName.startsWith(\"gpt-3.5-turbo-\")) {\n        return \"gpt-3.5-turbo\";\n    }\n    if (modelName.startsWith(\"gpt-4-32k\")) {\n        return \"gpt-4-32k\";\n    }\n    if (modelName.startsWith(\"gpt-4-\")) {\n        return \"gpt-4\";\n    }\n    if (modelName.startsWith(\"gpt-4o\")) {\n        return \"gpt-4o\";\n    }\n    return modelName;\n};\nconst getEmbeddingContextSize = (modelName)=>{\n    switch(modelName){\n        case \"text-embedding-ada-002\":\n            return 8191;\n        default:\n            return 2046;\n    }\n};\nconst getModelContextSize = (modelName)=>{\n    switch(getModelNameForTiktoken(modelName)){\n        case \"gpt-3.5-turbo-16k\":\n            return 16384;\n        case \"gpt-3.5-turbo\":\n            return 4096;\n        case \"gpt-4-32k\":\n            return 32768;\n        case \"gpt-4\":\n            return 8192;\n        case \"text-davinci-003\":\n            return 4097;\n        case \"text-curie-001\":\n            return 2048;\n        case \"text-babbage-001\":\n            return 2048;\n        case \"text-ada-001\":\n            return 2048;\n        case \"code-davinci-002\":\n            return 8000;\n        case \"code-cushman-001\":\n            return 2048;\n        default:\n            return 4097;\n    }\n};\n/**\n * Whether or not the input matches the OpenAI tool definition.\n * @param {unknown} tool The input to check.\n * @returns {boolean} Whether the input is an OpenAI tool definition.\n */ function isOpenAITool(tool) {\n    if (typeof tool !== \"object\" || !tool) return false;\n    if (\"type\" in tool && tool.type === \"function\" && \"function\" in tool && typeof tool.function === \"object\" && tool.function && \"name\" in tool.function && \"parameters\" in tool.function) {\n        return true;\n    }\n    return false;\n}\nconst calculateMaxTokens = async ({ prompt, modelName })=>{\n    let numTokens;\n    try {\n        numTokens = (await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(getModelNameForTiktoken(modelName))).encode(prompt).length;\n    } catch (error) {\n        console.warn(\"Failed to calculate number of tokens, falling back to approximate count\");\n        // fallback to approximate calculation if tiktoken is not available\n        // each token is ~4 characters: https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them#\n        numTokens = Math.ceil(prompt.length / 4);\n    }\n    const maxTokens = getModelContextSize(modelName);\n    return maxTokens - numTokens;\n};\nconst getVerbosity = ()=>false;\n/**\n * Base class for language models, chains, tools.\n */ class BaseLangChain extends _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.Runnable {\n    get lc_attributes() {\n        return {\n            callbacks: undefined,\n            verbose: undefined\n        };\n    }\n    constructor(params){\n        super(params);\n        /**\n         * Whether to print out response text.\n         */ Object.defineProperty(this, \"verbose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"callbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.verbose = params.verbose ?? getVerbosity();\n        this.callbacks = params.callbacks;\n        this.tags = params.tags ?? [];\n        this.metadata = params.metadata ?? {};\n    }\n}\n/**\n * Base class for language models.\n */ class BaseLanguageModel extends BaseLangChain {\n    /**\n     * Keys that the language model accepts as call options.\n     */ get callKeys() {\n        return [\n            \"stop\",\n            \"timeout\",\n            \"signal\",\n            \"tags\",\n            \"metadata\",\n            \"callbacks\"\n        ];\n    }\n    constructor({ callbacks, callbackManager, ...params }){\n        const { cache, ...rest } = params;\n        super({\n            callbacks: callbacks ?? callbackManager,\n            ...rest\n        });\n        /**\n         * The async caller should be used by subclasses to make any async calls,\n         * which will thus benefit from the concurrency and retry logic.\n         */ Object.defineProperty(this, \"caller\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"cache\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_encoding\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof cache === \"object\") {\n            this.cache = cache;\n        } else if (cache) {\n            this.cache = _caches_base_js__WEBPACK_IMPORTED_MODULE_0__.InMemoryCache.global();\n        } else {\n            this.cache = undefined;\n        }\n        this.caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_3__.AsyncCaller(params ?? {});\n    }\n    async getNumTokens(content) {\n        // TODO: Figure out correct value.\n        if (typeof content !== \"string\") {\n            return 0;\n        }\n        // fallback to approximate calculation if tiktoken is not available\n        let numTokens = Math.ceil(content.length / 4);\n        if (!this._encoding) {\n            try {\n                this._encoding = await (0,_utils_tiktoken_js__WEBPACK_IMPORTED_MODULE_4__.encodingForModel)(\"modelName\" in this ? getModelNameForTiktoken(this.modelName) : \"gpt2\");\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        if (this._encoding) {\n            try {\n                numTokens = this._encoding.encode(content).length;\n            } catch (error) {\n                console.warn(\"Failed to calculate number of tokens, falling back to approximate count\", error);\n            }\n        }\n        return numTokens;\n    }\n    static _convertInputToPromptValue(input) {\n        if (typeof input === \"string\") {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.StringPromptValue(input);\n        } else if (Array.isArray(input)) {\n            return new _prompt_values_js__WEBPACK_IMPORTED_MODULE_1__.ChatPromptValue(input.map(_messages_utils_js__WEBPACK_IMPORTED_MODULE_2__.coerceMessageLikeToMessage));\n        } else {\n            return input;\n        }\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * Create a unique cache key for a specific call to a specific language model.\n     * @param callOptions Call options for the model\n     * @returns A unique cache key.\n     */ _getSerializedCacheKeyParametersForCall(// TODO: Fix when we remove the RunnableLambda backwards compatibility shim.\n    { config, ...callOptions }) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const params = {\n            ...this._identifyingParams(),\n            ...callOptions,\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n        const filteredEntries = Object.entries(params).filter(([_, value])=>value !== undefined);\n        const serializedEntries = filteredEntries.map(([key, value])=>`${key}:${JSON.stringify(value)}`).sort().join(\",\");\n        return serializedEntries;\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * @deprecated\n     * Load an LLM from a json-like object describing it.\n     */ static async deserialize(_data) {\n        throw new Error(\"Use .toJSON() instead\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/chat_models.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* binding */ BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* binding */ SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* binding */ createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _runnables_passthrough_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../runnables/passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n/* harmony import */ var _utils_types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/types/is_zod_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/is_zod_schema.js\");\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a transform stream for encoding chat message chunks.\n * @deprecated Use {@link BytesOutputParser} instead\n * @returns A TransformStream instance that encodes chat message chunks.\n */ function createChatMessageChunkEncoderStream() {\n    const textEncoder = new TextEncoder();\n    return new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(textEncoder.encode(typeof chunk.content === \"string\" ? chunk.content : JSON.stringify(chunk.content)));\n        }\n    });\n}\n/**\n * Base class for chat models. It extends the BaseLanguageModel class and\n * provides methods for generating chat based on input messages.\n */ class BaseChatModel extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseLanguageModel {\n    constructor(fields){\n        super(fields);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"chat_models\",\n                this._llmType()\n            ]\n        });\n    }\n    _separateRunnableConfigFromCallOptionsCompat(options) {\n        // For backwards compat, keep `signal` in both runnableConfig and callOptions\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        callOptions.signal = runnableConfig.signal;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    /**\n     * Invokes the chat model with a single input.\n     * @param input The input for the language model.\n     * @param options The call options.\n     * @returns A Promise that resolves to a BaseMessageChunk.\n     */ async invoke(input, options) {\n        const promptValue = BaseChatModel._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([\n            promptValue\n        ], options, options?.callbacks);\n        const chatGeneration = result.generations[0][0];\n        // TODO: Remove cast after figuring out inheritance\n        return chatGeneration.message;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_messages, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseChatModel.prototype._streamResponseChunks) {\n            yield this.invoke(input, options);\n        } else {\n            const prompt = BaseChatModel._convertInputToPromptValue(input);\n            const messages = prompt.toChatMessages();\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(options);\n            const inheritableMetadata = {\n                ...runnableConfig.metadata,\n                ...this.getLsParams(callOptions)\n            };\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_4__.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, inheritableMetadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1\n            };\n            const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), [\n                messages\n            ], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generationChunk;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let llmOutput;\n            try {\n                for await (const chunk of this._streamResponseChunks(messages, callOptions, runManagers?.[0])){\n                    if (chunk.message.id == null) {\n                        const runId = runManagers?.at(0)?.runId;\n                        if (runId != null) chunk.message._updateId(`run-${runId}`);\n                    }\n                    chunk.message.response_metadata = {\n                        ...chunk.generationInfo,\n                        ...chunk.message.response_metadata\n                    };\n                    yield chunk.message;\n                    if (!generationChunk) {\n                        generationChunk = chunk;\n                    } else {\n                        generationChunk = generationChunk.concat(chunk);\n                    }\n                    if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.isAIMessageChunk)(chunk.message) && chunk.message.usage_metadata !== undefined) {\n                        llmOutput = {\n                            tokenUsage: {\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\n                                totalTokens: chunk.message.usage_metadata.total_tokens\n                            }\n                        };\n                    }\n                }\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMEnd({\n                    // TODO: Remove cast after figuring out inheritance\n                    generations: [\n                        [\n                            generationChunk\n                        ]\n                    ],\n                    llmOutput\n                })));\n        }\n    }\n    getLsParams(options) {\n        const providerName = this.getName().startsWith(\"Chat\") ? this.getName().replace(\"Chat\", \"\") : this.getName();\n        return {\n            ls_model_type: \"chat\",\n            ls_stop: options.stop,\n            ls_provider: providerName\n        };\n    }\n    /** @ignore */ async _generateUncached(messages, parsedOptions, handledOptions) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.coerceMessageLikeToMessage));\n        const inheritableMetadata = {\n            ...handledOptions.metadata,\n            ...this.getLsParams(parsedOptions)\n        };\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_4__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        const generations = [];\n        const llmOutputs = [];\n        // Even if stream is not explicitly called, check if model is implicitly\n        // called from streamEvents() or streamLog() to get all streamed events.\n        // Bail out if _streamResponseChunks not overridden\n        const hasStreamingHandler = !!runManagers?.[0].handlers.find(_callbacks_base_js__WEBPACK_IMPORTED_MODULE_9__.callbackHandlerPrefersStreaming);\n        if (hasStreamingHandler && baseMessages.length === 1 && this._streamResponseChunks !== BaseChatModel.prototype._streamResponseChunks) {\n            try {\n                const stream = await this._streamResponseChunks(baseMessages[0], parsedOptions, runManagers?.[0]);\n                let aggregated;\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let llmOutput;\n                for await (const chunk of stream){\n                    if (chunk.message.id == null) {\n                        const runId = runManagers?.at(0)?.runId;\n                        if (runId != null) chunk.message._updateId(`run-${runId}`);\n                    }\n                    if (aggregated === undefined) {\n                        aggregated = chunk;\n                    } else {\n                        aggregated = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_6__.concat)(aggregated, chunk);\n                    }\n                    if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.isAIMessageChunk)(chunk.message) && chunk.message.usage_metadata !== undefined) {\n                        llmOutput = {\n                            tokenUsage: {\n                                promptTokens: chunk.message.usage_metadata.input_tokens,\n                                completionTokens: chunk.message.usage_metadata.output_tokens,\n                                totalTokens: chunk.message.usage_metadata.total_tokens\n                            }\n                        };\n                    }\n                }\n                if (aggregated === undefined) {\n                    throw new Error(\"Received empty response from chat model call.\");\n                }\n                generations.push([\n                    aggregated\n                ]);\n                await runManagers?.[0].handleLLMEnd({\n                    generations,\n                    llmOutput\n                });\n            } catch (e) {\n                await runManagers?.[0].handleLLMError(e);\n                throw e;\n            }\n        } else {\n            // generate results\n            const results = await Promise.allSettled(baseMessages.map((messageList, i)=>this._generate(messageList, {\n                    ...parsedOptions,\n                    promptIndex: i\n                }, runManagers?.[i])));\n            // handle results\n            await Promise.all(results.map(async (pResult, i)=>{\n                if (pResult.status === \"fulfilled\") {\n                    const result = pResult.value;\n                    for (const generation of result.generations){\n                        if (generation.message.id == null) {\n                            const runId = runManagers?.at(0)?.runId;\n                            if (runId != null) generation.message._updateId(`run-${runId}`);\n                        }\n                        generation.message.response_metadata = {\n                            ...generation.generationInfo,\n                            ...generation.message.response_metadata\n                        };\n                    }\n                    if (result.generations.length === 1) {\n                        result.generations[0].message.response_metadata = {\n                            ...result.llmOutput,\n                            ...result.generations[0].message.response_metadata\n                        };\n                    }\n                    generations[i] = result.generations;\n                    llmOutputs[i] = result.llmOutput;\n                    return runManagers?.[i]?.handleLLMEnd({\n                        generations: [\n                            result.generations\n                        ],\n                        llmOutput: result.llmOutput\n                    });\n                } else {\n                    // status === \"rejected\"\n                    await runManagers?.[i]?.handleLLMError(pResult.reason);\n                    return Promise.reject(pResult.reason);\n                }\n            }));\n        }\n        // create combined output\n        const output = {\n            generations,\n            llmOutput: llmOutputs.length ? this._combineLLMOutput?.(...llmOutputs) : undefined\n        };\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_2__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    async _generateCached({ messages, cache, llmStringKey, parsedOptions, handledOptions }) {\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.coerceMessageLikeToMessage));\n        const inheritableMetadata = {\n            ...handledOptions.metadata,\n            ...this.getLsParams(parsedOptions)\n        };\n        // create callback manager and start run\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_4__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, inheritableMetadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: 1,\n            cached: true\n        };\n        const runManagers = await callbackManager_?.handleChatModelStart(this.toJSON(), baseMessages, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(baseMessages.map(async (baseMessage, index)=>{\n            // Join all content into one string for the prompt index\n            const prompt = BaseChatModel._convertInputToPromptValue(baseMessage).toString();\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results.map((result, index)=>({\n                result,\n                runManager: runManagers?.[index]\n            })).filter(({ result })=>result.status === \"fulfilled\" && result.value != null || result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i)=>{\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result;\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [\n                        result\n                    ]\n                });\n            } else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason);\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_2__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Generates chat based on the input messages.\n     * @param messages An array of arrays of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generate(messages, options, callbacks) {\n        // parse call options\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else {\n            parsedOptions = options;\n        }\n        const baseMessages = messages.map((messageList)=>messageList.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.coerceMessageLikeToMessage));\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(baseMessages, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices } = await this._generateCached({\n            messages: baseMessages,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i)=>baseMessages[i]), callOptions, runnableConfig);\n            await Promise.all(results.generations.map(async (generation, index)=>{\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                // Join all content into one string for the prompt index\n                const prompt = BaseChatModel._convertInputToPromptValue(baseMessages[promptIndex]).toString();\n                return cache.update(prompt, llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return {\n            generations,\n            llmOutput\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _modelType() {\n        return \"base_chat_model\";\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this.invocationParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    /**\n     * Generates a prompt based on the input prompt values.\n     * @param promptValues An array of BasePromptValue instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to an LLMResult.\n     */ async generatePrompt(promptValues, options, callbacks) {\n        const promptMessages = promptValues.map((promptValue)=>promptValue.toChatMessages());\n        return this.generate(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async call(messages, options, callbacks) {\n        const result = await this.generate([\n            messages.map(_messages_index_js__WEBPACK_IMPORTED_MODULE_1__.coerceMessageLikeToMessage)\n        ], options, callbacks);\n        const generations = result.generations;\n        return generations[0][0].message;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Makes a single call to the chat model with a prompt value.\n     * @param promptValue The value of the prompt.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async callPrompt(promptValue, options, callbacks) {\n        const promptMessages = promptValue.toChatMessages();\n        return this.call(promptMessages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on the input messages.\n     * @param messages An array of BaseMessage instances.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a BaseMessage.\n     */ async predictMessages(messages, options, callbacks) {\n        return this.call(messages, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * Predicts the next message based on a text input.\n     * @param text The text input.\n     * @param options The call options or an array of stop sequences.\n     * @param callbacks The callbacks for the language model.\n     * @returns A Promise that resolves to a string.\n     */ async predict(text, options, callbacks) {\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(text);\n        const result = await this.call([\n            message\n        ], options, callbacks);\n        if (typeof result.content !== \"string\") {\n            throw new Error(\"Cannot use predict when output is not a string.\");\n        }\n        return result.content;\n    }\n    withStructuredOutput(outputSchema, config) {\n        if (typeof this.bindTools !== \"function\") {\n            throw new Error(`Chat model must implement \".bindTools()\" to use withStructuredOutput.`);\n        }\n        if (config?.strict) {\n            throw new Error(`\"strict\" mode is not supported for this model by default.`);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const schema = outputSchema;\n        const name = config?.name;\n        const description = schema.description ?? \"A function available to call.\";\n        const method = config?.method;\n        const includeRaw = config?.includeRaw;\n        if (method === \"jsonMode\") {\n            throw new Error(`Base withStructuredOutput implementation only supports \"functionCalling\" as a method.`);\n        }\n        let functionName = name ?? \"extract\";\n        let tools;\n        if ((0,_utils_types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_8__.isZodSchema)(schema)) {\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(schema)\n                    }\n                }\n            ];\n        } else {\n            if (\"name\" in schema) {\n                functionName = schema.name;\n            }\n            tools = [\n                {\n                    type: \"function\",\n                    function: {\n                        name: functionName,\n                        description,\n                        parameters: schema\n                    }\n                }\n            ];\n        }\n        const llm = this.bindTools(tools);\n        const outputParser = _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.RunnableLambda.from((input)=>{\n            if (!input.tool_calls || input.tool_calls.length === 0) {\n                throw new Error(\"No tool calls found in the response.\");\n            }\n            const toolCall = input.tool_calls.find((tc)=>tc.name === functionName);\n            if (!toolCall) {\n                throw new Error(`No tool call found with name ${functionName}.`);\n            }\n            return toolCall.args;\n        });\n        if (!includeRaw) {\n            return llm.pipe(outputParser).withConfig({\n                runName: \"StructuredOutput\"\n            });\n        }\n        const parserAssign = _runnables_passthrough_js__WEBPACK_IMPORTED_MODULE_7__.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config)=>outputParser.invoke(input.raw, config)\n        });\n        const parserNone = _runnables_passthrough_js__WEBPACK_IMPORTED_MODULE_7__.RunnablePassthrough.assign({\n            parsed: ()=>null\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [\n                parserNone\n            ]\n        });\n        return _runnables_base_js__WEBPACK_IMPORTED_MODULE_5__.RunnableSequence.from([\n            {\n                raw: llm\n            },\n            parsedWithFallback\n        ]).withConfig({\n            runName: \"StructuredOutputRunnable\"\n        });\n    }\n}\n/**\n * An abstract class that extends BaseChatModel and provides a simple\n * implementation of _generate.\n */ class SimpleChatModel extends BaseChatModel {\n    async _generate(messages, options, runManager) {\n        const text = await this._call(messages, options, runManager);\n        const message = new _messages_index_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage(text);\n        if (typeof message.content !== \"string\") {\n            throw new Error(\"Cannot generate with a simple chat model when output is not a string.\");\n        }\n        return {\n            generations: [\n                {\n                    text: message.content,\n                    message\n                }\n            ]\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/language_models/llms.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/language_models/llms.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLM: () => (/* binding */ BaseLLM),\n/* harmony export */   LLM: () => (/* binding */ LLM)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n\n\n\n\n\n\n/**\n * LLM Wrapper. Takes in a prompt (or prompts) and returns a string.\n */ class BaseLLM extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseLanguageModel {\n    constructor({ concurrency, ...rest }){\n        super(concurrency ? {\n            maxConcurrency: concurrency,\n            ...rest\n        } : rest);\n        // Only ever instantiated in main LangChain\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"llms\",\n                this._llmType()\n            ]\n        });\n    }\n    /**\n     * This method takes an input and options, and returns a string. It\n     * converts the input to a prompt value and generates a result based on\n     * the prompt.\n     * @param input Input for the LLM.\n     * @param options Options for the LLM call.\n     * @returns A string result based on the prompt.\n     */ async invoke(input, options) {\n        const promptValue = BaseLLM._convertInputToPromptValue(input);\n        const result = await this.generatePrompt([\n            promptValue\n        ], options, options?.callbacks);\n        return result.generations[0][0].text;\n    }\n    // eslint-disable-next-line require-yield\n    async *_streamResponseChunks(_input, _options, _runManager) {\n        throw new Error(\"Not implemented.\");\n    }\n    _separateRunnableConfigFromCallOptionsCompat(options) {\n        // For backwards compat, keep `signal` in both runnableConfig and callOptions\n        const [runnableConfig, callOptions] = super._separateRunnableConfigFromCallOptions(options);\n        callOptions.signal = runnableConfig.signal;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async *_streamIterator(input, options) {\n        // Subclass check required to avoid double callbacks with default implementation\n        if (this._streamResponseChunks === BaseLLM.prototype._streamResponseChunks) {\n            yield this.invoke(input, options);\n        } else {\n            const prompt = BaseLLM._convertInputToPromptValue(input);\n            const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(options);\n            const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(runnableConfig.callbacks, this.callbacks, runnableConfig.tags, this.tags, runnableConfig.metadata, this.metadata, {\n                verbose: this.verbose\n            });\n            const extra = {\n                options: callOptions,\n                invocation_params: this?.invocationParams(callOptions),\n                batch_size: 1\n            };\n            const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), [\n                prompt.toString()\n            ], runnableConfig.runId, undefined, extra, undefined, undefined, runnableConfig.runName);\n            let generation = new _outputs_js__WEBPACK_IMPORTED_MODULE_1__.GenerationChunk({\n                text: \"\"\n            });\n            try {\n                for await (const chunk of this._streamResponseChunks(prompt.toString(), callOptions, runManagers?.[0])){\n                    if (!generation) {\n                        generation = chunk;\n                    } else {\n                        generation = generation.concat(chunk);\n                    }\n                    if (typeof chunk.text === \"string\") {\n                        yield chunk.text;\n                    }\n                }\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMEnd({\n                    generations: [\n                        [\n                            generation\n                        ]\n                    ]\n                })));\n        }\n    }\n    /**\n     * This method takes prompt values, options, and callbacks, and generates\n     * a result based on the prompts.\n     * @param promptValues Prompt values for the LLM.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns An LLMResult based on the prompts.\n     */ async generatePrompt(promptValues, options, callbacks) {\n        const prompts = promptValues.map((promptValue)=>promptValue.toString());\n        return this.generate(prompts, options, callbacks);\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    invocationParams(_options) {\n        return {};\n    }\n    _flattenLLMResult(llmResult) {\n        const llmResults = [];\n        for(let i = 0; i < llmResult.generations.length; i += 1){\n            const genList = llmResult.generations[i];\n            if (i === 0) {\n                llmResults.push({\n                    generations: [\n                        genList\n                    ],\n                    llmOutput: llmResult.llmOutput\n                });\n            } else {\n                const llmOutput = llmResult.llmOutput ? {\n                    ...llmResult.llmOutput,\n                    tokenUsage: {}\n                } : undefined;\n                llmResults.push({\n                    generations: [\n                        genList\n                    ],\n                    llmOutput\n                });\n            }\n        }\n        return llmResults;\n    }\n    /** @ignore */ async _generateUncached(prompts, parsedOptions, handledOptions) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: prompts.length\n        };\n        const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), prompts, handledOptions.runId, undefined, extra, undefined, undefined, handledOptions?.runName);\n        // Even if stream is not explicitly called, check if model is implicitly\n        // called from streamEvents() or streamLog() to get all streamed events.\n        // Bail out if _streamResponseChunks not overridden\n        const hasStreamingHandler = !!runManagers?.[0].handlers.find(_callbacks_base_js__WEBPACK_IMPORTED_MODULE_5__.callbackHandlerPrefersStreaming);\n        let output;\n        if (hasStreamingHandler && prompts.length === 1 && this._streamResponseChunks !== BaseLLM.prototype._streamResponseChunks) {\n            try {\n                const stream = await this._streamResponseChunks(prompts[0], parsedOptions, runManagers?.[0]);\n                let aggregated;\n                for await (const chunk of stream){\n                    if (aggregated === undefined) {\n                        aggregated = chunk;\n                    } else {\n                        aggregated = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.concat)(aggregated, chunk);\n                    }\n                }\n                if (aggregated === undefined) {\n                    throw new Error(\"Received empty response from chat model call.\");\n                }\n                output = {\n                    generations: [\n                        [\n                            aggregated\n                        ]\n                    ],\n                    llmOutput: {}\n                };\n                await runManagers?.[0].handleLLMEnd(output);\n            } catch (e) {\n                await runManagers?.[0].handleLLMError(e);\n                throw e;\n            }\n        } else {\n            try {\n                output = await this._generate(prompts, parsedOptions, runManagers?.[0]);\n            } catch (err) {\n                await Promise.all((runManagers ?? []).map((runManager)=>runManager?.handleLLMError(err)));\n                throw err;\n            }\n            const flattenedOutputs = this._flattenLLMResult(output);\n            await Promise.all((runManagers ?? []).map((runManager, i)=>runManager?.handleLLMEnd(flattenedOutputs[i])));\n        }\n        const runIds = runManagers?.map((manager)=>manager.runId) || undefined;\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runIds ? {\n                runIds\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    async _generateCached({ prompts, cache, llmStringKey, parsedOptions, handledOptions, runId }) {\n        const callbackManager_ = await _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager.configure(handledOptions.callbacks, this.callbacks, handledOptions.tags, this.tags, handledOptions.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const extra = {\n            options: parsedOptions,\n            invocation_params: this?.invocationParams(parsedOptions),\n            batch_size: prompts.length,\n            cached: true\n        };\n        const runManagers = await callbackManager_?.handleLLMStart(this.toJSON(), prompts, runId, undefined, extra, undefined, undefined, handledOptions?.runName);\n        // generate results\n        const missingPromptIndices = [];\n        const results = await Promise.allSettled(prompts.map(async (prompt, index)=>{\n            const result = await cache.lookup(prompt, llmStringKey);\n            if (result == null) {\n                missingPromptIndices.push(index);\n            }\n            return result;\n        }));\n        // Map run managers to the results before filtering out null results\n        // Null results are just absent from the cache.\n        const cachedResults = results.map((result, index)=>({\n                result,\n                runManager: runManagers?.[index]\n            })).filter(({ result })=>result.status === \"fulfilled\" && result.value != null || result.status === \"rejected\");\n        // Handle results and call run managers\n        const generations = [];\n        await Promise.all(cachedResults.map(async ({ result: promiseResult, runManager }, i)=>{\n            if (promiseResult.status === \"fulfilled\") {\n                const result = promiseResult.value;\n                generations[i] = result;\n                if (result.length) {\n                    await runManager?.handleLLMNewToken(result[0].text);\n                }\n                return runManager?.handleLLMEnd({\n                    generations: [\n                        result\n                    ]\n                });\n            } else {\n                // status === \"rejected\"\n                await runManager?.handleLLMError(promiseResult.reason);\n                return Promise.reject(promiseResult.reason);\n            }\n        }));\n        const output = {\n            generations,\n            missingPromptIndices\n        };\n        // This defines RUN_KEY as a non-enumerable property on the output object\n        // so that it is not serialized when the output is stringified, and so that\n        // it isnt included when listing the keys of the output object.\n        Object.defineProperty(output, _outputs_js__WEBPACK_IMPORTED_MODULE_1__.RUN_KEY, {\n            value: runManagers ? {\n                runIds: runManagers?.map((manager)=>manager.runId)\n            } : undefined,\n            configurable: true\n        });\n        return output;\n    }\n    /**\n     * Run the LLM on the given prompts and input, handling caching.\n     */ async generate(prompts, options, callbacks) {\n        if (!Array.isArray(prompts)) {\n            throw new Error(\"Argument 'prompts' is expected to be a string[]\");\n        }\n        let parsedOptions;\n        if (Array.isArray(options)) {\n            parsedOptions = {\n                stop: options\n            };\n        } else {\n            parsedOptions = options;\n        }\n        const [runnableConfig, callOptions] = this._separateRunnableConfigFromCallOptionsCompat(parsedOptions);\n        runnableConfig.callbacks = runnableConfig.callbacks ?? callbacks;\n        if (!this.cache) {\n            return this._generateUncached(prompts, callOptions, runnableConfig);\n        }\n        const { cache } = this;\n        const llmStringKey = this._getSerializedCacheKeyParametersForCall(callOptions);\n        const { generations, missingPromptIndices } = await this._generateCached({\n            prompts,\n            cache,\n            llmStringKey,\n            parsedOptions: callOptions,\n            handledOptions: runnableConfig,\n            runId: runnableConfig.runId\n        });\n        let llmOutput = {};\n        if (missingPromptIndices.length > 0) {\n            const results = await this._generateUncached(missingPromptIndices.map((i)=>prompts[i]), callOptions, runnableConfig);\n            await Promise.all(results.generations.map(async (generation, index)=>{\n                const promptIndex = missingPromptIndices[index];\n                generations[promptIndex] = generation;\n                return cache.update(prompts[promptIndex], llmStringKey, generation);\n            }));\n            llmOutput = results.llmOutput ?? {};\n        }\n        return {\n            generations,\n            llmOutput\n        };\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     * Convenience wrapper for {@link generate} that takes in a single string prompt and returns a single string output.\n     */ async call(prompt, options, callbacks) {\n        const { generations } = await this.generate([\n            prompt\n        ], options, callbacks);\n        return generations[0][0].text;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * This method is similar to `call`, but it's used for making predictions\n     * based on the input text.\n     * @param text Input text for the prediction.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns A prediction based on the input text.\n     */ async predict(text, options, callbacks) {\n        return this.call(text, options, callbacks);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.2.0.\n     *\n     * This method takes a list of messages, options, and callbacks, and\n     * returns a predicted message.\n     * @param messages A list of messages for the prediction.\n     * @param options Options for the LLM call.\n     * @param callbacks Callbacks for the LLM call.\n     * @returns A predicted message based on the list of messages.\n     */ async predictMessages(messages, options, callbacks) {\n        const text = (0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString)(messages);\n        const prediction = await this.call(text, options, callbacks);\n        return new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(prediction);\n    }\n    /**\n     * Get the identifying parameters of the LLM.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    _identifyingParams() {\n        return {};\n    }\n    /**\n     * @deprecated\n     * Return a json-like object representing this LLM.\n     */ serialize() {\n        return {\n            ...this._identifyingParams(),\n            _type: this._llmType(),\n            _model: this._modelType()\n        };\n    }\n    _modelType() {\n        return \"base_llm\";\n    }\n}\n/**\n * LLM class that provides a simpler interface to subclass than {@link BaseLLM}.\n *\n * Requires only implementing a simpler {@link _call} method instead of {@link _generate}.\n *\n * @augments BaseLLM\n */ class LLM extends BaseLLM {\n    async _generate(prompts, options, runManager) {\n        const generations = await Promise.all(prompts.map((prompt, promptIndex)=>this._call(prompt, {\n                ...options,\n                promptIndex\n            }, runManager).then((text)=>[\n                    {\n                        text\n                    }\n                ])));\n        return {\n            generations\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/language_models/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/map_keys.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keyFromJson: () => (/* binding */ keyFromJson),\n/* harmony export */   keyToJson: () => (/* binding */ keyToJson),\n/* harmony export */   mapKeys: () => (/* binding */ mapKeys)\n/* harmony export */ });\n/* harmony import */ var decamelize__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! decamelize */ \"(rsc)/./node_modules/decamelize/index.js\");\n/* harmony import */ var camelcase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\n\n\nfunction keyToJson(key, map) {\n    return map?.[key] || decamelize__WEBPACK_IMPORTED_MODULE_0__(key);\n}\nfunction keyFromJson(key, map) {\n    return map?.[key] || camelcase__WEBPACK_IMPORTED_MODULE_1__(key);\n}\nfunction mapKeys(fields, mapper, map) {\n    const mapped = {};\n    for(const key in fields){\n        if (Object.hasOwn(fields, key)) {\n            mapped[mapper(key, map)] = fields[key];\n        }\n    }\n    return mapped;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbG9hZC9tYXBfa2V5cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtQztBQUNEO0FBQzNCLFNBQVNFLFVBQVVDLEdBQUcsRUFBRUMsR0FBRztJQUM5QixPQUFPQSxLQUFLLENBQUNELElBQUksSUFBSUgsdUNBQVNBLENBQUNHO0FBQ25DO0FBQ08sU0FBU0UsWUFBWUYsR0FBRyxFQUFFQyxHQUFHO0lBQ2hDLE9BQU9BLEtBQUssQ0FBQ0QsSUFBSSxJQUFJRixzQ0FBU0EsQ0FBQ0U7QUFDbkM7QUFDTyxTQUFTRyxRQUFRQyxNQUFNLEVBQUVDLE1BQU0sRUFBRUosR0FBRztJQUN2QyxNQUFNSyxTQUFTLENBQUM7SUFDaEIsSUFBSyxNQUFNTixPQUFPSSxPQUFRO1FBQ3RCLElBQUlHLE9BQU9DLE1BQU0sQ0FBQ0osUUFBUUosTUFBTTtZQUM1Qk0sTUFBTSxDQUFDRCxPQUFPTCxLQUFLQyxLQUFLLEdBQUdHLE1BQU0sQ0FBQ0osSUFBSTtRQUMxQztJQUNKO0lBQ0EsT0FBT007QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L2xvYWQvbWFwX2tleXMuanM/MGY0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc25ha2VDYXNlIGZyb20gXCJkZWNhbWVsaXplXCI7XG5pbXBvcnQgY2FtZWxDYXNlIGZyb20gXCJjYW1lbGNhc2VcIjtcbmV4cG9ydCBmdW5jdGlvbiBrZXlUb0pzb24oa2V5LCBtYXApIHtcbiAgICByZXR1cm4gbWFwPy5ba2V5XSB8fCBzbmFrZUNhc2Uoa2V5KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBrZXlGcm9tSnNvbihrZXksIG1hcCkge1xuICAgIHJldHVybiBtYXA/LltrZXldIHx8IGNhbWVsQ2FzZShrZXkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcEtleXMoZmllbGRzLCBtYXBwZXIsIG1hcCkge1xuICAgIGNvbnN0IG1hcHBlZCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIGZpZWxkcykge1xuICAgICAgICBpZiAoT2JqZWN0Lmhhc093bihmaWVsZHMsIGtleSkpIHtcbiAgICAgICAgICAgIG1hcHBlZFttYXBwZXIoa2V5LCBtYXApXSA9IGZpZWxkc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXBwZWQ7XG59XG4iXSwibmFtZXMiOlsic25ha2VDYXNlIiwiY2FtZWxDYXNlIiwia2V5VG9Kc29uIiwia2V5IiwibWFwIiwia2V5RnJvbUpzb24iLCJtYXBLZXlzIiwiZmllbGRzIiwibWFwcGVyIiwibWFwcGVkIiwiT2JqZWN0IiwiaGFzT3duIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/load/serializable.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/load/serializable.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Serializable: () => (/* binding */ Serializable),\n/* harmony export */   get_lc_unique_name: () => (/* binding */ get_lc_unique_name)\n/* harmony export */ });\n/* harmony import */ var _map_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map_keys.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/map_keys.js\");\n\nfunction shallowCopy(obj) {\n    return Array.isArray(obj) ? [\n        ...obj\n    ] : {\n        ...obj\n    };\n}\nfunction replaceSecrets(root, secretsMap) {\n    const result = shallowCopy(root);\n    for (const [path, secretId] of Object.entries(secretsMap)){\n        const [last, ...partsReverse] = path.split(\".\").reverse();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let current = result;\n        for (const part of partsReverse.reverse()){\n            if (current[part] === undefined) {\n                break;\n            }\n            current[part] = shallowCopy(current[part]);\n            current = current[part];\n        }\n        if (current[last] !== undefined) {\n            current[last] = {\n                lc: 1,\n                type: \"secret\",\n                id: [\n                    secretId\n                ]\n            };\n        }\n    }\n    return result;\n}\n/**\n * Get a unique name for the module, rather than parent class implementations.\n * Should not be subclassed, subclass lc_name above instead.\n */ function get_lc_unique_name(// eslint-disable-next-line @typescript-eslint/no-use-before-define\nserializableClass) {\n    // \"super\" here would refer to the parent class of Serializable,\n    // when we want the parent class of the module actually calling this method.\n    const parentClass = Object.getPrototypeOf(serializableClass);\n    const lcNameIsSubclassed = typeof serializableClass.lc_name === \"function\" && (typeof parentClass.lc_name !== \"function\" || serializableClass.lc_name() !== parentClass.lc_name());\n    if (lcNameIsSubclassed) {\n        return serializableClass.lc_name();\n    } else {\n        return serializableClass.name;\n    }\n}\nclass Serializable {\n    /**\n     * The name of the serializable. Override to provide an alias or\n     * to preserve the serialized module name in minified environments.\n     *\n     * Implemented as a static method to support loading logic.\n     */ static lc_name() {\n        return this.name;\n    }\n    /**\n     * The final serialized identifier for the module.\n     */ get lc_id() {\n        return [\n            ...this.lc_namespace,\n            get_lc_unique_name(this.constructor)\n        ];\n    }\n    /**\n     * A map of secrets, which will be omitted from serialization.\n     * Keys are paths to the secret in constructor args, e.g. \"foo.bar.baz\".\n     * Values are the secret ids, which will be used when deserializing.\n     */ get lc_secrets() {\n        return undefined;\n    }\n    /**\n     * A map of additional attributes to merge with constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the attribute values, which will be serialized.\n     * These attributes need to be accepted by the constructor as arguments.\n     */ get lc_attributes() {\n        return undefined;\n    }\n    /**\n     * A map of aliases for constructor args.\n     * Keys are the attribute names, e.g. \"foo\".\n     * Values are the alias that will replace the key in serialization.\n     * This is used to eg. make argument names match Python.\n     */ get lc_aliases() {\n        return undefined;\n    }\n    constructor(kwargs, ..._args){\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.lc_kwargs = kwargs || {};\n    }\n    toJSON() {\n        if (!this.lc_serializable) {\n            return this.toJSONNotImplemented();\n        }\n        if (// eslint-disable-next-line no-instanceof/no-instanceof\n        this.lc_kwargs instanceof Serializable || typeof this.lc_kwargs !== \"object\" || Array.isArray(this.lc_kwargs)) {\n            // We do not support serialization of classes with arg not a POJO\n            // I'm aware the check above isn't as strict as it could be\n            return this.toJSONNotImplemented();\n        }\n        const aliases = {};\n        const secrets = {};\n        const kwargs = Object.keys(this.lc_kwargs).reduce((acc, key)=>{\n            acc[key] = key in this ? this[key] : this.lc_kwargs[key];\n            return acc;\n        }, {});\n        // get secrets, attributes and aliases from all superclasses\n        for(// eslint-disable-next-line @typescript-eslint/no-this-alias\n        let current = Object.getPrototypeOf(this); current; current = Object.getPrototypeOf(current)){\n            Object.assign(aliases, Reflect.get(current, \"lc_aliases\", this));\n            Object.assign(secrets, Reflect.get(current, \"lc_secrets\", this));\n            Object.assign(kwargs, Reflect.get(current, \"lc_attributes\", this));\n        }\n        // include all secrets used, even if not in kwargs,\n        // will be replaced with sentinel value in replaceSecrets\n        Object.keys(secrets).forEach((keyPath)=>{\n            // eslint-disable-next-line @typescript-eslint/no-this-alias, @typescript-eslint/no-explicit-any\n            let read = this;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let write = kwargs;\n            const [last, ...partsReverse] = keyPath.split(\".\").reverse();\n            for (const key of partsReverse.reverse()){\n                if (!(key in read) || read[key] === undefined) return;\n                if (!(key in write) || write[key] === undefined) {\n                    if (typeof read[key] === \"object\" && read[key] != null) {\n                        write[key] = {};\n                    } else if (Array.isArray(read[key])) {\n                        write[key] = [];\n                    }\n                }\n                read = read[key];\n                write = write[key];\n            }\n            if (last in read && read[last] !== undefined) {\n                write[last] = write[last] || read[last];\n            }\n        });\n        return {\n            lc: 1,\n            type: \"constructor\",\n            id: this.lc_id,\n            kwargs: (0,_map_keys_js__WEBPACK_IMPORTED_MODULE_0__.mapKeys)(Object.keys(secrets).length ? replaceSecrets(kwargs, secrets) : kwargs, _map_keys_js__WEBPACK_IMPORTED_MODULE_0__.keyToJson, aliases)\n        };\n    }\n    toJSONNotImplemented() {\n        return {\n            lc: 1,\n            type: \"not_implemented\",\n            id: this.lc_id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/ai.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/ai.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* binding */ AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* binding */ AIMessageChunk),\n/* harmony export */   isAIMessage: () => (/* binding */ isAIMessage),\n/* harmony export */   isAIMessageChunk: () => (/* binding */ isAIMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/json.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n/**\n * Represents an AI message in a conversation.\n */ class AIMessage extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\"\n        };\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                additional_kwargs: kwargs ?? {}\n            };\n        } else {\n            initParams = fields;\n            const rawToolCalls = initParams.additional_kwargs?.tool_calls;\n            const toolCalls = initParams.tool_calls;\n            if (!(rawToolCalls == null) && rawToolCalls.length > 0 && (toolCalls === undefined || toolCalls.length === 0)) {\n                console.warn([\n                    \"New LangChain packages are available that more efficiently handle\",\n                    \"tool calling.\\n\\nPlease upgrade your packages to versions that set\",\n                    \"message tool calls. e.g., `yarn add @langchain/anthropic`,\",\n                    \"yarn add @langchain/openai`, etc.\"\n                ].join(\" \"));\n            }\n            try {\n                if (!(rawToolCalls == null) && toolCalls === undefined) {\n                    const [toolCalls, invalidToolCalls] = (0,_tool_js__WEBPACK_IMPORTED_MODULE_2__.defaultToolCallParser)(rawToolCalls);\n                    initParams.tool_calls = toolCalls ?? [];\n                    initParams.invalid_tool_calls = invalidToolCalls ?? [];\n                } else {\n                    initParams.tool_calls = initParams.tool_calls ?? [];\n                    initParams.invalid_tool_calls = initParams.invalid_tool_calls ?? [];\n                }\n            } catch (e) {\n                // Do nothing if parsing fails\n                initParams.tool_calls = [];\n                initParams.invalid_tool_calls = [];\n            }\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */ Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (typeof initParams !== \"string\") {\n            this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n            this.invalid_tool_calls = initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        }\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    static lc_name() {\n        return \"AIMessage\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_calls: this.tool_calls,\n            invalid_tool_calls: this.invalid_tool_calls,\n            usage_metadata: this.usage_metadata\n        };\n    }\n}\nfunction isAIMessage(x) {\n    return x._getType() === \"ai\";\n}\nfunction isAIMessageChunk(x) {\n    return x._getType() === \"ai\";\n}\n/**\n * Represents a chunk of an AI message, which can be concatenated with\n * other AI message chunks.\n */ class AIMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk {\n    constructor(fields){\n        let initParams;\n        if (typeof fields === \"string\") {\n            initParams = {\n                content: fields,\n                tool_calls: [],\n                invalid_tool_calls: [],\n                tool_call_chunks: []\n            };\n        } else if (fields.tool_call_chunks === undefined) {\n            initParams = {\n                ...fields,\n                tool_calls: fields.tool_calls ?? [],\n                invalid_tool_calls: [],\n                tool_call_chunks: [],\n                usage_metadata: fields.usage_metadata !== undefined ? fields.usage_metadata : undefined\n            };\n        } else {\n            const toolCalls = [];\n            const invalidToolCalls = [];\n            for (const toolCallChunk of fields.tool_call_chunks){\n                let parsedArgs = {};\n                try {\n                    parsedArgs = (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson)(toolCallChunk.args || \"{}\");\n                    if (parsedArgs === null || typeof parsedArgs !== \"object\" || Array.isArray(parsedArgs)) {\n                        throw new Error(\"Malformed tool call chunk args.\");\n                    }\n                    toolCalls.push({\n                        name: toolCallChunk.name ?? \"\",\n                        args: parsedArgs,\n                        id: toolCallChunk.id,\n                        type: \"tool_call\"\n                    });\n                } catch (e) {\n                    invalidToolCalls.push({\n                        name: toolCallChunk.name,\n                        args: toolCallChunk.args,\n                        id: toolCallChunk.id,\n                        error: \"Malformed args.\",\n                        type: \"invalid_tool_call\"\n                    });\n                }\n            }\n            initParams = {\n                ...fields,\n                tool_calls: toolCalls,\n                invalid_tool_calls: invalidToolCalls,\n                usage_metadata: fields.usage_metadata !== undefined ? fields.usage_metadata : undefined\n            };\n        }\n        // Sadly, TypeScript only allows super() calls at root if the class has\n        // properties with initializers, so we have to check types twice.\n        super(initParams);\n        // Must redeclare tool call fields since there is no multiple inheritance in JS.\n        // These are typed as optional to avoid breaking changes and allow for casting\n        // from BaseMessage.\n        Object.defineProperty(this, \"tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"invalid_tool_calls\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"tool_call_chunks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        /**\n         * If provided, token usage information associated with the message.\n         */ Object.defineProperty(this, \"usage_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_chunks = initParams.tool_call_chunks ?? this.tool_call_chunks;\n        this.tool_calls = initParams.tool_calls ?? this.tool_calls;\n        this.invalid_tool_calls = initParams.invalid_tool_calls ?? this.invalid_tool_calls;\n        this.usage_metadata = initParams.usage_metadata;\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            ...super.lc_aliases,\n            tool_calls: \"tool_calls\",\n            invalid_tool_calls: \"invalid_tool_calls\",\n            tool_call_chunks: \"tool_call_chunks\"\n        };\n    }\n    static lc_name() {\n        return \"AIMessageChunk\";\n    }\n    _getType() {\n        return \"ai\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_calls: this.tool_calls,\n            tool_call_chunks: this.tool_call_chunks,\n            invalid_tool_calls: this.invalid_tool_calls,\n            usage_metadata: this.usage_metadata\n        };\n    }\n    concat(chunk) {\n        const combinedFields = {\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            tool_call_chunks: [],\n            id: this.id ?? chunk.id\n        };\n        if (this.tool_call_chunks !== undefined || chunk.tool_call_chunks !== undefined) {\n            const rawToolCalls = (0,_base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists)(this.tool_call_chunks, chunk.tool_call_chunks);\n            if (rawToolCalls !== undefined && rawToolCalls.length > 0) {\n                combinedFields.tool_call_chunks = rawToolCalls;\n            }\n        }\n        if (this.usage_metadata !== undefined || chunk.usage_metadata !== undefined) {\n            const inputTokenDetails = {\n                ...(this.usage_metadata?.input_token_details?.audio !== undefined || chunk.usage_metadata?.input_token_details?.audio !== undefined) && {\n                    audio: (this.usage_metadata?.input_token_details?.audio ?? 0) + (chunk.usage_metadata?.input_token_details?.audio ?? 0)\n                },\n                ...(this.usage_metadata?.input_token_details?.cache_read !== undefined || chunk.usage_metadata?.input_token_details?.cache_read !== undefined) && {\n                    cache_read: (this.usage_metadata?.input_token_details?.cache_read ?? 0) + (chunk.usage_metadata?.input_token_details?.cache_read ?? 0)\n                },\n                ...(this.usage_metadata?.input_token_details?.cache_creation !== undefined || chunk.usage_metadata?.input_token_details?.cache_creation !== undefined) && {\n                    cache_creation: (this.usage_metadata?.input_token_details?.cache_creation ?? 0) + (chunk.usage_metadata?.input_token_details?.cache_creation ?? 0)\n                }\n            };\n            const outputTokenDetails = {\n                ...(this.usage_metadata?.output_token_details?.audio !== undefined || chunk.usage_metadata?.output_token_details?.audio !== undefined) && {\n                    audio: (this.usage_metadata?.output_token_details?.audio ?? 0) + (chunk.usage_metadata?.output_token_details?.audio ?? 0)\n                },\n                ...(this.usage_metadata?.output_token_details?.reasoning !== undefined || chunk.usage_metadata?.output_token_details?.reasoning !== undefined) && {\n                    reasoning: (this.usage_metadata?.output_token_details?.reasoning ?? 0) + (chunk.usage_metadata?.output_token_details?.reasoning ?? 0)\n                }\n            };\n            const left = this.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0\n            };\n            const right = chunk.usage_metadata ?? {\n                input_tokens: 0,\n                output_tokens: 0,\n                total_tokens: 0\n            };\n            const usage_metadata = {\n                input_tokens: left.input_tokens + right.input_tokens,\n                output_tokens: left.output_tokens + right.output_tokens,\n                total_tokens: left.total_tokens + right.total_tokens,\n                // Do not include `input_token_details` / `output_token_details` keys in combined fields\n                // unless their values are defined.\n                ...Object.keys(inputTokenDetails).length > 0 && {\n                    input_token_details: inputTokenDetails\n                },\n                ...Object.keys(outputTokenDetails).length > 0 && {\n                    output_token_details: outputTokenDetails\n                }\n            };\n            combinedFields.usage_metadata = usage_metadata;\n        }\n        return new AIMessageChunk(combinedFields);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/base.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/base.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseMessage: () => (/* binding */ BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* binding */ BaseMessageChunk),\n/* harmony export */   _isMessageFieldWithRole: () => (/* binding */ _isMessageFieldWithRole),\n/* harmony export */   _mergeDicts: () => (/* binding */ _mergeDicts),\n/* harmony export */   _mergeLists: () => (/* binding */ _mergeLists),\n/* harmony export */   _mergeObj: () => (/* binding */ _mergeObj),\n/* harmony export */   _mergeStatus: () => (/* binding */ _mergeStatus),\n/* harmony export */   isBaseMessage: () => (/* binding */ isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* binding */ isBaseMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* binding */ isOpenAIToolCallArray),\n/* harmony export */   mergeContent: () => (/* binding */ mergeContent)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n\nfunction mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        } else {\n            return [\n                {\n                    type: \"text\",\n                    text: firstContent\n                },\n                ...secondContent\n            ];\n        }\n    // If both are arrays\n    } else if (Array.isArray(secondContent)) {\n        return _mergeLists(firstContent, secondContent) ?? [\n            ...firstContent,\n            ...secondContent\n        ];\n    } else {\n        // Otherwise, add the second content as a new element of the list\n        return [\n            ...firstContent,\n            {\n                type: \"text\",\n                text: secondContent\n            }\n        ];\n    }\n}\n/**\n * 'Merge' two statuses. If either value passed is 'error', it will return 'error'. Else\n * it will return 'success'.\n *\n * @param {\"success\" | \"error\" | undefined} left The existing value to 'merge' with the new value.\n * @param {\"success\" | \"error\" | undefined} right The new value to 'merge' with the existing value\n * @returns {\"success\" | \"error\"} The 'merged' value.\n */ function _mergeStatus(left, right) {\n    if (left === \"error\" || right === \"error\") {\n        return \"error\";\n    }\n    return \"success\";\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stringifyWithDepthLimit(obj, depthLimit) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function helper(obj, currentDepth) {\n        if (typeof obj !== \"object\" || obj === null || obj === undefined) {\n            return obj;\n        }\n        if (currentDepth >= depthLimit) {\n            if (Array.isArray(obj)) {\n                return \"[Array]\";\n            }\n            return \"[Object]\";\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((item)=>helper(item, currentDepth + 1));\n        }\n        const result = {};\n        for (const key of Object.keys(obj)){\n            result[key] = helper(obj[key], currentDepth + 1);\n        }\n        return result;\n    }\n    return JSON.stringify(helper(obj, 0), null, 2);\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */ class BaseMessage extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\"\n        };\n    }\n    /**\n     * @deprecated\n     * Use {@link BaseMessage.content} instead.\n     */ get text() {\n        return typeof this.content === \"string\" ? this.content : \"\";\n    }\n    /** The type of the message. */ getType() {\n        return this._getType();\n    }\n    constructor(fields, /** @deprecated */ kwargs){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {}\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"messages\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */ Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */ Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */ Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts. */ Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * An optional unique identifier for the message. This should ideally be\n         * provided by the provider/model which created the message.\n         */ Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n        this.id = fields.id;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON().kwargs\n        };\n    }\n    static lc_name() {\n        return \"BaseMessage\";\n    }\n    // Can't be protected for silly reasons\n    get _printableFields() {\n        return {\n            id: this.id,\n            content: this.content,\n            name: this.name,\n            additional_kwargs: this.additional_kwargs,\n            response_metadata: this.response_metadata\n        };\n    }\n    // this private method is used to update the ID for the runtime\n    // value as well as in lc_kwargs for serialisation\n    _updateId(value) {\n        this.id = value;\n        // lc_attributes wouldn't work here, because jest compares the\n        // whole object\n        this.lc_kwargs.id = value;\n    }\n    get [Symbol.toStringTag]() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.constructor.lc_name();\n    }\n    // Override the default behavior of console.log\n    [Symbol.for(\"nodejs.util.inspect.custom\")](depth) {\n        if (depth === null) {\n            return this;\n        }\n        const printable = stringifyWithDepthLimit(this._printableFields, Math.max(4, depth));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return `${this.constructor.lc_name()} ${printable}`;\n    }\n}\nfunction isOpenAIToolCallArray(value) {\n    return Array.isArray(value) && value.every((v)=>typeof v.index === \"number\");\n}\nfunction _mergeDicts(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, // eslint-disable-next-line @typescript-eslint/no-explicit-any\nright) {\n    const merged = {\n        ...left\n    };\n    for (const [key, value] of Object.entries(right)){\n        if (merged[key] == null) {\n            merged[key] = value;\n        } else if (value == null) {\n            continue;\n        } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        } else if (typeof merged[key] === \"string\") {\n            if (key === \"type\") {\n                continue;\n            }\n            merged[key] += value;\n        } else if (typeof merged[key] === \"object\" && !Array.isArray(merged[key])) {\n            merged[key] = _mergeDicts(merged[key], value);\n        } else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        } else if (merged[key] === value) {\n            continue;\n        } else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    } else if (left === undefined || right === undefined) {\n        return left || right;\n    } else {\n        const merged = [\n            ...left\n        ];\n        for (const item of right){\n            if (typeof item === \"object\" && \"index\" in item && typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem)=>leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                } else {\n                    merged.push(item);\n                }\n            } else if (typeof item === \"object\" && \"text\" in item && item.text === \"\") {\n                continue;\n            } else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _mergeObj(left, right) {\n    if (!left && !right) {\n        throw new Error(\"Cannot merge two undefined objects.\");\n    }\n    if (!left || !right) {\n        return left || right;\n    } else if (typeof left !== typeof right) {\n        throw new Error(`Cannot merge objects of different types.\\nLeft ${typeof left}\\nRight ${typeof right}`);\n    } else if (typeof left === \"string\" && typeof right === \"string\") {\n        return left + right;\n    } else if (Array.isArray(left) && Array.isArray(right)) {\n        return _mergeLists(left, right);\n    } else if (typeof left === \"object\" && typeof right === \"object\") {\n        return _mergeDicts(left, right);\n    } else if (left === right) {\n        return left;\n    } else {\n        throw new Error(`Can not merge objects of different types.\\nLeft ${left}\\nRight ${right}`);\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */ class BaseMessageChunk extends BaseMessage {\n}\nfunction _isMessageFieldWithRole(x) {\n    return typeof x.role === \"string\";\n}\nfunction isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nfunction isBaseMessageChunk(messageLike) {\n    return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/chat.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/chat.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatMessage: () => (/* binding */ ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* binding */ ChatMessageChunk),\n/* harmony export */   isChatMessage: () => (/* binding */ isChatMessage),\n/* harmony export */   isChatMessageChunk: () => (/* binding */ isChatMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a chat message in a conversation.\n */ class ChatMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ChatMessage\";\n    }\n    static _chatMessageClass() {\n        return ChatMessage;\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"generic\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            role: this.role\n        };\n    }\n}\n/**\n * Represents a chunk of a chat message, which can be concatenated with\n * other chat message chunks.\n */ class ChatMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"ChatMessageChunk\";\n    }\n    constructor(fields, role){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                role: role\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    _getType() {\n        return \"generic\";\n    }\n    concat(chunk) {\n        return new ChatMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            role: this.role,\n            id: this.id ?? chunk.id\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            role: this.role\n        };\n    }\n}\nfunction isChatMessage(x) {\n    return x._getType() === \"generic\";\n}\nfunction isChatMessageChunk(x) {\n    return x._getType() === \"generic\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvY2hhdC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFzRjtBQUN0Rjs7Q0FFQyxHQUNNLE1BQU1JLG9CQUFvQkosaURBQVdBO0lBQ3hDLE9BQU9LLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQSxPQUFPQyxvQkFBb0I7UUFDdkIsT0FBT0Y7SUFDWDtJQUNBRyxZQUFZQyxNQUFNLEVBQUVDLElBQUksQ0FBRTtRQUN0QixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtRQUNORyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1AsSUFBSSxHQUFHRCxPQUFPQyxJQUFJO0lBQzNCO0lBQ0FRLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQSxPQUFPQyxXQUFXQyxPQUFPLEVBQUU7UUFDdkIsT0FBT0EsUUFBUUYsUUFBUSxPQUFPO0lBQ2xDO0lBQ0EsSUFBSUcsbUJBQW1CO1FBQ25CLE9BQU87WUFDSCxHQUFHLEtBQUssQ0FBQ0EsZ0JBQWdCO1lBQ3pCWCxNQUFNLElBQUksQ0FBQ0EsSUFBSTtRQUNuQjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNWSx5QkFBeUJwQixzREFBZ0JBO0lBQ2xELE9BQU9JLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQUUsWUFBWUMsTUFBTSxFQUFFQyxJQUFJLENBQUU7UUFDdEIsSUFBSSxPQUFPRCxXQUFXLFVBQVU7WUFDNUIsdUZBQXVGO1lBQ3ZGQSxTQUFTO2dCQUFFRSxTQUFTRjtnQkFBUUMsTUFBTUE7WUFBSztRQUMzQztRQUNBLEtBQUssQ0FBQ0Q7UUFDTkcsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxRQUFRO1lBQ2hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNQLElBQUksR0FBR0QsT0FBT0MsSUFBSTtJQUMzQjtJQUNBUSxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FLLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsaUJBQWlCO1lBQ3hCWCxTQUFTUixzREFBWUEsQ0FBQyxJQUFJLENBQUNRLE9BQU8sRUFBRWEsTUFBTWIsT0FBTztZQUNqRGMsbUJBQW1CckIscURBQVdBLENBQUMsSUFBSSxDQUFDcUIsaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CdEIscURBQVdBLENBQUMsSUFBSSxDQUFDc0IsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RWhCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ2ZpQixJQUFJLElBQUksQ0FBQ0EsRUFBRSxJQUFJSCxNQUFNRyxFQUFFO1FBQzNCO0lBQ0o7SUFDQSxJQUFJTixtQkFBbUI7UUFDbkIsT0FBTztZQUNILEdBQUcsS0FBSyxDQUFDQSxnQkFBZ0I7WUFDekJYLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1FBQ25CO0lBQ0o7QUFDSjtBQUNPLFNBQVNrQixjQUFjQyxDQUFDO0lBQzNCLE9BQU9BLEVBQUVYLFFBQVEsT0FBTztBQUM1QjtBQUNPLFNBQVNZLG1CQUFtQkQsQ0FBQztJQUNoQyxPQUFPQSxFQUFFWCxRQUFRLE9BQU87QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9jaGF0LmpzP2MxNzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlQ2h1bmssIG1lcmdlQ29udGVudCwgX21lcmdlRGljdHMsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2hhdCBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgQ2hhdE1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkNoYXRNZXNzYWdlXCI7XG4gICAgfVxuICAgIHN0YXRpYyBfY2hhdE1lc3NhZ2VDbGFzcygpIHtcbiAgICAgICAgcmV0dXJuIENoYXRNZXNzYWdlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIHJvbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZmllbGRzID0geyBjb250ZW50OiBmaWVsZHMsIHJvbGU6IHJvbGUgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb2xlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucm9sZSA9IGZpZWxkcy5yb2xlO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZ2VuZXJpY1wiO1xuICAgIH1cbiAgICBzdGF0aWMgaXNJbnN0YW5jZShtZXNzYWdlKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlLl9nZXRUeXBlKCkgPT09IFwiZ2VuZXJpY1wiO1xuICAgIH1cbiAgICBnZXQgX3ByaW50YWJsZUZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLl9wcmludGFibGVGaWVsZHMsXG4gICAgICAgICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICAgIH07XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBjaGF0IG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aFxuICogb3RoZXIgY2hhdCBtZXNzYWdlIGNodW5rcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENoYXRNZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2hhdE1lc3NhZ2VDaHVua1wiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIHJvbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZmllbGRzID0geyBjb250ZW50OiBmaWVsZHMsIHJvbGU6IHJvbGUgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyb2xlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucm9sZSA9IGZpZWxkcy5yb2xlO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZ2VuZXJpY1wiO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGF0TWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgICAgICByb2xlOiB0aGlzLnJvbGUsXG4gICAgICAgICAgICBpZDogdGhpcy5pZCA/PyBjaHVuay5pZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBfcHJpbnRhYmxlRmllbGRzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3VwZXIuX3ByaW50YWJsZUZpZWxkcyxcbiAgICAgICAgICAgIHJvbGU6IHRoaXMucm9sZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDaGF0TWVzc2FnZSh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJnZW5lcmljXCI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDaGF0TWVzc2FnZUNodW5rKHgpIHtcbiAgICByZXR1cm4geC5fZ2V0VHlwZSgpID09PSBcImdlbmVyaWNcIjtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIkNoYXRNZXNzYWdlIiwibGNfbmFtZSIsIl9jaGF0TWVzc2FnZUNsYXNzIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJyb2xlIiwiY29udGVudCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJfZ2V0VHlwZSIsImlzSW5zdGFuY2UiLCJtZXNzYWdlIiwiX3ByaW50YWJsZUZpZWxkcyIsIkNoYXRNZXNzYWdlQ2h1bmsiLCJjb25jYXQiLCJjaHVuayIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiLCJpZCIsImlzQ2hhdE1lc3NhZ2UiLCJ4IiwiaXNDaGF0TWVzc2FnZUNodW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/function.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/function.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionMessage: () => (/* binding */ FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* binding */ FunctionMessageChunk),\n/* harmony export */   isFunctionMessage: () => (/* binding */ isFunctionMessage),\n/* harmony export */   isFunctionMessageChunk: () => (/* binding */ isFunctionMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a function message in a conversation.\n */ class FunctionMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"FunctionMessage\";\n    }\n    constructor(fields, /** @deprecated */ name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name: name\n            };\n        }\n        super(fields);\n    }\n    _getType() {\n        return \"function\";\n    }\n}\n/**\n * Represents a chunk of a function message, which can be concatenated\n * with other function message chunks.\n */ class FunctionMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"FunctionMessageChunk\";\n    }\n    _getType() {\n        return \"function\";\n    }\n    concat(chunk) {\n        return new FunctionMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            name: this.name ?? \"\",\n            id: this.id ?? chunk.id\n        });\n    }\n}\nfunction isFunctionMessage(x) {\n    return x._getType() === \"function\";\n}\nfunction isFunctionMessageChunk(x) {\n    return x._getType() === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSx3QkFBd0JKLGlEQUFXQTtJQUM1QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFlBQVlDLE1BQU0sRUFDbEIsZ0JBQWdCLEdBQ2hCQyxJQUFJLENBQUU7UUFDRixJQUFJLE9BQU9ELFdBQVcsVUFBVTtZQUM1Qix1RkFBdUY7WUFDdkZBLFNBQVM7Z0JBQUVFLFNBQVNGO2dCQUFRQyxNQUFNQTtZQUFLO1FBQzNDO1FBQ0EsS0FBSyxDQUFDRDtJQUNWO0lBQ0FHLFdBQVc7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDZCQUE2QlYsc0RBQWdCQTtJQUN0RCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FLLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixxQkFBcUI7WUFDNUJGLFNBQVNQLHNEQUFZQSxDQUFDLElBQUksQ0FBQ08sT0FBTyxFQUFFSSxNQUFNSixPQUFPO1lBQ2pESyxtQkFBbUJYLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1csaUJBQWlCLEVBQUVELE1BQU1DLGlCQUFpQjtZQUM5RUMsbUJBQW1CWixxREFBV0EsQ0FBQyxJQUFJLENBQUNZLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVQLE1BQU0sSUFBSSxDQUFDQSxJQUFJLElBQUk7WUFDbkJRLElBQUksSUFBSSxDQUFDQSxFQUFFLElBQUlILE1BQU1HLEVBQUU7UUFDM0I7SUFDSjtBQUNKO0FBQ08sU0FBU0Msa0JBQWtCQyxDQUFDO0lBQy9CLE9BQU9BLEVBQUVSLFFBQVEsT0FBTztBQUM1QjtBQUNPLFNBQVNTLHVCQUF1QkQsQ0FBQztJQUNwQyxPQUFPQSxFQUFFUixRQUFRLE9BQU87QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9mdW5jdGlvbi5qcz84OWE4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNZXNzYWdlLCBCYXNlTWVzc2FnZUNodW5rLCBtZXJnZUNvbnRlbnQsIF9tZXJnZURpY3RzLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogUmVwcmVzZW50cyBhIGZ1bmN0aW9uIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbk1lc3NhZ2UgZXh0ZW5kcyBCYXNlTWVzc2FnZSB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkZ1bmN0aW9uTWVzc2FnZVwiO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIFxuICAgIC8qKiBAZGVwcmVjYXRlZCAqL1xuICAgIG5hbWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmaWVsZHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbiwgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgZmllbGRzID0geyBjb250ZW50OiBmaWVsZHMsIG5hbWU6IG5hbWUgfTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihmaWVsZHMpO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIGZ1bmN0aW9uIG1lc3NhZ2UsIHdoaWNoIGNhbiBiZSBjb25jYXRlbmF0ZWRcbiAqIHdpdGggb3RoZXIgZnVuY3Rpb24gbWVzc2FnZSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBGdW5jdGlvbk1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJGdW5jdGlvbk1lc3NhZ2VDaHVua1wiO1xuICAgIH1cbiAgICBfZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIjtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSA/PyBcIlwiLFxuICAgICAgICAgICAgaWQ6IHRoaXMuaWQgPz8gY2h1bmsuaWQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uTWVzc2FnZSh4KSB7XG4gICAgcmV0dXJuIHguX2dldFR5cGUoKSA9PT0gXCJmdW5jdGlvblwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb25NZXNzYWdlQ2h1bmsoeCkge1xuICAgIHJldHVybiB4Ll9nZXRUeXBlKCkgPT09IFwiZnVuY3Rpb25cIjtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIkZ1bmN0aW9uTWVzc2FnZSIsImxjX25hbWUiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIm5hbWUiLCJjb250ZW50IiwiX2dldFR5cGUiLCJGdW5jdGlvbk1lc3NhZ2VDaHVuayIsImNvbmNhdCIsImNodW5rIiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJyZXNwb25zZV9tZXRhZGF0YSIsImlkIiwiaXNGdW5jdGlvbk1lc3NhZ2UiLCJ4IiwiaXNGdW5jdGlvbk1lc3NhZ2VDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/function.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/human.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/human.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HumanMessage: () => (/* binding */ HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* binding */ HumanMessageChunk),\n/* harmony export */   isHumanMessage: () => (/* binding */ isHumanMessage),\n/* harmony export */   isHumanMessageChunk: () => (/* binding */ isHumanMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a human message in a conversation.\n */ class HumanMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"HumanMessage\";\n    }\n    _getType() {\n        return \"human\";\n    }\n}\n/**\n * Represents a chunk of a human message, which can be concatenated with\n * other human message chunks.\n */ class HumanMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"HumanMessageChunk\";\n    }\n    _getType() {\n        return \"human\";\n    }\n    concat(chunk) {\n        return new HumanMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            id: this.id ?? chunk.id\n        });\n    }\n}\nfunction isHumanMessage(x) {\n    return x.getType() === \"human\";\n}\nfunction isHumanMessageChunk(x) {\n    return x.getType() === \"human\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaHVtYW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0Y7QUFDdEY7O0NBRUMsR0FDTSxNQUFNSSxxQkFBcUJKLGlEQUFXQTtJQUN6QyxPQUFPSyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLE1BQU1DLDBCQUEwQk4sc0RBQWdCQTtJQUNuRCxPQUFPSSxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLFdBQVc7UUFDUCxPQUFPO0lBQ1g7SUFDQUUsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJRixrQkFBa0I7WUFDekJHLFNBQVNSLHNEQUFZQSxDQUFDLElBQUksQ0FBQ1EsT0FBTyxFQUFFRCxNQUFNQyxPQUFPO1lBQ2pEQyxtQkFBbUJSLHFEQUFXQSxDQUFDLElBQUksQ0FBQ1EsaUJBQWlCLEVBQUVGLE1BQU1FLGlCQUFpQjtZQUM5RUMsbUJBQW1CVCxxREFBV0EsQ0FBQyxJQUFJLENBQUNTLGlCQUFpQixFQUFFSCxNQUFNRyxpQkFBaUI7WUFDOUVDLElBQUksSUFBSSxDQUFDQSxFQUFFLElBQUlKLE1BQU1JLEVBQUU7UUFDM0I7SUFDSjtBQUNKO0FBQ08sU0FBU0MsZUFBZUMsQ0FBQztJQUM1QixPQUFPQSxFQUFFQyxPQUFPLE9BQU87QUFDM0I7QUFDTyxTQUFTQyxvQkFBb0JGLENBQUM7SUFDakMsT0FBT0EsRUFBRUMsT0FBTyxPQUFPO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaHVtYW4uanM/NzIxNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTWVzc2FnZSwgQmFzZU1lc3NhZ2VDaHVuaywgbWVyZ2VDb250ZW50LCBfbWVyZ2VEaWN0cywgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBodW1hbiBtZXNzYWdlIGluIGEgY29udmVyc2F0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgSHVtYW5NZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJIdW1hbk1lc3NhZ2VcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImh1bWFuXCI7XG4gICAgfVxufVxuLyoqXG4gKiBSZXByZXNlbnRzIGEgY2h1bmsgb2YgYSBodW1hbiBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIGh1bWFuIG1lc3NhZ2UgY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgSHVtYW5NZXNzYWdlQ2h1bmsgZXh0ZW5kcyBCYXNlTWVzc2FnZUNodW5rIHtcbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiSHVtYW5NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcImh1bWFuXCI7XG4gICAgfVxuICAgIGNvbmNhdChjaHVuaykge1xuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZUNodW5rKHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG1lcmdlQ29udGVudCh0aGlzLmNvbnRlbnQsIGNodW5rLmNvbnRlbnQpLFxuICAgICAgICAgICAgYWRkaXRpb25hbF9rd2FyZ3M6IF9tZXJnZURpY3RzKHRoaXMuYWRkaXRpb25hbF9rd2FyZ3MsIGNodW5rLmFkZGl0aW9uYWxfa3dhcmdzKSxcbiAgICAgICAgICAgIHJlc3BvbnNlX21ldGFkYXRhOiBfbWVyZ2VEaWN0cyh0aGlzLnJlc3BvbnNlX21ldGFkYXRhLCBjaHVuay5yZXNwb25zZV9tZXRhZGF0YSksXG4gICAgICAgICAgICBpZDogdGhpcy5pZCA/PyBjaHVuay5pZCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGlzSHVtYW5NZXNzYWdlKHgpIHtcbiAgICByZXR1cm4geC5nZXRUeXBlKCkgPT09IFwiaHVtYW5cIjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0h1bWFuTWVzc2FnZUNodW5rKHgpIHtcbiAgICByZXR1cm4geC5nZXRUeXBlKCkgPT09IFwiaHVtYW5cIjtcbn1cbiJdLCJuYW1lcyI6WyJCYXNlTWVzc2FnZSIsIkJhc2VNZXNzYWdlQ2h1bmsiLCJtZXJnZUNvbnRlbnQiLCJfbWVyZ2VEaWN0cyIsIkh1bWFuTWVzc2FnZSIsImxjX25hbWUiLCJfZ2V0VHlwZSIsIkh1bWFuTWVzc2FnZUNodW5rIiwiY29uY2F0IiwiY2h1bmsiLCJjb250ZW50IiwiYWRkaXRpb25hbF9rd2FyZ3MiLCJyZXNwb25zZV9tZXRhZGF0YSIsImlkIiwiaXNIdW1hbk1lc3NhZ2UiLCJ4IiwiZ2V0VHlwZSIsImlzSHVtYW5NZXNzYWdlQ2h1bmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/human.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessageChunk),\n/* harmony export */   RemoveMessage: () => (/* reexport safe */ _modifier_js__WEBPACK_IMPORTED_MODULE_8__.RemoveMessage),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_9__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_9__.ToolMessageChunk),\n/* harmony export */   _isMessageFieldWithRole: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._isMessageFieldWithRole),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeLists),\n/* harmony export */   _mergeObj: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeObj),\n/* harmony export */   _mergeStatus: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__._mergeStatus),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.convertToChunk),\n/* harmony export */   defaultTextSplitter: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.defaultTextSplitter),\n/* harmony export */   filterMessages: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.filterMessages),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isAIMessageChunk: () => (/* reexport safe */ _ai_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessageChunk),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isBaseMessageChunk),\n/* harmony export */   isChatMessage: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.isChatMessage),\n/* harmony export */   isChatMessageChunk: () => (/* reexport safe */ _chat_js__WEBPACK_IMPORTED_MODULE_2__.isChatMessageChunk),\n/* harmony export */   isFunctionMessage: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.isFunctionMessage),\n/* harmony export */   isFunctionMessageChunk: () => (/* reexport safe */ _function_js__WEBPACK_IMPORTED_MODULE_3__.isFunctionMessageChunk),\n/* harmony export */   isHumanMessage: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.isHumanMessage),\n/* harmony export */   isHumanMessageChunk: () => (/* reexport safe */ _human_js__WEBPACK_IMPORTED_MODULE_4__.isHumanMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.isOpenAIToolCallArray),\n/* harmony export */   isSystemMessage: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.isSystemMessage),\n/* harmony export */   isSystemMessageChunk: () => (/* reexport safe */ _system_js__WEBPACK_IMPORTED_MODULE_5__.isSystemMessageChunk),\n/* harmony export */   isToolMessage: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_9__.isToolMessage),\n/* harmony export */   isToolMessageChunk: () => (/* reexport safe */ _tool_js__WEBPACK_IMPORTED_MODULE_9__.isToolMessageChunk),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_6__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_1__.mergeContent),\n/* harmony export */   mergeMessageRuns: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.mergeMessageRuns),\n/* harmony export */   trimMessages: () => (/* reexport safe */ _transformers_js__WEBPACK_IMPORTED_MODULE_7__.trimMessages)\n/* harmony export */ });\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _transformers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transformers.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/transformers.js\");\n/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modifier.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\n\n\n// TODO: Use a star export when we deprecate the\n// existing \"ToolCall\" type in \"base.js\".\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0I7QUFDRTtBQUNBO0FBQ0k7QUFDSDtBQUNDO0FBQ0Q7QUFDTztBQUNKO0FBQzlCLGdEQUFnRDtBQUNoRCx5Q0FBeUM7QUFDcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy9pbmRleC5qcz9iMWM4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2FpLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jaGF0LmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9mdW5jdGlvbi5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vaHVtYW4uanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N5c3RlbS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdXRpbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3RyYW5zZm9ybWVycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXIuanNcIjtcbi8vIFRPRE86IFVzZSBhIHN0YXIgZXhwb3J0IHdoZW4gd2UgZGVwcmVjYXRlIHRoZVxuLy8gZXhpc3RpbmcgXCJUb29sQ2FsbFwiIHR5cGUgaW4gXCJiYXNlLmpzXCIuXG5leHBvcnQgeyBUb29sTWVzc2FnZSwgVG9vbE1lc3NhZ2VDaHVuaywgaXNUb29sTWVzc2FnZSwgaXNUb29sTWVzc2FnZUNodW5rLCB9IGZyb20gXCIuL3Rvb2wuanNcIjtcbiJdLCJuYW1lcyI6WyJUb29sTWVzc2FnZSIsIlRvb2xNZXNzYWdlQ2h1bmsiLCJpc1Rvb2xNZXNzYWdlIiwiaXNUb29sTWVzc2FnZUNodW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/modifier.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoveMessage: () => (/* binding */ RemoveMessage)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Message responsible for deleting other messages.\n */ class RemoveMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    constructor(fields){\n        super({\n            ...fields,\n            content: \"\"\n        });\n        /**\n         * The ID of the message to remove.\n         */ Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.id = fields.id;\n    }\n    _getType() {\n        return \"remove\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            id: this.id\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvbW9kaWZpZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBd0M7QUFDeEM7O0NBRUMsR0FDTSxNQUFNQyxzQkFBc0JELGlEQUFXQTtJQUMxQ0UsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUNGLEdBQUdBLE1BQU07WUFDVEMsU0FBUztRQUNiO1FBQ0E7O1NBRUMsR0FDREMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxNQUFNO1lBQzlCQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLEVBQUUsR0FBR1IsT0FBT1EsRUFBRTtJQUN2QjtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0EsSUFBSUMsbUJBQW1CO1FBQ25CLE9BQU87WUFDSCxHQUFHLEtBQUssQ0FBQ0EsZ0JBQWdCO1lBQ3pCRixJQUFJLElBQUksQ0FBQ0EsRUFBRTtRQUNmO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L21lc3NhZ2VzL21vZGlmaWVyLmpzPzFlODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU1lc3NhZ2UgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIE1lc3NhZ2UgcmVzcG9uc2libGUgZm9yIGRlbGV0aW5nIG90aGVyIG1lc3NhZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgUmVtb3ZlTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgLi4uZmllbGRzLFxuICAgICAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgSUQgb2YgdGhlIG1lc3NhZ2UgdG8gcmVtb3ZlLlxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pZCA9IGZpZWxkcy5pZDtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInJlbW92ZVwiO1xuICAgIH1cbiAgICBnZXQgX3ByaW50YWJsZUZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnN1cGVyLl9wcmludGFibGVGaWVsZHMsXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZU1lc3NhZ2UiLCJSZW1vdmVNZXNzYWdlIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJjb250ZW50IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImlkIiwiX2dldFR5cGUiLCJfcHJpbnRhYmxlRmllbGRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/system.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/system.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SystemMessage: () => (/* binding */ SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* binding */ SystemMessageChunk),\n/* harmony export */   isSystemMessage: () => (/* binding */ isSystemMessage),\n/* harmony export */   isSystemMessageChunk: () => (/* binding */ isSystemMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\n/**\n * Represents a system message in a conversation.\n */ class SystemMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"SystemMessage\";\n    }\n    _getType() {\n        return \"system\";\n    }\n}\n/**\n * Represents a chunk of a system message, which can be concatenated with\n * other system message chunks.\n */ class SystemMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    static lc_name() {\n        return \"SystemMessageChunk\";\n    }\n    _getType() {\n        return \"system\";\n    }\n    concat(chunk) {\n        return new SystemMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            id: this.id ?? chunk.id\n        });\n    }\n}\nfunction isSystemMessage(x) {\n    return x._getType() === \"system\";\n}\nfunction isSystemMessageChunk(x) {\n    return x._getType() === \"system\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvc3lzdGVtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNGO0FBQ3RGOztDQUVDLEdBQ00sTUFBTUksc0JBQXNCSixpREFBV0E7SUFDMUMsT0FBT0ssVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNQywyQkFBMkJOLHNEQUFnQkE7SUFDcEQsT0FBT0ksVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxXQUFXO1FBQ1AsT0FBTztJQUNYO0lBQ0FFLE9BQU9DLEtBQUssRUFBRTtRQUNWLE9BQU8sSUFBSUYsbUJBQW1CO1lBQzFCRyxTQUFTUixzREFBWUEsQ0FBQyxJQUFJLENBQUNRLE9BQU8sRUFBRUQsTUFBTUMsT0FBTztZQUNqREMsbUJBQW1CUixxREFBV0EsQ0FBQyxJQUFJLENBQUNRLGlCQUFpQixFQUFFRixNQUFNRSxpQkFBaUI7WUFDOUVDLG1CQUFtQlQscURBQVdBLENBQUMsSUFBSSxDQUFDUyxpQkFBaUIsRUFBRUgsTUFBTUcsaUJBQWlCO1lBQzlFQyxJQUFJLElBQUksQ0FBQ0EsRUFBRSxJQUFJSixNQUFNSSxFQUFFO1FBQzNCO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLGdCQUFnQkMsQ0FBQztJQUM3QixPQUFPQSxFQUFFVCxRQUFRLE9BQU87QUFDNUI7QUFDTyxTQUFTVSxxQkFBcUJELENBQUM7SUFDbEMsT0FBT0EsRUFBRVQsUUFBUSxPQUFPO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvc3lzdGVtLmpzP2U1YjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlQ2h1bmssIG1lcmdlQ29udGVudCwgX21lcmdlRGljdHMsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc3lzdGVtIG1lc3NhZ2UgaW4gYSBjb252ZXJzYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBTeXN0ZW1NZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2Uge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTeXN0ZW1NZXNzYWdlXCI7XG4gICAgfVxuICAgIF9nZXRUeXBlKCkge1xuICAgICAgICByZXR1cm4gXCJzeXN0ZW1cIjtcbiAgICB9XG59XG4vKipcbiAqIFJlcHJlc2VudHMgYSBjaHVuayBvZiBhIHN5c3RlbSBtZXNzYWdlLCB3aGljaCBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGhcbiAqIG90aGVyIHN5c3RlbSBtZXNzYWdlIGNodW5rcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN5c3RlbU1lc3NhZ2VDaHVuayBleHRlbmRzIEJhc2VNZXNzYWdlQ2h1bmsge1xuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTeXN0ZW1NZXNzYWdlQ2h1bmtcIjtcbiAgICB9XG4gICAgX2dldFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBcInN5c3RlbVwiO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlQ2h1bmsoe1xuICAgICAgICAgICAgY29udGVudDogbWVyZ2VDb250ZW50KHRoaXMuY29udGVudCwgY2h1bmsuY29udGVudCksXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczogX21lcmdlRGljdHModGhpcy5hZGRpdGlvbmFsX2t3YXJncywgY2h1bmsuYWRkaXRpb25hbF9rd2FyZ3MpLFxuICAgICAgICAgICAgcmVzcG9uc2VfbWV0YWRhdGE6IF9tZXJnZURpY3RzKHRoaXMucmVzcG9uc2VfbWV0YWRhdGEsIGNodW5rLnJlc3BvbnNlX21ldGFkYXRhKSxcbiAgICAgICAgICAgIGlkOiB0aGlzLmlkID8/IGNodW5rLmlkLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTeXN0ZW1NZXNzYWdlKHgpIHtcbiAgICByZXR1cm4geC5fZ2V0VHlwZSgpID09PSBcInN5c3RlbVwiO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU3lzdGVtTWVzc2FnZUNodW5rKHgpIHtcbiAgICByZXR1cm4geC5fZ2V0VHlwZSgpID09PSBcInN5c3RlbVwiO1xufVxuIl0sIm5hbWVzIjpbIkJhc2VNZXNzYWdlIiwiQmFzZU1lc3NhZ2VDaHVuayIsIm1lcmdlQ29udGVudCIsIl9tZXJnZURpY3RzIiwiU3lzdGVtTWVzc2FnZSIsImxjX25hbWUiLCJfZ2V0VHlwZSIsIlN5c3RlbU1lc3NhZ2VDaHVuayIsImNvbmNhdCIsImNodW5rIiwiY29udGVudCIsImFkZGl0aW9uYWxfa3dhcmdzIiwicmVzcG9uc2VfbWV0YWRhdGEiLCJpZCIsImlzU3lzdGVtTWVzc2FnZSIsIngiLCJpc1N5c3RlbU1lc3NhZ2VDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/system.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/tool.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/tool.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolMessage: () => (/* binding */ ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* binding */ ToolMessageChunk),\n/* harmony export */   defaultToolCallParser: () => (/* binding */ defaultToolCallParser),\n/* harmony export */   isDirectToolOutput: () => (/* binding */ isDirectToolOutput),\n/* harmony export */   isToolMessage: () => (/* binding */ isToolMessage),\n/* harmony export */   isToolMessageChunk: () => (/* binding */ isToolMessageChunk)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n\nfunction isDirectToolOutput(x) {\n    return x != null && typeof x === \"object\" && \"lc_direct_tool_output\" in x && x.lc_direct_tool_output === true;\n}\n/**\n * Represents a tool message in a conversation.\n */ class ToolMessage extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage {\n    static lc_name() {\n        return \"ToolMessage\";\n    }\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            tool_call_id: \"tool_call_id\"\n        };\n    }\n    constructor(fields, tool_call_id, name){\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = {\n                content: fields,\n                name,\n                tool_call_id: tool_call_id\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_direct_tool_output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */ Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n    }\n    _getType() {\n        return \"tool\";\n    }\n    static isInstance(message) {\n        return message._getType() === \"tool\";\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact\n        };\n    }\n}\n/**\n * Represents a chunk of a tool message, which can be concatenated\n * with other tool message chunks.\n */ class ToolMessageChunk extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tool_call_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Status of the tool invocation.\n         * @version 0.2.19\n         */ Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Artifact of the Tool execution which is not meant to be sent to the model.\n         *\n         * Should only be specified if it is different from the message content, e.g. if only\n         * a subset of the full tool output is being passed as message content but the full\n         * output is needed in other parts of the code.\n         */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"artifact\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.tool_call_id = fields.tool_call_id;\n        this.artifact = fields.artifact;\n        this.status = fields.status;\n    }\n    static lc_name() {\n        return \"ToolMessageChunk\";\n    }\n    _getType() {\n        return \"tool\";\n    }\n    concat(chunk) {\n        return new ToolMessageChunk({\n            content: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent)(this.content, chunk.content),\n            additional_kwargs: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.additional_kwargs, chunk.additional_kwargs),\n            response_metadata: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts)(this.response_metadata, chunk.response_metadata),\n            artifact: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeObj)(this.artifact, chunk.artifact),\n            tool_call_id: this.tool_call_id,\n            id: this.id ?? chunk.id,\n            status: (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._mergeStatus)(this.status, chunk.status)\n        });\n    }\n    get _printableFields() {\n        return {\n            ...super._printableFields,\n            tool_call_id: this.tool_call_id,\n            artifact: this.artifact\n        };\n    }\n}\nfunction defaultToolCallParser(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCalls) {\n    const toolCalls = [];\n    const invalidToolCalls = [];\n    for (const toolCall of rawToolCalls){\n        if (!toolCall.function) {\n            continue;\n        } else {\n            const functionName = toolCall.function.name;\n            try {\n                const functionArgs = JSON.parse(toolCall.function.arguments);\n                const parsed = {\n                    name: functionName || \"\",\n                    args: functionArgs || {},\n                    id: toolCall.id\n                };\n                toolCalls.push(parsed);\n            } catch (error) {\n                invalidToolCalls.push({\n                    name: functionName,\n                    args: toolCall.function.arguments,\n                    id: toolCall.id,\n                    error: \"Malformed args.\"\n                });\n            }\n        }\n    }\n    return [\n        toolCalls,\n        invalidToolCalls\n    ];\n}\nfunction isToolMessage(x) {\n    return x._getType() === \"tool\";\n}\nfunction isToolMessageChunk(x) {\n    return x._getType() === \"tool\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/transformers.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/transformers.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultTextSplitter: () => (/* binding */ defaultTextSplitter),\n/* harmony export */   filterMessages: () => (/* binding */ filterMessages),\n/* harmony export */   mergeMessageRuns: () => (/* binding */ mergeMessageRuns),\n/* harmony export */   trimMessages: () => (/* binding */ trimMessages)\n/* harmony export */ });\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _modifier_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modifier.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/modifier.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n\n\n\n\n\n\n\n\n\nconst _isMessageType = (msg, types)=>{\n    const typesAsStrings = [\n        ...new Set(types?.map((t)=>{\n            if (typeof t === \"string\") {\n                return t;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const instantiatedMsgClass = new t({});\n            if (!(\"_getType\" in instantiatedMsgClass) || typeof instantiatedMsgClass._getType !== \"function\") {\n                throw new Error(\"Invalid type provided.\");\n            }\n            return instantiatedMsgClass._getType();\n        }))\n    ];\n    const msgType = msg._getType();\n    return typesAsStrings.some((t)=>t === msgType);\n};\nfunction filterMessages(messagesOrOptions, options) {\n    if (Array.isArray(messagesOrOptions)) {\n        return _filterMessages(messagesOrOptions, options);\n    }\n    return _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda.from((input)=>{\n        return _filterMessages(input, messagesOrOptions);\n    });\n}\nfunction _filterMessages(messages, options = {}) {\n    const { includeNames, excludeNames, includeTypes, excludeTypes, includeIds, excludeIds } = options;\n    const filtered = [];\n    for (const msg of messages){\n        if (excludeNames && msg.name && excludeNames.includes(msg.name)) {\n            continue;\n        } else if (excludeTypes && _isMessageType(msg, excludeTypes)) {\n            continue;\n        } else if (excludeIds && msg.id && excludeIds.includes(msg.id)) {\n            continue;\n        }\n        // default to inclusion when no inclusion criteria given.\n        if (!(includeTypes || includeIds || includeNames)) {\n            filtered.push(msg);\n        } else if (includeNames && msg.name && includeNames.some((iName)=>iName === msg.name)) {\n            filtered.push(msg);\n        } else if (includeTypes && _isMessageType(msg, includeTypes)) {\n            filtered.push(msg);\n        } else if (includeIds && msg.id && includeIds.some((id)=>id === msg.id)) {\n            filtered.push(msg);\n        }\n    }\n    return filtered;\n}\nfunction mergeMessageRuns(messages) {\n    if (Array.isArray(messages)) {\n        return _mergeMessageRuns(messages);\n    }\n    return _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda.from(_mergeMessageRuns);\n}\nfunction _mergeMessageRuns(messages) {\n    if (!messages.length) {\n        return [];\n    }\n    const merged = [];\n    for (const msg of messages){\n        const curr = msg; // Create a shallow copy of the message\n        const last = merged.pop();\n        if (!last) {\n            merged.push(curr);\n        } else if (curr._getType() === \"tool\" || !(curr._getType() === last._getType())) {\n            merged.push(last, curr);\n        } else {\n            const lastChunk = (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.convertToChunk)(last);\n            const currChunk = (0,_utils_js__WEBPACK_IMPORTED_MODULE_8__.convertToChunk)(curr);\n            const mergedChunks = lastChunk.concat(currChunk);\n            if (typeof lastChunk.content === \"string\" && typeof currChunk.content === \"string\") {\n                mergedChunks.content = `${lastChunk.content}\\n${currChunk.content}`;\n            }\n            merged.push(_chunkToMsg(mergedChunks));\n        }\n    }\n    return merged;\n}\nfunction trimMessages(messagesOrOptions, options) {\n    if (Array.isArray(messagesOrOptions)) {\n        const messages = messagesOrOptions;\n        if (!options) {\n            throw new Error(\"Options parameter is required when providing messages.\");\n        }\n        return _trimMessagesHelper(messages, options);\n    } else {\n        const trimmerOptions = messagesOrOptions;\n        return _runnables_base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda.from((input)=>_trimMessagesHelper(input, trimmerOptions));\n    }\n}\nasync function _trimMessagesHelper(messages, options) {\n    const { maxTokens, tokenCounter, strategy = \"last\", allowPartial = false, endOn, startOn, includeSystem = false, textSplitter } = options;\n    if (startOn && strategy === \"first\") {\n        throw new Error(\"`startOn` should only be specified if `strategy` is 'last'.\");\n    }\n    if (includeSystem && strategy === \"first\") {\n        throw new Error(\"`includeSystem` should only be specified if `strategy` is 'last'.\");\n    }\n    let listTokenCounter;\n    if (\"getNumTokens\" in tokenCounter) {\n        listTokenCounter = async (msgs)=>{\n            const tokenCounts = await Promise.all(msgs.map((msg)=>tokenCounter.getNumTokens(msg.content)));\n            return tokenCounts.reduce((sum, count)=>sum + count, 0);\n        };\n    } else {\n        listTokenCounter = async (msgs)=>tokenCounter(msgs);\n    }\n    let textSplitterFunc = defaultTextSplitter;\n    if (textSplitter) {\n        if (\"splitText\" in textSplitter) {\n            textSplitterFunc = textSplitter.splitText;\n        } else {\n            textSplitterFunc = async (text)=>textSplitter(text);\n        }\n    }\n    if (strategy === \"first\") {\n        return _firstMaxTokens(messages, {\n            maxTokens,\n            tokenCounter: listTokenCounter,\n            textSplitter: textSplitterFunc,\n            partialStrategy: allowPartial ? \"first\" : undefined,\n            endOn\n        });\n    } else if (strategy === \"last\") {\n        return _lastMaxTokens(messages, {\n            maxTokens,\n            tokenCounter: listTokenCounter,\n            textSplitter: textSplitterFunc,\n            allowPartial,\n            includeSystem,\n            startOn,\n            endOn\n        });\n    } else {\n        throw new Error(`Unrecognized strategy: '${strategy}'. Must be one of 'first' or 'last'.`);\n    }\n}\nasync function _firstMaxTokens(messages, options) {\n    const { maxTokens, tokenCounter, textSplitter, partialStrategy, endOn } = options;\n    let messagesCopy = [\n        ...messages\n    ];\n    let idx = 0;\n    for(let i = 0; i < messagesCopy.length; i += 1){\n        const remainingMessages = i > 0 ? messagesCopy.slice(0, -i) : messagesCopy;\n        if (await tokenCounter(remainingMessages) <= maxTokens) {\n            idx = messagesCopy.length - i;\n            break;\n        }\n    }\n    if (idx < messagesCopy.length - 1 && partialStrategy) {\n        let includedPartial = false;\n        if (Array.isArray(messagesCopy[idx].content)) {\n            const excluded = messagesCopy[idx];\n            if (typeof excluded.content === \"string\") {\n                throw new Error(\"Expected content to be an array.\");\n            }\n            const numBlock = excluded.content.length;\n            const reversedContent = partialStrategy === \"last\" ? [\n                ...excluded.content\n            ].reverse() : excluded.content;\n            for(let i = 1; i <= numBlock; i += 1){\n                const partialContent = partialStrategy === \"first\" ? reversedContent.slice(0, i) : reversedContent.slice(-i);\n                const fields = Object.fromEntries(Object.entries(excluded).filter(([k])=>k !== \"type\" && !k.startsWith(\"lc_\")));\n                const updatedMessage = _switchTypeToMessage(excluded._getType(), {\n                    ...fields,\n                    content: partialContent\n                });\n                const slicedMessages = [\n                    ...messagesCopy.slice(0, idx),\n                    updatedMessage\n                ];\n                if (await tokenCounter(slicedMessages) <= maxTokens) {\n                    messagesCopy = slicedMessages;\n                    idx += 1;\n                    includedPartial = true;\n                } else {\n                    break;\n                }\n            }\n            if (includedPartial && partialStrategy === \"last\") {\n                excluded.content = [\n                    ...reversedContent\n                ].reverse();\n            }\n        }\n        if (!includedPartial) {\n            const excluded = messagesCopy[idx];\n            let text;\n            if (Array.isArray(excluded.content) && excluded.content.some((block)=>typeof block === \"string\" || block.type === \"text\")) {\n                const textBlock = excluded.content.find((block)=>block.type === \"text\" && block.text);\n                text = textBlock?.text;\n            } else if (typeof excluded.content === \"string\") {\n                text = excluded.content;\n            }\n            if (text) {\n                const splitTexts = await textSplitter(text);\n                const numSplits = splitTexts.length;\n                if (partialStrategy === \"last\") {\n                    splitTexts.reverse();\n                }\n                for(let _ = 0; _ < numSplits - 1; _ += 1){\n                    splitTexts.pop();\n                    excluded.content = splitTexts.join(\"\");\n                    if (await tokenCounter([\n                        ...messagesCopy.slice(0, idx),\n                        excluded\n                    ]) <= maxTokens) {\n                        if (partialStrategy === \"last\") {\n                            excluded.content = [\n                                ...splitTexts\n                            ].reverse().join(\"\");\n                        }\n                        messagesCopy = [\n                            ...messagesCopy.slice(0, idx),\n                            excluded\n                        ];\n                        idx += 1;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    if (endOn) {\n        const endOnArr = Array.isArray(endOn) ? endOn : [\n            endOn\n        ];\n        while(idx > 0 && !_isMessageType(messagesCopy[idx - 1], endOnArr)){\n            idx -= 1;\n        }\n    }\n    return messagesCopy.slice(0, idx);\n}\nasync function _lastMaxTokens(messages, options) {\n    const { allowPartial = false, includeSystem = false, endOn, startOn, ...rest } = options;\n    if (endOn) {\n        const endOnArr = Array.isArray(endOn) ? endOn : [\n            endOn\n        ];\n        while(messages && !_isMessageType(messages[messages.length - 1], endOnArr)){\n            messages.pop();\n        }\n    }\n    const swappedSystem = includeSystem && messages[0]._getType() === \"system\";\n    let reversed_ = swappedSystem ? messages.slice(0, 1).concat(messages.slice(1).reverse()) : messages.reverse();\n    reversed_ = await _firstMaxTokens(reversed_, {\n        ...rest,\n        partialStrategy: allowPartial ? \"last\" : undefined,\n        endOn: startOn\n    });\n    if (swappedSystem) {\n        return [\n            reversed_[0],\n            ...reversed_.slice(1).reverse()\n        ];\n    } else {\n        return reversed_.reverse();\n    }\n}\nconst _MSG_CHUNK_MAP = {\n    human: {\n        message: _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessage,\n        messageChunk: _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessageChunk\n    },\n    ai: {\n        message: _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage,\n        messageChunk: _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessageChunk\n    },\n    system: {\n        message: _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessage,\n        messageChunk: _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessageChunk\n    },\n    developer: {\n        message: _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessage,\n        messageChunk: _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessageChunk\n    },\n    tool: {\n        message: _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessage,\n        messageChunk: _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessageChunk\n    },\n    function: {\n        message: _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessage,\n        messageChunk: _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessageChunk\n    },\n    generic: {\n        message: _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessage,\n        messageChunk: _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk\n    },\n    remove: {\n        message: _modifier_js__WEBPACK_IMPORTED_MODULE_5__.RemoveMessage,\n        messageChunk: _modifier_js__WEBPACK_IMPORTED_MODULE_5__.RemoveMessage\n    }\n};\nfunction _switchTypeToMessage(messageType, fields, returnChunk) {\n    let chunk;\n    let msg;\n    switch(messageType){\n        case \"human\":\n            if (returnChunk) {\n                chunk = new _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessageChunk(fields);\n            } else {\n                msg = new _human_js__WEBPACK_IMPORTED_MODULE_4__.HumanMessage(fields);\n            }\n            break;\n        case \"ai\":\n            if (returnChunk) {\n                let aiChunkFields = {\n                    ...fields\n                };\n                if (\"tool_calls\" in aiChunkFields) {\n                    aiChunkFields = {\n                        ...aiChunkFields,\n                        tool_call_chunks: aiChunkFields.tool_calls?.map((tc)=>({\n                                ...tc,\n                                type: \"tool_call_chunk\",\n                                index: undefined,\n                                args: JSON.stringify(tc.args)\n                            }))\n                    };\n                }\n                chunk = new _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessageChunk(aiChunkFields);\n            } else {\n                msg = new _ai_js__WEBPACK_IMPORTED_MODULE_1__.AIMessage(fields);\n            }\n            break;\n        case \"system\":\n            if (returnChunk) {\n                chunk = new _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessageChunk(fields);\n            } else {\n                msg = new _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessage(fields);\n            }\n            break;\n        case \"developer\":\n            if (returnChunk) {\n                chunk = new _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessageChunk({\n                    ...fields,\n                    additional_kwargs: {\n                        ...fields.additional_kwargs,\n                        __openai_role__: \"developer\"\n                    }\n                });\n            } else {\n                msg = new _system_js__WEBPACK_IMPORTED_MODULE_6__.SystemMessage({\n                    ...fields,\n                    additional_kwargs: {\n                        ...fields.additional_kwargs,\n                        __openai_role__: \"developer\"\n                    }\n                });\n            }\n            break;\n        case \"tool\":\n            if (\"tool_call_id\" in fields) {\n                if (returnChunk) {\n                    chunk = new _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessageChunk(fields);\n                } else {\n                    msg = new _tool_js__WEBPACK_IMPORTED_MODULE_7__.ToolMessage(fields);\n                }\n            } else {\n                throw new Error(\"Can not convert ToolMessage to ToolMessageChunk if 'tool_call_id' field is not defined.\");\n            }\n            break;\n        case \"function\":\n            if (returnChunk) {\n                chunk = new _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessageChunk(fields);\n            } else {\n                if (!fields.name) {\n                    throw new Error(\"FunctionMessage must have a 'name' field\");\n                }\n                msg = new _function_js__WEBPACK_IMPORTED_MODULE_3__.FunctionMessage(fields);\n            }\n            break;\n        case \"generic\":\n            if (\"role\" in fields) {\n                if (returnChunk) {\n                    chunk = new _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessageChunk(fields);\n                } else {\n                    msg = new _chat_js__WEBPACK_IMPORTED_MODULE_2__.ChatMessage(fields);\n                }\n            } else {\n                throw new Error(\"Can not convert ChatMessage to ChatMessageChunk if 'role' field is not defined.\");\n            }\n            break;\n        default:\n            throw new Error(`Unrecognized message type ${messageType}`);\n    }\n    if (returnChunk && chunk) {\n        return chunk;\n    }\n    if (msg) {\n        return msg;\n    }\n    throw new Error(`Unrecognized message type ${messageType}`);\n}\nfunction _chunkToMsg(chunk) {\n    const chunkType = chunk._getType();\n    let msg;\n    const fields = Object.fromEntries(Object.entries(chunk).filter(([k])=>![\n            \"type\",\n            \"tool_call_chunks\"\n        ].includes(k) && !k.startsWith(\"lc_\")));\n    if (chunkType in _MSG_CHUNK_MAP) {\n        msg = _switchTypeToMessage(chunkType, fields);\n    }\n    if (!msg) {\n        throw new Error(`Unrecognized message chunk class ${chunkType}. Supported classes are ${Object.keys(_MSG_CHUNK_MAP)}`);\n    }\n    return msg;\n}\n/**\n * The default text splitter function that splits text by newlines.\n *\n * @param {string} text\n * @returns A promise that resolves to an array of strings split by newlines.\n */ function defaultTextSplitter(text) {\n    const splits = text.split(\"\\n\");\n    return Promise.resolve([\n        ...splits.slice(0, -1).map((s)=>`${s}\\n`),\n        splits[splits.length - 1]\n    ]);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/transformers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/messages/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/messages/utils.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coerceMessageLikeToMessage: () => (/* binding */ coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* binding */ convertToChunk),\n/* harmony export */   getBufferString: () => (/* binding */ getBufferString),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* binding */ mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* binding */ mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* binding */ mapStoredMessagesToChatMessages)\n/* harmony export */ });\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/errors/index.js\");\n/* harmony import */ var _tools_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tools/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\");\n/* harmony import */ var _ai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _chat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chat.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/chat.js\");\n/* harmony import */ var _function_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./function.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/function.js\");\n/* harmony import */ var _human_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _system_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./system.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/system.js\");\n/* harmony import */ var _tool_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n\n\n\n\n\n\n\n\n\nfunction _coerceToolCall(toolCall) {\n    if ((0,_tools_utils_js__WEBPACK_IMPORTED_MODULE_1__._isToolCall)(toolCall)) {\n        return toolCall;\n    } else if (typeof toolCall.id === \"string\" && toolCall.type === \"function\" && typeof toolCall.function === \"object\" && toolCall.function !== null && \"arguments\" in toolCall.function && typeof toolCall.function.arguments === \"string\" && \"name\" in toolCall.function && typeof toolCall.function.name === \"string\") {\n        // Handle OpenAI tool call format\n        return {\n            id: toolCall.id,\n            args: JSON.parse(toolCall.function.arguments),\n            name: toolCall.function.name,\n            type: \"tool_call\"\n        };\n    } else {\n        // TODO: Throw an error?\n        return toolCall;\n    }\n}\nfunction isSerializedConstructor(x) {\n    return typeof x === \"object\" && x != null && x.lc === 1 && Array.isArray(x.id) && x.kwargs != null && typeof x.kwargs === \"object\";\n}\nfunction _constructMessageFromParams(params) {\n    let type;\n    let rest;\n    // Support serialized messages\n    if (isSerializedConstructor(params)) {\n        const className = params.id.at(-1);\n        if (className === \"HumanMessage\" || className === \"HumanMessageChunk\") {\n            type = \"user\";\n        } else if (className === \"AIMessage\" || className === \"AIMessageChunk\") {\n            type = \"assistant\";\n        } else if (className === \"SystemMessage\" || className === \"SystemMessageChunk\") {\n            type = \"system\";\n        } else {\n            type = \"unknown\";\n        }\n        rest = params.kwargs;\n    } else {\n        const { type: extractedType, ...otherParams } = params;\n        type = extractedType;\n        rest = otherParams;\n    }\n    if (type === \"human\" || type === \"user\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessage(rest);\n    } else if (type === \"ai\" || type === \"assistant\") {\n        const { tool_calls: rawToolCalls, ...other } = rest;\n        if (!Array.isArray(rawToolCalls)) {\n            return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage(rest);\n        }\n        const tool_calls = rawToolCalls.map(_coerceToolCall);\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage({\n            ...other,\n            tool_calls\n        });\n    } else if (type === \"system\") {\n        return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage(rest);\n    } else if (type === \"developer\") {\n        return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage({\n            ...rest,\n            additional_kwargs: {\n                ...rest.additional_kwargs,\n                __openai_role__: \"developer\"\n            }\n        });\n    } else if (type === \"tool\" && \"tool_call_id\" in rest) {\n        return new _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessage({\n            ...rest,\n            content: rest.content,\n            tool_call_id: rest.tool_call_id,\n            name: rest.name\n        });\n    } else {\n        const error = (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_0__.addLangChainErrorFields)(new Error(`Unable to coerce message from array: only human, AI, system, developer, or tool message coercion is currently supported.\\n\\nReceived: ${JSON.stringify(params, null, 2)}`), \"MESSAGE_COERCION_FAILURE\");\n        throw error;\n    }\n}\nfunction coerceMessageLikeToMessage(messageLike) {\n    if (typeof messageLike === \"string\") {\n        return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessage(messageLike);\n    } else if ((0,_base_js__WEBPACK_IMPORTED_MODULE_3__.isBaseMessage)(messageLike)) {\n        return messageLike;\n    }\n    if (Array.isArray(messageLike)) {\n        const [type, content] = messageLike;\n        return _constructMessageFromParams({\n            type,\n            content\n        });\n    } else if ((0,_base_js__WEBPACK_IMPORTED_MODULE_3__._isMessageFieldWithRole)(messageLike)) {\n        const { role: type, ...rest } = messageLike;\n        return _constructMessageFromParams({\n            ...rest,\n            type\n        });\n    } else {\n        return _constructMessageFromParams(messageLike);\n    }\n}\n/**\n * This function is used by memory classes to get a string representation\n * of the chat message history, based on the message content and role.\n */ function getBufferString(messages, humanPrefix = \"Human\", aiPrefix = \"AI\") {\n    const string_messages = [];\n    for (const m of messages){\n        let role;\n        if (m._getType() === \"human\") {\n            role = humanPrefix;\n        } else if (m._getType() === \"ai\") {\n            role = aiPrefix;\n        } else if (m._getType() === \"system\") {\n            role = \"System\";\n        } else if (m._getType() === \"function\") {\n            role = \"Function\";\n        } else if (m._getType() === \"tool\") {\n            role = \"Tool\";\n        } else if (m._getType() === \"generic\") {\n            role = m.role;\n        } else {\n            throw new Error(`Got unsupported message type: ${m._getType()}`);\n        }\n        const nameStr = m.name ? `${m.name}, ` : \"\";\n        const readableContent = typeof m.content === \"string\" ? m.content : JSON.stringify(m.content, null, 2);\n        string_messages.push(`${role}: ${nameStr}${readableContent}`);\n    }\n    return string_messages.join(\"\\n\");\n}\n/**\n * Maps messages from an older format (V1) to the current `StoredMessage`\n * format. If the message is already in the `StoredMessage` format, it is\n * returned as is. Otherwise, it transforms the V1 message into a\n * `StoredMessage`. This function is important for maintaining\n * compatibility with older message formats.\n */ function mapV1MessageToStoredMessage(message) {\n    // TODO: Remove this mapper when we deprecate the old message format.\n    if (message.data !== undefined) {\n        return message;\n    } else {\n        const v1Message = message;\n        return {\n            type: v1Message.type,\n            data: {\n                content: v1Message.text,\n                role: v1Message.role,\n                name: undefined,\n                tool_call_id: undefined\n            }\n        };\n    }\n}\nfunction mapStoredMessageToChatMessage(message) {\n    const storedMessage = mapV1MessageToStoredMessage(message);\n    switch(storedMessage.type){\n        case \"human\":\n            return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessage(storedMessage.data);\n        case \"ai\":\n            return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessage(storedMessage.data);\n        case \"system\":\n            return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessage(storedMessage.data);\n        case \"function\":\n            if (storedMessage.data.name === undefined) {\n                throw new Error(\"Name must be defined for function messages\");\n            }\n            return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessage(storedMessage.data);\n        case \"tool\":\n            if (storedMessage.data.tool_call_id === undefined) {\n                throw new Error(\"Tool call ID must be defined for tool messages\");\n            }\n            return new _tool_js__WEBPACK_IMPORTED_MODULE_8__.ToolMessage(storedMessage.data);\n        case \"generic\":\n            {\n                if (storedMessage.data.role === undefined) {\n                    throw new Error(\"Role must be defined for chat messages\");\n                }\n                return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage(storedMessage.data);\n            }\n        default:\n            throw new Error(`Got unexpected type: ${storedMessage.type}`);\n    }\n}\n/**\n * Transforms an array of `StoredMessage` instances into an array of\n * `BaseMessage` instances. It uses the `mapV1MessageToStoredMessage`\n * function to ensure all messages are in the `StoredMessage` format, then\n * creates new instances of the appropriate `BaseMessage` subclass based\n * on the type of each message. This function is used to prepare stored\n * messages for use in a chat context.\n */ function mapStoredMessagesToChatMessages(messages) {\n    return messages.map(mapStoredMessageToChatMessage);\n}\n/**\n * Transforms an array of `BaseMessage` instances into an array of\n * `StoredMessage` instances. It does this by calling the `toDict` method\n * on each `BaseMessage`, which returns a `StoredMessage`. This function\n * is used to prepare chat messages for storage.\n */ function mapChatMessagesToStoredMessages(messages) {\n    return messages.map((message)=>message.toDict());\n}\nfunction convertToChunk(message) {\n    const type = message._getType();\n    if (type === \"human\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _human_js__WEBPACK_IMPORTED_MODULE_6__.HumanMessageChunk({\n            ...message\n        });\n    } else if (type === \"ai\") {\n        let aiChunkFields = {\n            ...message\n        };\n        if (\"tool_calls\" in aiChunkFields) {\n            aiChunkFields = {\n                ...aiChunkFields,\n                tool_call_chunks: aiChunkFields.tool_calls?.map((tc)=>({\n                        ...tc,\n                        type: \"tool_call_chunk\",\n                        index: undefined,\n                        args: JSON.stringify(tc.args)\n                    }))\n            };\n        }\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n            ...aiChunkFields\n        });\n    } else if (type === \"system\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _system_js__WEBPACK_IMPORTED_MODULE_7__.SystemMessageChunk({\n            ...message\n        });\n    } else if (type === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _function_js__WEBPACK_IMPORTED_MODULE_5__.FunctionMessageChunk({\n            ...message\n        });\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    } else if (_chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessage.isInstance(message)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new _chat_js__WEBPACK_IMPORTED_MODULE_4__.ChatMessageChunk({\n            ...message\n        });\n    } else {\n        throw new Error(\"Unknown message type.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvbWVzc2FnZXMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTZEO0FBQ2I7QUFDSTtBQUNnQjtBQUNUO0FBQ1k7QUFDVjtBQUNHO0FBQ3ZCO0FBQ3pDLFNBQVNlLGdCQUFnQkMsUUFBUTtJQUM3QixJQUFJZiw0REFBV0EsQ0FBQ2UsV0FBVztRQUN2QixPQUFPQTtJQUNYLE9BQ0ssSUFBSSxPQUFPQSxTQUFTQyxFQUFFLEtBQUssWUFDNUJELFNBQVNFLElBQUksS0FBSyxjQUNsQixPQUFPRixTQUFTRyxRQUFRLEtBQUssWUFDN0JILFNBQVNHLFFBQVEsS0FBSyxRQUN0QixlQUFlSCxTQUFTRyxRQUFRLElBQ2hDLE9BQU9ILFNBQVNHLFFBQVEsQ0FBQ0MsU0FBUyxLQUFLLFlBQ3ZDLFVBQVVKLFNBQVNHLFFBQVEsSUFDM0IsT0FBT0gsU0FBU0csUUFBUSxDQUFDRSxJQUFJLEtBQUssVUFBVTtRQUM1QyxpQ0FBaUM7UUFDakMsT0FBTztZQUNISixJQUFJRCxTQUFTQyxFQUFFO1lBQ2ZLLE1BQU1DLEtBQUtDLEtBQUssQ0FBQ1IsU0FBU0csUUFBUSxDQUFDQyxTQUFTO1lBQzVDQyxNQUFNTCxTQUFTRyxRQUFRLENBQUNFLElBQUk7WUFDNUJILE1BQU07UUFDVjtJQUNKLE9BQ0s7UUFDRCx3QkFBd0I7UUFDeEIsT0FBT0Y7SUFDWDtBQUNKO0FBQ0EsU0FBU1Msd0JBQXdCQyxDQUFDO0lBQzlCLE9BQVEsT0FBT0EsTUFBTSxZQUNqQkEsS0FBSyxRQUNMQSxFQUFFQyxFQUFFLEtBQUssS0FDVEMsTUFBTUMsT0FBTyxDQUFDSCxFQUFFVCxFQUFFLEtBQ2xCUyxFQUFFSSxNQUFNLElBQUksUUFDWixPQUFPSixFQUFFSSxNQUFNLEtBQUs7QUFDNUI7QUFDQSxTQUFTQyw0QkFBNEJDLE1BQU07SUFDdkMsSUFBSWQ7SUFDSixJQUFJZTtJQUNKLDhCQUE4QjtJQUM5QixJQUFJUix3QkFBd0JPLFNBQVM7UUFDakMsTUFBTUUsWUFBWUYsT0FBT2YsRUFBRSxDQUFDa0IsRUFBRSxDQUFDLENBQUM7UUFDaEMsSUFBSUQsY0FBYyxrQkFBa0JBLGNBQWMscUJBQXFCO1lBQ25FaEIsT0FBTztRQUNYLE9BQ0ssSUFBSWdCLGNBQWMsZUFBZUEsY0FBYyxrQkFBa0I7WUFDbEVoQixPQUFPO1FBQ1gsT0FDSyxJQUFJZ0IsY0FBYyxtQkFDbkJBLGNBQWMsc0JBQXNCO1lBQ3BDaEIsT0FBTztRQUNYLE9BQ0s7WUFDREEsT0FBTztRQUNYO1FBQ0FlLE9BQU9ELE9BQU9GLE1BQU07SUFDeEIsT0FDSztRQUNELE1BQU0sRUFBRVosTUFBTWtCLGFBQWEsRUFBRSxHQUFHQyxhQUFhLEdBQUdMO1FBQ2hEZCxPQUFPa0I7UUFDUEgsT0FBT0k7SUFDWDtJQUNBLElBQUluQixTQUFTLFdBQVdBLFNBQVMsUUFBUTtRQUNyQyxPQUFPLElBQUlSLG1EQUFZQSxDQUFDdUI7SUFDNUIsT0FDSyxJQUFJZixTQUFTLFFBQVFBLFNBQVMsYUFBYTtRQUM1QyxNQUFNLEVBQUVvQixZQUFZQyxZQUFZLEVBQUUsR0FBR0MsT0FBTyxHQUFHUDtRQUMvQyxJQUFJLENBQUNMLE1BQU1DLE9BQU8sQ0FBQ1UsZUFBZTtZQUM5QixPQUFPLElBQUlyQyw2Q0FBU0EsQ0FBQytCO1FBQ3pCO1FBQ0EsTUFBTUssYUFBYUMsYUFBYUUsR0FBRyxDQUFDMUI7UUFDcEMsT0FBTyxJQUFJYiw2Q0FBU0EsQ0FBQztZQUFFLEdBQUdzQyxLQUFLO1lBQUVGO1FBQVc7SUFDaEQsT0FDSyxJQUFJcEIsU0FBUyxVQUFVO1FBQ3hCLE9BQU8sSUFBSU4scURBQWFBLENBQUNxQjtJQUM3QixPQUNLLElBQUlmLFNBQVMsYUFBYTtRQUMzQixPQUFPLElBQUlOLHFEQUFhQSxDQUFDO1lBQ3JCLEdBQUdxQixJQUFJO1lBQ1BTLG1CQUFtQjtnQkFDZixHQUFHVCxLQUFLUyxpQkFBaUI7Z0JBQ3pCQyxpQkFBaUI7WUFDckI7UUFDSjtJQUNKLE9BQ0ssSUFBSXpCLFNBQVMsVUFBVSxrQkFBa0JlLE1BQU07UUFDaEQsT0FBTyxJQUFJbkIsaURBQVdBLENBQUM7WUFDbkIsR0FBR21CLElBQUk7WUFDUFcsU0FBU1gsS0FBS1csT0FBTztZQUNyQkMsY0FBY1osS0FBS1ksWUFBWTtZQUMvQnhCLE1BQU1ZLEtBQUtaLElBQUk7UUFDbkI7SUFDSixPQUNLO1FBQ0QsTUFBTXlCLFFBQVE5Qyx5RUFBdUJBLENBQUMsSUFBSStDLE1BQU0sQ0FBQyxzSUFBc0ksRUFBRXhCLEtBQUt5QixTQUFTLENBQUNoQixRQUFRLE1BQU0sR0FBRyxDQUFDLEdBQUc7UUFDN04sTUFBTWM7SUFDVjtBQUNKO0FBQ08sU0FBU0csMkJBQTJCQyxXQUFXO0lBQ2xELElBQUksT0FBT0EsZ0JBQWdCLFVBQVU7UUFDakMsT0FBTyxJQUFJeEMsbURBQVlBLENBQUN3QztJQUM1QixPQUNLLElBQUk5Qyx1REFBYUEsQ0FBQzhDLGNBQWM7UUFDakMsT0FBT0E7SUFDWDtJQUNBLElBQUl0QixNQUFNQyxPQUFPLENBQUNxQixjQUFjO1FBQzVCLE1BQU0sQ0FBQ2hDLE1BQU0wQixRQUFRLEdBQUdNO1FBQ3hCLE9BQU9uQiw0QkFBNEI7WUFBRWI7WUFBTTBCO1FBQVE7SUFDdkQsT0FDSyxJQUFJdkMsaUVBQXVCQSxDQUFDNkMsY0FBYztRQUMzQyxNQUFNLEVBQUVDLE1BQU1qQyxJQUFJLEVBQUUsR0FBR2UsTUFBTSxHQUFHaUI7UUFDaEMsT0FBT25CLDRCQUE0QjtZQUFFLEdBQUdFLElBQUk7WUFBRWY7UUFBSztJQUN2RCxPQUNLO1FBQ0QsT0FBT2EsNEJBQTRCbUI7SUFDdkM7QUFDSjtBQUNBOzs7Q0FHQyxHQUNNLFNBQVNFLGdCQUFnQkMsUUFBUSxFQUFFQyxjQUFjLE9BQU8sRUFBRUMsV0FBVyxJQUFJO0lBQzVFLE1BQU1DLGtCQUFrQixFQUFFO0lBQzFCLEtBQUssTUFBTUMsS0FBS0osU0FBVTtRQUN0QixJQUFJRjtRQUNKLElBQUlNLEVBQUVDLFFBQVEsT0FBTyxTQUFTO1lBQzFCUCxPQUFPRztRQUNYLE9BQ0ssSUFBSUcsRUFBRUMsUUFBUSxPQUFPLE1BQU07WUFDNUJQLE9BQU9JO1FBQ1gsT0FDSyxJQUFJRSxFQUFFQyxRQUFRLE9BQU8sVUFBVTtZQUNoQ1AsT0FBTztRQUNYLE9BQ0ssSUFBSU0sRUFBRUMsUUFBUSxPQUFPLFlBQVk7WUFDbENQLE9BQU87UUFDWCxPQUNLLElBQUlNLEVBQUVDLFFBQVEsT0FBTyxRQUFRO1lBQzlCUCxPQUFPO1FBQ1gsT0FDSyxJQUFJTSxFQUFFQyxRQUFRLE9BQU8sV0FBVztZQUNqQ1AsT0FBT00sRUFBRU4sSUFBSTtRQUNqQixPQUNLO1lBQ0QsTUFBTSxJQUFJSixNQUFNLENBQUMsOEJBQThCLEVBQUVVLEVBQUVDLFFBQVEsR0FBRyxDQUFDO1FBQ25FO1FBQ0EsTUFBTUMsVUFBVUYsRUFBRXBDLElBQUksR0FBRyxDQUFDLEVBQUVvQyxFQUFFcEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO1FBQ3pDLE1BQU11QyxrQkFBa0IsT0FBT0gsRUFBRWIsT0FBTyxLQUFLLFdBQ3ZDYSxFQUFFYixPQUFPLEdBQ1RyQixLQUFLeUIsU0FBUyxDQUFDUyxFQUFFYixPQUFPLEVBQUUsTUFBTTtRQUN0Q1ksZ0JBQWdCSyxJQUFJLENBQUMsQ0FBQyxFQUFFVixLQUFLLEVBQUUsRUFBRVEsUUFBUSxFQUFFQyxnQkFBZ0IsQ0FBQztJQUNoRTtJQUNBLE9BQU9KLGdCQUFnQk0sSUFBSSxDQUFDO0FBQ2hDO0FBQ0E7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsNEJBQTRCQyxPQUFPO0lBQ3hDLHFFQUFxRTtJQUNyRSxJQUFJQSxRQUFRQyxJQUFJLEtBQUtDLFdBQVc7UUFDNUIsT0FBT0Y7SUFDWCxPQUNLO1FBQ0QsTUFBTUcsWUFBWUg7UUFDbEIsT0FBTztZQUNIOUMsTUFBTWlELFVBQVVqRCxJQUFJO1lBQ3BCK0MsTUFBTTtnQkFDRnJCLFNBQVN1QixVQUFVQyxJQUFJO2dCQUN2QmpCLE1BQU1nQixVQUFVaEIsSUFBSTtnQkFDcEI5QixNQUFNNkM7Z0JBQ05yQixjQUFjcUI7WUFDbEI7UUFDSjtJQUNKO0FBQ0o7QUFDTyxTQUFTRyw4QkFBOEJMLE9BQU87SUFDakQsTUFBTU0sZ0JBQWdCUCw0QkFBNEJDO0lBQ2xELE9BQVFNLGNBQWNwRCxJQUFJO1FBQ3RCLEtBQUs7WUFDRCxPQUFPLElBQUlSLG1EQUFZQSxDQUFDNEQsY0FBY0wsSUFBSTtRQUM5QyxLQUFLO1lBQ0QsT0FBTyxJQUFJL0QsNkNBQVNBLENBQUNvRSxjQUFjTCxJQUFJO1FBQzNDLEtBQUs7WUFDRCxPQUFPLElBQUlyRCxxREFBYUEsQ0FBQzBELGNBQWNMLElBQUk7UUFDL0MsS0FBSztZQUNELElBQUlLLGNBQWNMLElBQUksQ0FBQzVDLElBQUksS0FBSzZDLFdBQVc7Z0JBQ3ZDLE1BQU0sSUFBSW5CLE1BQU07WUFDcEI7WUFDQSxPQUFPLElBQUl2Qyx5REFBZUEsQ0FBQzhELGNBQWNMLElBQUk7UUFDakQsS0FBSztZQUNELElBQUlLLGNBQWNMLElBQUksQ0FBQ3BCLFlBQVksS0FBS3FCLFdBQVc7Z0JBQy9DLE1BQU0sSUFBSW5CLE1BQU07WUFDcEI7WUFDQSxPQUFPLElBQUlqQyxpREFBV0EsQ0FBQ3dELGNBQWNMLElBQUk7UUFDN0MsS0FBSztZQUFXO2dCQUNaLElBQUlLLGNBQWNMLElBQUksQ0FBQ2QsSUFBSSxLQUFLZSxXQUFXO29CQUN2QyxNQUFNLElBQUluQixNQUFNO2dCQUNwQjtnQkFDQSxPQUFPLElBQUl6QyxpREFBV0EsQ0FBQ2dFLGNBQWNMLElBQUk7WUFDN0M7UUFDQTtZQUNJLE1BQU0sSUFBSWxCLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRXVCLGNBQWNwRCxJQUFJLENBQUMsQ0FBQztJQUNwRTtBQUNKO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNxRCxnQ0FBZ0NsQixRQUFRO0lBQ3BELE9BQU9BLFNBQVNaLEdBQUcsQ0FBQzRCO0FBQ3hCO0FBQ0E7Ozs7O0NBS0MsR0FDTSxTQUFTRyxnQ0FBZ0NuQixRQUFRO0lBQ3BELE9BQU9BLFNBQVNaLEdBQUcsQ0FBQyxDQUFDdUIsVUFBWUEsUUFBUVMsTUFBTTtBQUNuRDtBQUNPLFNBQVNDLGVBQWVWLE9BQU87SUFDbEMsTUFBTTlDLE9BQU84QyxRQUFRTixRQUFRO0lBQzdCLElBQUl4QyxTQUFTLFNBQVM7UUFDbEIsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSVAsd0RBQWlCQSxDQUFDO1lBQUUsR0FBR3FELE9BQU87UUFBQztJQUM5QyxPQUNLLElBQUk5QyxTQUFTLE1BQU07UUFDcEIsSUFBSXlELGdCQUFnQjtZQUNoQixHQUFHWCxPQUFPO1FBQ2Q7UUFDQSxJQUFJLGdCQUFnQlcsZUFBZTtZQUMvQkEsZ0JBQWdCO2dCQUNaLEdBQUdBLGFBQWE7Z0JBQ2hCQyxrQkFBa0JELGNBQWNyQyxVQUFVLEVBQUVHLElBQUksQ0FBQ29DLEtBQVE7d0JBQ3JELEdBQUdBLEVBQUU7d0JBQ0wzRCxNQUFNO3dCQUNONEQsT0FBT1o7d0JBQ1A1QyxNQUFNQyxLQUFLeUIsU0FBUyxDQUFDNkIsR0FBR3ZELElBQUk7b0JBQ2hDO1lBQ0o7UUFDSjtRQUNBLG1FQUFtRTtRQUNuRSxPQUFPLElBQUluQixrREFBY0EsQ0FBQztZQUFFLEdBQUd3RSxhQUFhO1FBQUM7SUFDakQsT0FDSyxJQUFJekQsU0FBUyxVQUFVO1FBQ3hCLG1FQUFtRTtRQUNuRSxPQUFPLElBQUlMLDBEQUFrQkEsQ0FBQztZQUFFLEdBQUdtRCxPQUFPO1FBQUM7SUFDL0MsT0FDSyxJQUFJOUMsU0FBUyxZQUFZO1FBQzFCLG1FQUFtRTtRQUNuRSxPQUFPLElBQUlULDhEQUFvQkEsQ0FBQztZQUFFLEdBQUd1RCxPQUFPO1FBQUM7SUFDN0MsbUVBQW1FO0lBQ3ZFLE9BQ0ssSUFBSTFELGlEQUFXQSxDQUFDeUUsVUFBVSxDQUFDZixVQUFVO1FBQ3RDLG1FQUFtRTtRQUNuRSxPQUFPLElBQUl6RCxzREFBZ0JBLENBQUM7WUFBRSxHQUFHeUQsT0FBTztRQUFDO0lBQzdDLE9BQ0s7UUFDRCxNQUFNLElBQUlqQixNQUFNO0lBQ3BCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9tZXNzYWdlcy91dGlscy5qcz9lOTdhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFkZExhbmdDaGFpbkVycm9yRmllbGRzIH0gZnJvbSBcIi4uL2Vycm9ycy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgX2lzVG9vbENhbGwgfSBmcm9tIFwiLi4vdG9vbHMvdXRpbHMuanNcIjtcbmltcG9ydCB7IEFJTWVzc2FnZSwgQUlNZXNzYWdlQ2h1bmsgfSBmcm9tIFwiLi9haS5qc1wiO1xuaW1wb3J0IHsgaXNCYXNlTWVzc2FnZSwgX2lzTWVzc2FnZUZpZWxkV2l0aFJvbGUsIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgQ2hhdE1lc3NhZ2UsIENoYXRNZXNzYWdlQ2h1bmssIH0gZnJvbSBcIi4vY2hhdC5qc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25NZXNzYWdlLCBGdW5jdGlvbk1lc3NhZ2VDaHVuaywgfSBmcm9tIFwiLi9mdW5jdGlvbi5qc1wiO1xuaW1wb3J0IHsgSHVtYW5NZXNzYWdlLCBIdW1hbk1lc3NhZ2VDaHVuayB9IGZyb20gXCIuL2h1bWFuLmpzXCI7XG5pbXBvcnQgeyBTeXN0ZW1NZXNzYWdlLCBTeXN0ZW1NZXNzYWdlQ2h1bmsgfSBmcm9tIFwiLi9zeXN0ZW0uanNcIjtcbmltcG9ydCB7IFRvb2xNZXNzYWdlLCB9IGZyb20gXCIuL3Rvb2wuanNcIjtcbmZ1bmN0aW9uIF9jb2VyY2VUb29sQ2FsbCh0b29sQ2FsbCkge1xuICAgIGlmIChfaXNUb29sQ2FsbCh0b29sQ2FsbCkpIHtcbiAgICAgICAgcmV0dXJuIHRvb2xDYWxsO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdG9vbENhbGwuaWQgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgdG9vbENhbGwudHlwZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIHR5cGVvZiB0b29sQ2FsbC5mdW5jdGlvbiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICB0b29sQ2FsbC5mdW5jdGlvbiAhPT0gbnVsbCAmJlxuICAgICAgICBcImFyZ3VtZW50c1wiIGluIHRvb2xDYWxsLmZ1bmN0aW9uICYmXG4gICAgICAgIHR5cGVvZiB0b29sQ2FsbC5mdW5jdGlvbi5hcmd1bWVudHMgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgXCJuYW1lXCIgaW4gdG9vbENhbGwuZnVuY3Rpb24gJiZcbiAgICAgICAgdHlwZW9mIHRvb2xDYWxsLmZ1bmN0aW9uLm5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gSGFuZGxlIE9wZW5BSSB0b29sIGNhbGwgZm9ybWF0XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdG9vbENhbGwuaWQsXG4gICAgICAgICAgICBhcmdzOiBKU09OLnBhcnNlKHRvb2xDYWxsLmZ1bmN0aW9uLmFyZ3VtZW50cyksXG4gICAgICAgICAgICBuYW1lOiB0b29sQ2FsbC5mdW5jdGlvbi5uYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJ0b29sX2NhbGxcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IFRocm93IGFuIGVycm9yP1xuICAgICAgICByZXR1cm4gdG9vbENhbGw7XG4gICAgfVxufVxuZnVuY3Rpb24gaXNTZXJpYWxpemVkQ29uc3RydWN0b3IoeCkge1xuICAgIHJldHVybiAodHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgeCAhPSBudWxsICYmXG4gICAgICAgIHgubGMgPT09IDEgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheSh4LmlkKSAmJlxuICAgICAgICB4Lmt3YXJncyAhPSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB4Lmt3YXJncyA9PT0gXCJvYmplY3RcIik7XG59XG5mdW5jdGlvbiBfY29uc3RydWN0TWVzc2FnZUZyb21QYXJhbXMocGFyYW1zKSB7XG4gICAgbGV0IHR5cGU7XG4gICAgbGV0IHJlc3Q7XG4gICAgLy8gU3VwcG9ydCBzZXJpYWxpemVkIG1lc3NhZ2VzXG4gICAgaWYgKGlzU2VyaWFsaXplZENvbnN0cnVjdG9yKHBhcmFtcykpIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gcGFyYW1zLmlkLmF0KC0xKTtcbiAgICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gXCJIdW1hbk1lc3NhZ2VcIiB8fCBjbGFzc05hbWUgPT09IFwiSHVtYW5NZXNzYWdlQ2h1bmtcIikge1xuICAgICAgICAgICAgdHlwZSA9IFwidXNlclwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNsYXNzTmFtZSA9PT0gXCJBSU1lc3NhZ2VcIiB8fCBjbGFzc05hbWUgPT09IFwiQUlNZXNzYWdlQ2h1bmtcIikge1xuICAgICAgICAgICAgdHlwZSA9IFwiYXNzaXN0YW50XCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2xhc3NOYW1lID09PSBcIlN5c3RlbU1lc3NhZ2VcIiB8fFxuICAgICAgICAgICAgY2xhc3NOYW1lID09PSBcIlN5c3RlbU1lc3NhZ2VDaHVua1wiKSB7XG4gICAgICAgICAgICB0eXBlID0gXCJzeXN0ZW1cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHR5cGUgPSBcInVua25vd25cIjtcbiAgICAgICAgfVxuICAgICAgICByZXN0ID0gcGFyYW1zLmt3YXJncztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHsgdHlwZTogZXh0cmFjdGVkVHlwZSwgLi4ub3RoZXJQYXJhbXMgfSA9IHBhcmFtcztcbiAgICAgICAgdHlwZSA9IGV4dHJhY3RlZFR5cGU7XG4gICAgICAgIHJlc3QgPSBvdGhlclBhcmFtcztcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IFwiaHVtYW5cIiB8fCB0eXBlID09PSBcInVzZXJcIikge1xuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZShyZXN0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gXCJhaVwiIHx8IHR5cGUgPT09IFwiYXNzaXN0YW50XCIpIHtcbiAgICAgICAgY29uc3QgeyB0b29sX2NhbGxzOiByYXdUb29sQ2FsbHMsIC4uLm90aGVyIH0gPSByZXN0O1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmF3VG9vbENhbGxzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBSU1lc3NhZ2UocmVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9vbF9jYWxscyA9IHJhd1Rvb2xDYWxscy5tYXAoX2NvZXJjZVRvb2xDYWxsKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBSU1lc3NhZ2UoeyAuLi5vdGhlciwgdG9vbF9jYWxscyB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gXCJzeXN0ZW1cIikge1xuICAgICAgICByZXR1cm4gbmV3IFN5c3RlbU1lc3NhZ2UocmVzdCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiZGV2ZWxvcGVyXCIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlKHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICBhZGRpdGlvbmFsX2t3YXJnczoge1xuICAgICAgICAgICAgICAgIC4uLnJlc3QuYWRkaXRpb25hbF9rd2FyZ3MsXG4gICAgICAgICAgICAgICAgX19vcGVuYWlfcm9sZV9fOiBcImRldmVsb3BlclwiLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwidG9vbFwiICYmIFwidG9vbF9jYWxsX2lkXCIgaW4gcmVzdCkge1xuICAgICAgICByZXR1cm4gbmV3IFRvb2xNZXNzYWdlKHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICBjb250ZW50OiByZXN0LmNvbnRlbnQsXG4gICAgICAgICAgICB0b29sX2NhbGxfaWQ6IHJlc3QudG9vbF9jYWxsX2lkLFxuICAgICAgICAgICAgbmFtZTogcmVzdC5uYW1lLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gYWRkTGFuZ0NoYWluRXJyb3JGaWVsZHMobmV3IEVycm9yKGBVbmFibGUgdG8gY29lcmNlIG1lc3NhZ2UgZnJvbSBhcnJheTogb25seSBodW1hbiwgQUksIHN5c3RlbSwgZGV2ZWxvcGVyLCBvciB0b29sIG1lc3NhZ2UgY29lcmNpb24gaXMgY3VycmVudGx5IHN1cHBvcnRlZC5cXG5cXG5SZWNlaXZlZDogJHtKU09OLnN0cmluZ2lmeShwYXJhbXMsIG51bGwsIDIpfWApLCBcIk1FU1NBR0VfQ09FUkNJT05fRkFJTFVSRVwiKTtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZU1lc3NhZ2VMaWtlVG9NZXNzYWdlKG1lc3NhZ2VMaWtlKSB7XG4gICAgaWYgKHR5cGVvZiBtZXNzYWdlTGlrZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZShtZXNzYWdlTGlrZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzQmFzZU1lc3NhZ2UobWVzc2FnZUxpa2UpKSB7XG4gICAgICAgIHJldHVybiBtZXNzYWdlTGlrZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZUxpa2UpKSB7XG4gICAgICAgIGNvbnN0IFt0eXBlLCBjb250ZW50XSA9IG1lc3NhZ2VMaWtlO1xuICAgICAgICByZXR1cm4gX2NvbnN0cnVjdE1lc3NhZ2VGcm9tUGFyYW1zKHsgdHlwZSwgY29udGVudCB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoX2lzTWVzc2FnZUZpZWxkV2l0aFJvbGUobWVzc2FnZUxpa2UpKSB7XG4gICAgICAgIGNvbnN0IHsgcm9sZTogdHlwZSwgLi4ucmVzdCB9ID0gbWVzc2FnZUxpa2U7XG4gICAgICAgIHJldHVybiBfY29uc3RydWN0TWVzc2FnZUZyb21QYXJhbXMoeyAuLi5yZXN0LCB0eXBlIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIF9jb25zdHJ1Y3RNZXNzYWdlRnJvbVBhcmFtcyhtZXNzYWdlTGlrZSk7XG4gICAgfVxufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYnkgbWVtb3J5IGNsYXNzZXMgdG8gZ2V0IGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gKiBvZiB0aGUgY2hhdCBtZXNzYWdlIGhpc3RvcnksIGJhc2VkIG9uIHRoZSBtZXNzYWdlIGNvbnRlbnQgYW5kIHJvbGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRCdWZmZXJTdHJpbmcobWVzc2FnZXMsIGh1bWFuUHJlZml4ID0gXCJIdW1hblwiLCBhaVByZWZpeCA9IFwiQUlcIikge1xuICAgIGNvbnN0IHN0cmluZ19tZXNzYWdlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgbSBvZiBtZXNzYWdlcykge1xuICAgICAgICBsZXQgcm9sZTtcbiAgICAgICAgaWYgKG0uX2dldFR5cGUoKSA9PT0gXCJodW1hblwiKSB7XG4gICAgICAgICAgICByb2xlID0gaHVtYW5QcmVmaXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobS5fZ2V0VHlwZSgpID09PSBcImFpXCIpIHtcbiAgICAgICAgICAgIHJvbGUgPSBhaVByZWZpeDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtLl9nZXRUeXBlKCkgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgICAgICAgIHJvbGUgPSBcIlN5c3RlbVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0uX2dldFR5cGUoKSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICByb2xlID0gXCJGdW5jdGlvblwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG0uX2dldFR5cGUoKSA9PT0gXCJ0b29sXCIpIHtcbiAgICAgICAgICAgIHJvbGUgPSBcIlRvb2xcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChtLl9nZXRUeXBlKCkgPT09IFwiZ2VuZXJpY1wiKSB7XG4gICAgICAgICAgICByb2xlID0gbS5yb2xlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBHb3QgdW5zdXBwb3J0ZWQgbWVzc2FnZSB0eXBlOiAke20uX2dldFR5cGUoKX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lU3RyID0gbS5uYW1lID8gYCR7bS5uYW1lfSwgYCA6IFwiXCI7XG4gICAgICAgIGNvbnN0IHJlYWRhYmxlQ29udGVudCA9IHR5cGVvZiBtLmNvbnRlbnQgPT09IFwic3RyaW5nXCJcbiAgICAgICAgICAgID8gbS5jb250ZW50XG4gICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KG0uY29udGVudCwgbnVsbCwgMik7XG4gICAgICAgIHN0cmluZ19tZXNzYWdlcy5wdXNoKGAke3JvbGV9OiAke25hbWVTdHJ9JHtyZWFkYWJsZUNvbnRlbnR9YCk7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdfbWVzc2FnZXMuam9pbihcIlxcblwiKTtcbn1cbi8qKlxuICogTWFwcyBtZXNzYWdlcyBmcm9tIGFuIG9sZGVyIGZvcm1hdCAoVjEpIHRvIHRoZSBjdXJyZW50IGBTdG9yZWRNZXNzYWdlYFxuICogZm9ybWF0LiBJZiB0aGUgbWVzc2FnZSBpcyBhbHJlYWR5IGluIHRoZSBgU3RvcmVkTWVzc2FnZWAgZm9ybWF0LCBpdCBpc1xuICogcmV0dXJuZWQgYXMgaXMuIE90aGVyd2lzZSwgaXQgdHJhbnNmb3JtcyB0aGUgVjEgbWVzc2FnZSBpbnRvIGFcbiAqIGBTdG9yZWRNZXNzYWdlYC4gVGhpcyBmdW5jdGlvbiBpcyBpbXBvcnRhbnQgZm9yIG1haW50YWluaW5nXG4gKiBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgbWVzc2FnZSBmb3JtYXRzLlxuICovXG5mdW5jdGlvbiBtYXBWMU1lc3NhZ2VUb1N0b3JlZE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIC8vIFRPRE86IFJlbW92ZSB0aGlzIG1hcHBlciB3aGVuIHdlIGRlcHJlY2F0ZSB0aGUgb2xkIG1lc3NhZ2UgZm9ybWF0LlxuICAgIGlmIChtZXNzYWdlLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHYxTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiB2MU1lc3NhZ2UudHlwZSxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiB2MU1lc3NhZ2UudGV4dCxcbiAgICAgICAgICAgICAgICByb2xlOiB2MU1lc3NhZ2Uucm9sZSxcbiAgICAgICAgICAgICAgICBuYW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgdG9vbF9jYWxsX2lkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgY29uc3Qgc3RvcmVkTWVzc2FnZSA9IG1hcFYxTWVzc2FnZVRvU3RvcmVkTWVzc2FnZShtZXNzYWdlKTtcbiAgICBzd2l0Y2ggKHN0b3JlZE1lc3NhZ2UudHlwZSkge1xuICAgICAgICBjYXNlIFwiaHVtYW5cIjpcbiAgICAgICAgICAgIHJldHVybiBuZXcgSHVtYW5NZXNzYWdlKHN0b3JlZE1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIGNhc2UgXCJhaVwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBSU1lc3NhZ2Uoc3RvcmVkTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgY2FzZSBcInN5c3RlbVwiOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTeXN0ZW1NZXNzYWdlKHN0b3JlZE1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIGNhc2UgXCJmdW5jdGlvblwiOlxuICAgICAgICAgICAgaWYgKHN0b3JlZE1lc3NhZ2UuZGF0YS5uYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOYW1lIG11c3QgYmUgZGVmaW5lZCBmb3IgZnVuY3Rpb24gbWVzc2FnZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uTWVzc2FnZShzdG9yZWRNZXNzYWdlLmRhdGEpO1xuICAgICAgICBjYXNlIFwidG9vbFwiOlxuICAgICAgICAgICAgaWYgKHN0b3JlZE1lc3NhZ2UuZGF0YS50b29sX2NhbGxfaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvb2wgY2FsbCBJRCBtdXN0IGJlIGRlZmluZWQgZm9yIHRvb2wgbWVzc2FnZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRvb2xNZXNzYWdlKHN0b3JlZE1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIGNhc2UgXCJnZW5lcmljXCI6IHtcbiAgICAgICAgICAgIGlmIChzdG9yZWRNZXNzYWdlLmRhdGEucm9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUm9sZSBtdXN0IGJlIGRlZmluZWQgZm9yIGNoYXQgbWVzc2FnZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYXRNZXNzYWdlKHN0b3JlZE1lc3NhZ2UuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgR290IHVuZXhwZWN0ZWQgdHlwZTogJHtzdG9yZWRNZXNzYWdlLnR5cGV9YCk7XG4gICAgfVxufVxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuIGFycmF5IG9mIGBTdG9yZWRNZXNzYWdlYCBpbnN0YW5jZXMgaW50byBhbiBhcnJheSBvZlxuICogYEJhc2VNZXNzYWdlYCBpbnN0YW5jZXMuIEl0IHVzZXMgdGhlIGBtYXBWMU1lc3NhZ2VUb1N0b3JlZE1lc3NhZ2VgXG4gKiBmdW5jdGlvbiB0byBlbnN1cmUgYWxsIG1lc3NhZ2VzIGFyZSBpbiB0aGUgYFN0b3JlZE1lc3NhZ2VgIGZvcm1hdCwgdGhlblxuICogY3JlYXRlcyBuZXcgaW5zdGFuY2VzIG9mIHRoZSBhcHByb3ByaWF0ZSBgQmFzZU1lc3NhZ2VgIHN1YmNsYXNzIGJhc2VkXG4gKiBvbiB0aGUgdHlwZSBvZiBlYWNoIG1lc3NhZ2UuIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBwcmVwYXJlIHN0b3JlZFxuICogbWVzc2FnZXMgZm9yIHVzZSBpbiBhIGNoYXQgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcFN0b3JlZE1lc3NhZ2VzVG9DaGF0TWVzc2FnZXMobWVzc2FnZXMpIHtcbiAgICByZXR1cm4gbWVzc2FnZXMubWFwKG1hcFN0b3JlZE1lc3NhZ2VUb0NoYXRNZXNzYWdlKTtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhbiBhcnJheSBvZiBgQmFzZU1lc3NhZ2VgIGluc3RhbmNlcyBpbnRvIGFuIGFycmF5IG9mXG4gKiBgU3RvcmVkTWVzc2FnZWAgaW5zdGFuY2VzLiBJdCBkb2VzIHRoaXMgYnkgY2FsbGluZyB0aGUgYHRvRGljdGAgbWV0aG9kXG4gKiBvbiBlYWNoIGBCYXNlTWVzc2FnZWAsIHdoaWNoIHJldHVybnMgYSBgU3RvcmVkTWVzc2FnZWAuIFRoaXMgZnVuY3Rpb25cbiAqIGlzIHVzZWQgdG8gcHJlcGFyZSBjaGF0IG1lc3NhZ2VzIGZvciBzdG9yYWdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwQ2hhdE1lc3NhZ2VzVG9TdG9yZWRNZXNzYWdlcyhtZXNzYWdlcykge1xuICAgIHJldHVybiBtZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+IG1lc3NhZ2UudG9EaWN0KCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRUb0NodW5rKG1lc3NhZ2UpIHtcbiAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5fZ2V0VHlwZSgpO1xuICAgIGlmICh0eXBlID09PSBcImh1bWFuXCIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICByZXR1cm4gbmV3IEh1bWFuTWVzc2FnZUNodW5rKHsgLi4ubWVzc2FnZSB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZSA9PT0gXCJhaVwiKSB7XG4gICAgICAgIGxldCBhaUNodW5rRmllbGRzID0ge1xuICAgICAgICAgICAgLi4ubWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwidG9vbF9jYWxsc1wiIGluIGFpQ2h1bmtGaWVsZHMpIHtcbiAgICAgICAgICAgIGFpQ2h1bmtGaWVsZHMgPSB7XG4gICAgICAgICAgICAgICAgLi4uYWlDaHVua0ZpZWxkcyxcbiAgICAgICAgICAgICAgICB0b29sX2NhbGxfY2h1bmtzOiBhaUNodW5rRmllbGRzLnRvb2xfY2FsbHM/Lm1hcCgodGMpID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRjLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInRvb2xfY2FsbF9jaHVua1wiLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBhcmdzOiBKU09OLnN0cmluZ2lmeSh0Yy5hcmdzKSxcbiAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICAgICAgcmV0dXJuIG5ldyBBSU1lc3NhZ2VDaHVuayh7IC4uLmFpQ2h1bmtGaWVsZHMgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwic3lzdGVtXCIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICByZXR1cm4gbmV3IFN5c3RlbU1lc3NhZ2VDaHVuayh7IC4uLm1lc3NhZ2UgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb25NZXNzYWdlQ2h1bmsoeyAuLi5tZXNzYWdlIH0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgfVxuICAgIGVsc2UgaWYgKENoYXRNZXNzYWdlLmlzSW5zdGFuY2UobWVzc2FnZSkpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICByZXR1cm4gbmV3IENoYXRNZXNzYWdlQ2h1bmsoeyAuLi5tZXNzYWdlIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBtZXNzYWdlIHR5cGUuXCIpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyIsIl9pc1Rvb2xDYWxsIiwiQUlNZXNzYWdlIiwiQUlNZXNzYWdlQ2h1bmsiLCJpc0Jhc2VNZXNzYWdlIiwiX2lzTWVzc2FnZUZpZWxkV2l0aFJvbGUiLCJDaGF0TWVzc2FnZSIsIkNoYXRNZXNzYWdlQ2h1bmsiLCJGdW5jdGlvbk1lc3NhZ2UiLCJGdW5jdGlvbk1lc3NhZ2VDaHVuayIsIkh1bWFuTWVzc2FnZSIsIkh1bWFuTWVzc2FnZUNodW5rIiwiU3lzdGVtTWVzc2FnZSIsIlN5c3RlbU1lc3NhZ2VDaHVuayIsIlRvb2xNZXNzYWdlIiwiX2NvZXJjZVRvb2xDYWxsIiwidG9vbENhbGwiLCJpZCIsInR5cGUiLCJmdW5jdGlvbiIsImFyZ3VtZW50cyIsIm5hbWUiLCJhcmdzIiwiSlNPTiIsInBhcnNlIiwiaXNTZXJpYWxpemVkQ29uc3RydWN0b3IiLCJ4IiwibGMiLCJBcnJheSIsImlzQXJyYXkiLCJrd2FyZ3MiLCJfY29uc3RydWN0TWVzc2FnZUZyb21QYXJhbXMiLCJwYXJhbXMiLCJyZXN0IiwiY2xhc3NOYW1lIiwiYXQiLCJleHRyYWN0ZWRUeXBlIiwib3RoZXJQYXJhbXMiLCJ0b29sX2NhbGxzIiwicmF3VG9vbENhbGxzIiwib3RoZXIiLCJtYXAiLCJhZGRpdGlvbmFsX2t3YXJncyIsIl9fb3BlbmFpX3JvbGVfXyIsImNvbnRlbnQiLCJ0b29sX2NhbGxfaWQiLCJlcnJvciIsIkVycm9yIiwic3RyaW5naWZ5IiwiY29lcmNlTWVzc2FnZUxpa2VUb01lc3NhZ2UiLCJtZXNzYWdlTGlrZSIsInJvbGUiLCJnZXRCdWZmZXJTdHJpbmciLCJtZXNzYWdlcyIsImh1bWFuUHJlZml4IiwiYWlQcmVmaXgiLCJzdHJpbmdfbWVzc2FnZXMiLCJtIiwiX2dldFR5cGUiLCJuYW1lU3RyIiwicmVhZGFibGVDb250ZW50IiwicHVzaCIsImpvaW4iLCJtYXBWMU1lc3NhZ2VUb1N0b3JlZE1lc3NhZ2UiLCJtZXNzYWdlIiwiZGF0YSIsInVuZGVmaW5lZCIsInYxTWVzc2FnZSIsInRleHQiLCJtYXBTdG9yZWRNZXNzYWdlVG9DaGF0TWVzc2FnZSIsInN0b3JlZE1lc3NhZ2UiLCJtYXBTdG9yZWRNZXNzYWdlc1RvQ2hhdE1lc3NhZ2VzIiwibWFwQ2hhdE1lc3NhZ2VzVG9TdG9yZWRNZXNzYWdlcyIsInRvRGljdCIsImNvbnZlcnRUb0NodW5rIiwiYWlDaHVua0ZpZWxkcyIsInRvb2xfY2FsbF9jaHVua3MiLCJ0YyIsImluZGV4IiwiaXNJbnN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/base.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLMOutputParser: () => (/* binding */ BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* binding */ BaseOutputParser),\n/* harmony export */   OutputParserException: () => (/* binding */ OutputParserException)\n/* harmony export */ });\n/* harmony import */ var _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../errors/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/errors/index.js\");\n\n\n/**\n * Abstract base class for parsing the output of a Large Language Model\n * (LLM) call. It provides methods for parsing the result of an LLM call\n * and invoking the parser with a given input.\n */ class BaseLLMOutputParser extends _runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    /**\n     * Parses the result of an LLM call with a given prompt. By default, it\n     * simply calls `parseResult`.\n     * @param generations The generations from an LLM call.\n     * @param _prompt The prompt used in the LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ parseResultWithPrompt(generations, _prompt, callbacks) {\n        return this.parseResult(generations, callbacks);\n    }\n    _baseMessageToString(message) {\n        return typeof message.content === \"string\" ? message.content : this._baseMessageContentToString(message.content);\n    }\n    _baseMessageContentToString(content) {\n        return JSON.stringify(content);\n    }\n    /**\n     * Calls the parser with a given input and optional configuration options.\n     * If the input is a string, it creates a generation with the input as\n     * text and calls `parseResult`. If the input is a `BaseMessage`, it\n     * creates a generation with the input as a message and the content of the\n     * input as text, and then calls `parseResult`.\n     * @param input The input to the parser, which can be a string or a `BaseMessage`.\n     * @param options Optional configuration options.\n     * @returns A promise of the parsed output.\n     */ async invoke(input, options) {\n        if (typeof input === \"string\") {\n            return this._callWithConfig(async (input, options)=>this.parseResult([\n                    {\n                        text: input\n                    }\n                ], options?.callbacks), input, {\n                ...options,\n                runType: \"parser\"\n            });\n        } else {\n            return this._callWithConfig(async (input, options)=>this.parseResult([\n                    {\n                        message: input,\n                        text: this._baseMessageToString(input)\n                    }\n                ], options?.callbacks), input, {\n                ...options,\n                runType: \"parser\"\n            });\n        }\n    }\n}\n/**\n * Class to parse the output of an LLM call.\n */ class BaseOutputParser extends BaseLLMOutputParser {\n    parseResult(generations, callbacks) {\n        return this.parse(generations[0].text, callbacks);\n    }\n    async parseWithPrompt(text, _prompt, callbacks) {\n        return this.parse(text, callbacks);\n    }\n    /**\n     * Return the string type key uniquely identifying this class of parser\n     */ _type() {\n        throw new Error(\"_type not implemented\");\n    }\n}\n/**\n * Exception that output parsers should raise to signify a parsing error.\n *\n * This exists to differentiate parsing errors from other code or execution errors\n * that also may arise inside the output parser. OutputParserExceptions will be\n * available to catch and handle in ways to fix the parsing error, while other\n * errors will be raised.\n *\n * @param message - The error that's being re-raised or an error message.\n * @param llmOutput - String model output which is error-ing.\n * @param observation - String explanation of error which can be passed to a\n *     model to try and remediate the issue.\n * @param sendToLLM - Whether to send the observation and llm_output back to an Agent\n *     after an OutputParserException has been raised. This gives the underlying\n *     model driving the agent the context that the previous output was improperly\n *     structured, in the hopes that it will update the output to the correct\n *     format.\n */ class OutputParserException extends Error {\n    constructor(message, llmOutput, observation, sendToLLM = false){\n        super(message);\n        Object.defineProperty(this, \"llmOutput\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"sendToLLM\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.llmOutput = llmOutput;\n        this.observation = observation;\n        this.sendToLLM = sendToLLM;\n        if (sendToLLM) {\n            if (observation === undefined || llmOutput === undefined) {\n                throw new Error(\"Arguments 'observation' & 'llmOutput' are required if 'sendToLlm' is true\");\n            }\n        }\n        (0,_errors_index_js__WEBPACK_IMPORTED_MODULE_1__.addLangChainErrorFields)(this, \"OUTPUT_PARSING_FAILURE\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/bytes.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BytesOutputParser: () => (/* binding */ BytesOutputParser)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n/**\n * OutputParser that parses LLMResult into the top likely string and\n * encodes it into bytes.\n */ class BytesOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"bytes\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        // TODO: Figure out why explicit typing is needed\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"textEncoder\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new TextEncoder()\n        });\n    }\n    static lc_name() {\n        return \"BytesOutputParser\";\n    }\n    parse(text) {\n        return Promise.resolve(this.textEncoder.encode(text));\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkQ7QUFDM0Q7OztDQUdDLEdBQ00sTUFBTUMsMEJBQTBCRCxvRUFBeUJBO0lBQzVERSxhQUFjO1FBQ1YsS0FBSyxJQUFJQztRQUNUQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztnQkFBQztnQkFBa0I7Z0JBQWtCO2FBQVE7UUFDeEQ7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUI7WUFDM0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBLGlEQUFpRDtRQUNqRCw4REFBOEQ7UUFDOURMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZTtZQUN2Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxJQUFJQztRQUNmO0lBQ0o7SUFDQSxPQUFPQyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLE1BQU1DLElBQUksRUFBRTtRQUNSLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQyxJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDSjtJQUNuRDtJQUNBSyx3QkFBd0I7UUFDcEIsT0FBTztJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRfcGFyc2Vycy9ieXRlcy5qcz81MmU5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIgfSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcbi8qKlxuICogT3V0cHV0UGFyc2VyIHRoYXQgcGFyc2VzIExMTVJlc3VsdCBpbnRvIHRoZSB0b3AgbGlrZWx5IHN0cmluZyBhbmRcbiAqIGVuY29kZXMgaXQgaW50byBieXRlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJ5dGVzT3V0cHV0UGFyc2VyIGV4dGVuZHMgQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluX2NvcmVcIiwgXCJvdXRwdXRfcGFyc2Vyc1wiLCBcImJ5dGVzXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGV4cGxpY2l0IHR5cGluZyBpcyBuZWVkZWRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidGV4dEVuY29kZXJcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG5ldyBUZXh0RW5jb2RlcigpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzdGF0aWMgbGNfbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiQnl0ZXNPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgcGFyc2UodGV4dCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHRleHQpKTtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciIsIkJ5dGVzT3V0cHV0UGFyc2VyIiwiY29uc3RydWN0b3IiLCJhcmd1bWVudHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwiVGV4dEVuY29kZXIiLCJsY19uYW1lIiwicGFyc2UiLCJ0ZXh0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0ZXh0RW5jb2RlciIsImVuY29kZSIsImdldEZvcm1hdEluc3RydWN0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.AsymmetricStructuredOutputParser),\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_5__.BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseLLMOutputParser: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* reexport safe */ _transform_js__WEBPACK_IMPORTED_MODULE_5__.BaseTransformOutputParser),\n/* harmony export */   BytesOutputParser: () => (/* reexport safe */ _bytes_js__WEBPACK_IMPORTED_MODULE_1__.BytesOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.CustomListOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputParser: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.JsonOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* reexport safe */ _list_js__WEBPACK_IMPORTED_MODULE_2__.NumberedListOutputParser),\n/* harmony export */   OutputParserException: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException),\n/* harmony export */   StringOutputParser: () => (/* reexport safe */ _string_js__WEBPACK_IMPORTED_MODULE_3__.StringOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _structured_js__WEBPACK_IMPORTED_MODULE_4__.StructuredOutputParser),\n/* harmony export */   XMLOutputParser: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _json_js__WEBPACK_IMPORTED_MODULE_6__.parsePartialJson),\n/* harmony export */   parseXMLMarkdown: () => (/* reexport safe */ _xml_js__WEBPACK_IMPORTED_MODULE_7__.parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/bytes.js\");\n/* harmony import */ var _list_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./list.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./string.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js\");\n/* harmony import */ var _structured_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./structured.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _json_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./json.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\");\n/* harmony import */ var _xml_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./xml.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBMEI7QUFDQztBQUNEO0FBQ0U7QUFDSTtBQUNEO0FBQ0w7QUFDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL2luZGV4LmpzPzNhNjYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYnl0ZXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xpc3QuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3RydWN0dXJlZC5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9qc29uLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi94bWwuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/json.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputParser: () => (/* binding */ JsonOutputParser),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parsePartialJson)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/json.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json.js\");\n\n\n\n/**\n * Class for parsing the output of an LLM into a JSON object.\n */ class JsonOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"JsonOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [\n                {\n                    op: \"replace\",\n                    path: \"\",\n                    value: next\n                }\n            ];\n        }\n        return (0,_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__.compare)(prev, next);\n    }\n    // This should actually return Partial<T>, but there's no way\n    // to specify emitted chunks as instances separate from the main output type.\n    async parsePartialResult(generations) {\n        return (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonMarkdown)(generations[0].text);\n    }\n    async parse(text) {\n        return (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.parseJsonMarkdown)(text, JSON.parse);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvanNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBcUU7QUFDcEI7QUFDc0I7QUFDdkU7O0NBRUMsR0FDTSxNQUFNSSx5QkFBeUJKLDhFQUFtQ0E7SUFDckVLLGFBQWM7UUFDVixLQUFLLElBQUlDO1FBQ1RDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO2dCQUFDO2dCQUFrQjthQUFpQjtRQUMvQztRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLG1CQUFtQjtZQUMzQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO0lBQ0o7SUFDQSxPQUFPQyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0FDLE1BQU1DLElBQUksRUFBRUMsSUFBSSxFQUFFO1FBQ2QsSUFBSSxDQUFDQSxNQUFNO1lBQ1AsT0FBT0M7UUFDWDtRQUNBLElBQUksQ0FBQ0YsTUFBTTtZQUNQLE9BQU87Z0JBQUM7b0JBQUVHLElBQUk7b0JBQVdDLE1BQU07b0JBQUlQLE9BQU9JO2dCQUFLO2FBQUU7UUFDckQ7UUFDQSxPQUFPZiw2REFBT0EsQ0FBQ2MsTUFBTUM7SUFDekI7SUFDQSw2REFBNkQ7SUFDN0QsNkVBQTZFO0lBQzdFLE1BQU1JLG1CQUFtQkMsV0FBVyxFQUFFO1FBQ2xDLE9BQU9uQixpRUFBaUJBLENBQUNtQixXQUFXLENBQUMsRUFBRSxDQUFDQyxJQUFJO0lBQ2hEO0lBQ0EsTUFBTUMsTUFBTUQsSUFBSSxFQUFFO1FBQ2QsT0FBT3BCLGlFQUFpQkEsQ0FBQ29CLE1BQU1FLEtBQUtELEtBQUs7SUFDN0M7SUFDQUUsd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtBQUNKO0FBQytDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvanNvbi5qcz9hYmExIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIH0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG5pbXBvcnQgeyBjb21wYXJlIH0gZnJvbSBcIi4uL3V0aWxzL2pzb25fcGF0Y2guanNcIjtcbmltcG9ydCB7IHBhcnNlSnNvbk1hcmtkb3duLCBwYXJzZVBhcnRpYWxKc29uIH0gZnJvbSBcIi4uL3V0aWxzL2pzb24uanNcIjtcbi8qKlxuICogQ2xhc3MgZm9yIHBhcnNpbmcgdGhlIG91dHB1dCBvZiBhbiBMTE0gaW50byBhIEpTT04gb2JqZWN0LlxuICovXG5leHBvcnQgY2xhc3MgSnNvbk91dHB1dFBhcnNlciBleHRlbmRzIEJhc2VDdW11bGF0aXZlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfbmFtZXNwYWNlXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBbXCJsYW5nY2hhaW5fY29yZVwiLCBcIm91dHB1dF9wYXJzZXJzXCJdXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19zZXJpYWxpemFibGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBsY19uYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJKc29uT3V0cHV0UGFyc2VyXCI7XG4gICAgfVxuICAgIF9kaWZmKHByZXYsIG5leHQpIHtcbiAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJldikge1xuICAgICAgICAgICAgcmV0dXJuIFt7IG9wOiBcInJlcGxhY2VcIiwgcGF0aDogXCJcIiwgdmFsdWU6IG5leHQgfV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbXBhcmUocHJldiwgbmV4dCk7XG4gICAgfVxuICAgIC8vIFRoaXMgc2hvdWxkIGFjdHVhbGx5IHJldHVybiBQYXJ0aWFsPFQ+LCBidXQgdGhlcmUncyBubyB3YXlcbiAgICAvLyB0byBzcGVjaWZ5IGVtaXR0ZWQgY2h1bmtzIGFzIGluc3RhbmNlcyBzZXBhcmF0ZSBmcm9tIHRoZSBtYWluIG91dHB1dCB0eXBlLlxuICAgIGFzeW5jIHBhcnNlUGFydGlhbFJlc3VsdChnZW5lcmF0aW9ucykge1xuICAgICAgICByZXR1cm4gcGFyc2VKc29uTWFya2Rvd24oZ2VuZXJhdGlvbnNbMF0udGV4dCk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlKHRleHQpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSnNvbk1hcmtkb3duKHRleHQsIEpTT04ucGFyc2UpO1xuICAgIH1cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cbmV4cG9ydCB7IHBhcnNlUGFydGlhbEpzb24sIHBhcnNlSnNvbk1hcmtkb3duIH07XG4iXSwibmFtZXMiOlsiQmFzZUN1bXVsYXRpdmVUcmFuc2Zvcm1PdXRwdXRQYXJzZXIiLCJjb21wYXJlIiwicGFyc2VKc29uTWFya2Rvd24iLCJwYXJzZVBhcnRpYWxKc29uIiwiSnNvbk91dHB1dFBhcnNlciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxjX25hbWUiLCJfZGlmZiIsInByZXYiLCJuZXh0IiwidW5kZWZpbmVkIiwib3AiLCJwYXRoIiwicGFyc2VQYXJ0aWFsUmVzdWx0IiwiZ2VuZXJhdGlvbnMiLCJ0ZXh0IiwicGFyc2UiLCJKU09OIiwiZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/list.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* binding */ CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* binding */ CustomListOutputParser),\n/* harmony export */   ListOutputParser: () => (/* binding */ ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* binding */ MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* binding */ NumberedListOutputParser)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n\n/**\n * Class to parse the output of an LLM call to a list.\n * @augments BaseOutputParser\n */ class ListOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_1__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    async *_transform(inputGenerator) {\n        let buffer = \"\";\n        for await (const input of inputGenerator){\n            if (typeof input === \"string\") {\n                // add current chunk to buffer\n                buffer += input;\n            } else {\n                // extract message content and add to buffer\n                buffer += input.content;\n            }\n            // get parts in buffer\n            if (!this.re) {\n                const parts = await this.parse(buffer);\n                if (parts.length > 1) {\n                    // if there are multiple parts, yield all but the last one\n                    for (const part of parts.slice(0, -1)){\n                        yield [\n                            part\n                        ];\n                    }\n                    // keep the last part in the buffer\n                    buffer = parts[parts.length - 1];\n                }\n            } else {\n                // if there is a regex, get all matches\n                const matches = [\n                    ...buffer.matchAll(this.re)\n                ];\n                if (matches.length > 1) {\n                    let doneIdx = 0;\n                    // if there are multiple matches, yield all but the last one\n                    for (const match of matches.slice(0, -1)){\n                        yield [\n                            match[1]\n                        ];\n                        doneIdx += (match.index ?? 0) + match[0].length;\n                    }\n                    // keep the last match in the buffer\n                    buffer = buffer.slice(doneIdx);\n                }\n            }\n        }\n        // yield the last part\n        for (const part of (await this.parse(buffer))){\n            yield [\n                part\n            ];\n        }\n    }\n}\n/**\n * Class to parse the output of an LLM call as a comma-separated list.\n * @augments ListOutputParser\n */ class CommaSeparatedListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"CommaSeparatedListOutputParser\";\n    }\n    /**\n     * Parses the given text into an array of strings, using a comma as the\n     * separator. If the parsing fails, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each comma.\n     */ async parse(text) {\n        try {\n            return text.trim().split(\",\").map((s)=>s.trim());\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`, text);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CommaSeparatedListOutputParser.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return `Your response should be a list of comma separated values, eg: \\`foo, bar, baz\\``;\n    }\n}\n/**\n * Class to parse the output of an LLM call to a list with a specific length and separator.\n * @augments ListOutputParser\n */ class CustomListOutputParser extends ListOutputParser {\n    constructor({ length, separator }){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"length\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"separator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.length = length;\n        this.separator = separator || \",\";\n    }\n    /**\n     * Parses the given text into an array of strings, using the specified\n     * separator. If the parsing fails or the number of items in the list\n     * doesn't match the expected length, throws an OutputParserException.\n     * @param text The text to parse.\n     * @returns An array of strings obtained by splitting the input text at each occurrence of the specified separator.\n     */ async parse(text) {\n        try {\n            const items = text.trim().split(this.separator).map((s)=>s.trim());\n            if (this.length !== undefined && items.length !== this.length) {\n                throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Incorrect number of items. Expected ${this.length}, got ${items.length}.`);\n            }\n            return items;\n        } catch (e) {\n            if (Object.getPrototypeOf(e) === _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException.prototype) {\n                throw e;\n            }\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Could not parse output: ${text}`);\n        }\n    }\n    /**\n     * Provides instructions on the expected format of the response for the\n     * CustomListOutputParser, including the number of items and the\n     * separator.\n     * @returns A string containing instructions on the expected format of the response.\n     */ getFormatInstructions() {\n        return `Your response should be a list of ${this.length === undefined ? \"\" : `${this.length} `}items separated by \"${this.separator}\" (eg: \\`foo${this.separator} bar${this.separator} baz\\`)`;\n    }\n}\nclass NumberedListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /\\d+\\.\\s([^\\n]+)/g\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [\n            ...text.matchAll(this.re) ?? []\n        ].map((m)=>m[1]);\n    }\n}\nclass MarkdownListOutputParser extends ListOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"list\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"re\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: /^\\s*[-*]\\s([^\\n]+)$/gm\n        });\n    }\n    static lc_name() {\n        return \"NumberedListOutputParser\";\n    }\n    getFormatInstructions() {\n        return `Your response should be a numbered list with each item on a new line. For example: \\n\\n1. foo\\n\\n2. bar\\n\\n3. baz`;\n    }\n    async parse(text) {\n        return [\n            ...text.matchAll(this.re) ?? []\n        ].map((m)=>m[1]);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputKeyToolsParser: () => (/* reexport safe */ _json_output_tools_parsers_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputKeyToolsParser),\n/* harmony export */   JsonOutputToolsParser: () => (/* reexport safe */ _json_output_tools_parsers_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputToolsParser),\n/* harmony export */   convertLangChainToolCallToOpenAI: () => (/* reexport safe */ _json_output_tools_parsers_js__WEBPACK_IMPORTED_MODULE_0__.convertLangChainToolCallToOpenAI),\n/* harmony export */   makeInvalidToolCall: () => (/* reexport safe */ _json_output_tools_parsers_js__WEBPACK_IMPORTED_MODULE_0__.makeInvalidToolCall),\n/* harmony export */   parseToolCall: () => (/* reexport safe */ _json_output_tools_parsers_js__WEBPACK_IMPORTED_MODULE_0__.parseToolCall)\n/* harmony export */ });\n/* harmony import */ var _json_output_tools_parsers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./json_output_tools_parsers.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L291dHB1dF9wYXJzZXJzL29wZW5haV90b29scy9pbmRleC5qcz9hOTcwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2pzb25fb3V0cHV0X3Rvb2xzX3BhcnNlcnMuanNcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputKeyToolsParser: () => (/* binding */ JsonOutputKeyToolsParser),\n/* harmony export */   JsonOutputToolsParser: () => (/* binding */ JsonOutputToolsParser),\n/* harmony export */   convertLangChainToolCallToOpenAI: () => (/* binding */ convertLangChainToolCallToOpenAI),\n/* harmony export */   makeInvalidToolCall: () => (/* binding */ makeInvalidToolCall),\n/* harmony export */   parseToolCall: () => (/* binding */ parseToolCall)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _json_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../json.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/json.js\");\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _messages_ai_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../messages/ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n\n\n\n\nfunction parseToolCall(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCall, options) {\n    if (rawToolCall.function === undefined) {\n        return undefined;\n    }\n    let functionArgs;\n    if (options?.partial) {\n        try {\n            functionArgs = (0,_json_js__WEBPACK_IMPORTED_MODULE_1__.parsePartialJson)(rawToolCall.function.arguments ?? \"{}\");\n        } catch (e) {\n            return undefined;\n        }\n    } else {\n        try {\n            functionArgs = JSON.parse(rawToolCall.function.arguments);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException([\n                `Function \"${rawToolCall.function.name}\" arguments:`,\n                ``,\n                rawToolCall.function.arguments,\n                ``,\n                `are not valid JSON.`,\n                `Error: ${e.message}`\n            ].join(\"\\n\"));\n        }\n    }\n    const parsedToolCall = {\n        name: rawToolCall.function.name,\n        args: functionArgs,\n        type: \"tool_call\"\n    };\n    if (options?.returnId) {\n        parsedToolCall.id = rawToolCall.id;\n    }\n    return parsedToolCall;\n}\nfunction convertLangChainToolCallToOpenAI(toolCall) {\n    if (toolCall.id === undefined) {\n        throw new Error(`All OpenAI tool calls must have an \"id\" field.`);\n    }\n    return {\n        id: toolCall.id,\n        type: \"function\",\n        function: {\n            name: toolCall.name,\n            arguments: JSON.stringify(toolCall.args)\n        }\n    };\n}\nfunction makeInvalidToolCall(// eslint-disable-next-line @typescript-eslint/no-explicit-any\nrawToolCall, errorMsg) {\n    return {\n        name: rawToolCall.function?.name,\n        args: rawToolCall.function?.arguments,\n        id: rawToolCall.id,\n        error: errorMsg,\n        type: \"invalid_tool_call\"\n    };\n}\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object.\n */ class JsonOutputToolsParser extends _transform_js__WEBPACK_IMPORTED_MODULE_2__.BaseCumulativeTransformOutputParser {\n    static lc_name() {\n        return \"JsonOutputToolsParser\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_tools\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.returnId = fields?.returnId ?? this.returnId;\n    }\n    _diff() {\n        throw new Error(\"Not supported.\");\n    }\n    async parse() {\n        throw new Error(\"Not implemented.\");\n    }\n    async parseResult(generations) {\n        const result = await this.parsePartialResult(generations, false);\n        return result;\n    }\n    /**\n     * Parses the output and returns a JSON object. If `argsOnly` is true,\n     * only the arguments of the function call are returned.\n     * @param generations The output of the LLM to parse.\n     * @returns A JSON object representation of the function call or its arguments.\n     */ async parsePartialResult(generations, partial = true) {\n        const message = generations[0].message;\n        let toolCalls;\n        if ((0,_messages_ai_js__WEBPACK_IMPORTED_MODULE_3__.isAIMessage)(message) && message.tool_calls?.length) {\n            toolCalls = message.tool_calls.map((toolCall)=>{\n                const { id, ...rest } = toolCall;\n                if (!this.returnId) {\n                    return rest;\n                }\n                return {\n                    id,\n                    ...rest\n                };\n            });\n        } else if (message.additional_kwargs.tool_calls !== undefined) {\n            const rawToolCalls = JSON.parse(JSON.stringify(message.additional_kwargs.tool_calls));\n            toolCalls = rawToolCalls.map((rawToolCall)=>{\n                return parseToolCall(rawToolCall, {\n                    returnId: this.returnId,\n                    partial\n                });\n            });\n        }\n        if (!toolCalls) {\n            return [];\n        }\n        const parsedToolCalls = [];\n        for (const toolCall of toolCalls){\n            if (toolCall !== undefined) {\n                const backwardsCompatibleToolCall = {\n                    type: toolCall.name,\n                    args: toolCall.args,\n                    id: toolCall.id\n                };\n                parsedToolCalls.push(backwardsCompatibleToolCall);\n            }\n        }\n        return parsedToolCalls;\n    }\n}\n/**\n * Class for parsing the output of a tool-calling LLM into a JSON object if you are\n * expecting only a single tool to be called.\n */ class JsonOutputKeyToolsParser extends JsonOutputToolsParser {\n    static lc_name() {\n        return \"JsonOutputKeyToolsParser\";\n    }\n    constructor(params){\n        super(params);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"openai_tools\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"returnId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /** The type of tool calls to return. */ Object.defineProperty(this, \"keyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Whether to return only the first tool call. */ Object.defineProperty(this, \"returnSingle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"zodSchema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keyName = params.keyName;\n        this.returnSingle = params.returnSingle ?? this.returnSingle;\n        this.zodSchema = params.zodSchema;\n    }\n    async _validateResult(result) {\n        if (this.zodSchema === undefined) {\n            return result;\n        }\n        const zodParsedResult = await this.zodSchema.safeParseAsync(result);\n        if (zodParsedResult.success) {\n            return zodParsedResult.data;\n        } else {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException(`Failed to parse. Text: \"${JSON.stringify(result, null, 2)}\". Error: ${JSON.stringify(zodParsedResult.error.errors)}`, JSON.stringify(result, null, 2));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parsePartialResult(generations) {\n        const results = await super.parsePartialResult(generations);\n        const matchingResults = results.filter((result)=>result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!matchingResults.length) {\n            return undefined;\n        }\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result)=>result.args);\n        }\n        if (this.returnSingle) {\n            return returnedValues[0];\n        }\n        return returnedValues;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async parseResult(generations) {\n        const results = await super.parsePartialResult(generations, false);\n        const matchingResults = results.filter((result)=>result.type === this.keyName);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let returnedValues = matchingResults;\n        if (!matchingResults.length) {\n            return undefined;\n        }\n        if (!this.returnId) {\n            returnedValues = matchingResults.map((result)=>result.args);\n        }\n        if (this.returnSingle) {\n            return this._validateResult(returnedValues[0]);\n        }\n        const toolCallResults = await Promise.all(returnedValues.map((value)=>this._validateResult(value)));\n        return toolCallResults;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/json_output_tools_parsers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/string.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StringOutputParser: () => (/* binding */ StringOutputParser)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n\n/**\n * OutputParser that parses LLMResult into the top likely string.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n *\n * const chain = RunnableSequence.from([\n *   promptTemplate,\n *   new ChatOpenAI({}),\n *   new StringOutputParser(),\n * ]);\n *\n * const result = await chain.invoke({ topic: \"bears\" });\n * console.log(\"What do you call a bear with no teeth? A gummy bear!\");\n * ```\n */ class StringOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\",\n                \"string\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    static lc_name() {\n        return \"StrOutputParser\";\n    }\n    /**\n     * Parses a string output from an LLM call. This method is meant to be\n     * implemented by subclasses to define how a string output from an LLM\n     * should be parsed.\n     * @param text The string output from an LLM call.\n     * @param callbacks Optional callbacks.\n     * @returns A promise of the parsed output.\n     */ parse(text) {\n        return Promise.resolve(text);\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n    _textContentToString(content) {\n        return content.text;\n    }\n    _imageUrlContentToString(_content) {\n        throw new Error(`Cannot coerce a multimodal \"image_url\" message part into a string.`);\n    }\n    _messageContentComplexToString(content) {\n        switch(content.type){\n            case \"text\":\n            case \"text_delta\":\n                if (\"text\" in content) {\n                    // Type guard for MessageContentText\n                    return this._textContentToString(content);\n                }\n                break;\n            case \"image_url\":\n                if (\"image_url\" in content) {\n                    // Type guard for MessageContentImageUrl\n                    return this._imageUrlContentToString(content);\n                }\n                break;\n            default:\n                throw new Error(`Cannot coerce \"${content.type}\" message part into a string.`);\n        }\n        throw new Error(`Invalid content type: ${content.type}`);\n    }\n    _baseMessageContentToString(content) {\n        return content.reduce((acc, item)=>acc + this._messageContentComplexToString(item), \"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJEO0FBQzNEOzs7Ozs7Ozs7Ozs7Ozs7OztDQWlCQyxHQUNNLE1BQU1DLDJCQUEyQkQsb0VBQXlCQTtJQUM3REUsYUFBYztRQUNWLEtBQUssSUFBSUM7UUFDVEMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWtCO2dCQUFrQjthQUFTO1FBQ3pEO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPO1FBQ1g7SUFDSjtJQUNBLE9BQU9DLFVBQVU7UUFDYixPQUFPO0lBQ1g7SUFDQTs7Ozs7OztLQU9DLEdBQ0RDLE1BQU1DLElBQUksRUFBRTtRQUNSLE9BQU9DLFFBQVFDLE9BQU8sQ0FBQ0Y7SUFDM0I7SUFDQUcsd0JBQXdCO1FBQ3BCLE9BQU87SUFDWDtJQUNBQyxxQkFBcUJDLE9BQU8sRUFBRTtRQUMxQixPQUFPQSxRQUFRTCxJQUFJO0lBQ3ZCO0lBQ0FNLHlCQUF5QkMsUUFBUSxFQUFFO1FBQy9CLE1BQU0sSUFBSUMsTUFBTSxDQUFDLGtFQUFrRSxDQUFDO0lBQ3hGO0lBQ0FDLCtCQUErQkosT0FBTyxFQUFFO1FBQ3BDLE9BQVFBLFFBQVFLLElBQUk7WUFDaEIsS0FBSztZQUNMLEtBQUs7Z0JBQ0QsSUFBSSxVQUFVTCxTQUFTO29CQUNuQixvQ0FBb0M7b0JBQ3BDLE9BQU8sSUFBSSxDQUFDRCxvQkFBb0IsQ0FBQ0M7Z0JBQ3JDO2dCQUNBO1lBQ0osS0FBSztnQkFDRCxJQUFJLGVBQWVBLFNBQVM7b0JBQ3hCLHdDQUF3QztvQkFDeEMsT0FBTyxJQUFJLENBQUNDLHdCQUF3QixDQUFDRDtnQkFDekM7Z0JBQ0E7WUFDSjtnQkFDSSxNQUFNLElBQUlHLE1BQU0sQ0FBQyxlQUFlLEVBQUVILFFBQVFLLElBQUksQ0FBQyw2QkFBNkIsQ0FBQztRQUNyRjtRQUNBLE1BQU0sSUFBSUYsTUFBTSxDQUFDLHNCQUFzQixFQUFFSCxRQUFRSyxJQUFJLENBQUMsQ0FBQztJQUMzRDtJQUNBQyw0QkFBNEJOLE9BQU8sRUFBRTtRQUNqQyxPQUFPQSxRQUFRTyxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsT0FBU0QsTUFBTSxJQUFJLENBQUNKLDhCQUE4QixDQUFDSyxPQUFPO0lBQzFGO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9vdXRwdXRfcGFyc2Vycy9zdHJpbmcuanM/NmIyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlVHJhbnNmb3JtT3V0cHV0UGFyc2VyIH0gZnJvbSBcIi4vdHJhbnNmb3JtLmpzXCI7XG4vKipcbiAqIE91dHB1dFBhcnNlciB0aGF0IHBhcnNlcyBMTE1SZXN1bHQgaW50byB0aGUgdG9wIGxpa2VseSBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgcHJvbXB0VGVtcGxhdGUgPSBQcm9tcHRUZW1wbGF0ZS5mcm9tVGVtcGxhdGUoXG4gKiAgIFwiVGVsbCBtZSBhIGpva2UgYWJvdXQge3RvcGljfVwiLFxuICogKTtcbiAqXG4gKiBjb25zdCBjaGFpbiA9IFJ1bm5hYmxlU2VxdWVuY2UuZnJvbShbXG4gKiAgIHByb21wdFRlbXBsYXRlLFxuICogICBuZXcgQ2hhdE9wZW5BSSh7fSksXG4gKiAgIG5ldyBTdHJpbmdPdXRwdXRQYXJzZXIoKSxcbiAqIF0pO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNoYWluLmludm9rZSh7IHRvcGljOiBcImJlYXJzXCIgfSk7XG4gKiBjb25zb2xlLmxvZyhcIldoYXQgZG8geW91IGNhbGwgYSBiZWFyIHdpdGggbm8gdGVldGg/IEEgZ3VtbXkgYmVhciFcIik7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmluZ091dHB1dFBhcnNlciBleHRlbmRzIEJhc2VUcmFuc2Zvcm1PdXRwdXRQYXJzZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJsY19uYW1lc3BhY2VcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFtcImxhbmdjaGFpbl9jb3JlXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJzdHJpbmdcIl1cbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX3NlcmlhbGl6YWJsZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlN0ck91dHB1dFBhcnNlclwiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzdHJpbmcgb3V0cHV0IGZyb20gYW4gTExNIGNhbGwuIFRoaXMgbWV0aG9kIGlzIG1lYW50IHRvIGJlXG4gICAgICogaW1wbGVtZW50ZWQgYnkgc3ViY2xhc3NlcyB0byBkZWZpbmUgaG93IGEgc3RyaW5nIG91dHB1dCBmcm9tIGFuIExMTVxuICAgICAqIHNob3VsZCBiZSBwYXJzZWQuXG4gICAgICogQHBhcmFtIHRleHQgVGhlIHN0cmluZyBvdXRwdXQgZnJvbSBhbiBMTE0gY2FsbC5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIE9wdGlvbmFsIGNhbGxiYWNrcy5cbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2Ugb2YgdGhlIHBhcnNlZCBvdXRwdXQuXG4gICAgICovXG4gICAgcGFyc2UodGV4dCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRleHQpO1xuICAgIH1cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBfdGV4dENvbnRlbnRUb1N0cmluZyhjb250ZW50KSB7XG4gICAgICAgIHJldHVybiBjb250ZW50LnRleHQ7XG4gICAgfVxuICAgIF9pbWFnZVVybENvbnRlbnRUb1N0cmluZyhfY29udGVudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb2VyY2UgYSBtdWx0aW1vZGFsIFwiaW1hZ2VfdXJsXCIgbWVzc2FnZSBwYXJ0IGludG8gYSBzdHJpbmcuYCk7XG4gICAgfVxuICAgIF9tZXNzYWdlQ29udGVudENvbXBsZXhUb1N0cmluZyhjb250ZW50KSB7XG4gICAgICAgIHN3aXRjaCAoY29udGVudC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxuICAgICAgICAgICAgY2FzZSBcInRleHRfZGVsdGFcIjpcbiAgICAgICAgICAgICAgICBpZiAoXCJ0ZXh0XCIgaW4gY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUeXBlIGd1YXJkIGZvciBNZXNzYWdlQ29udGVudFRleHRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHRDb250ZW50VG9TdHJpbmcoY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImltYWdlX3VybFwiOlxuICAgICAgICAgICAgICAgIGlmIChcImltYWdlX3VybFwiIGluIGNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHlwZSBndWFyZCBmb3IgTWVzc2FnZUNvbnRlbnRJbWFnZVVybFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW1hZ2VVcmxDb250ZW50VG9TdHJpbmcoY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb2VyY2UgXCIke2NvbnRlbnQudHlwZX1cIiBtZXNzYWdlIHBhcnQgaW50byBhIHN0cmluZy5gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgY29udGVudCB0eXBlOiAke2NvbnRlbnQudHlwZX1gKTtcbiAgICB9XG4gICAgX2Jhc2VNZXNzYWdlQ29udGVudFRvU3RyaW5nKGNvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQucmVkdWNlKChhY2MsIGl0ZW0pID0+IGFjYyArIHRoaXMuX21lc3NhZ2VDb250ZW50Q29tcGxleFRvU3RyaW5nKGl0ZW0pLCBcIlwiKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVRyYW5zZm9ybU91dHB1dFBhcnNlciIsIlN0cmluZ091dHB1dFBhcnNlciIsImNvbnN0cnVjdG9yIiwiYXJndW1lbnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImxjX25hbWUiLCJwYXJzZSIsInRleHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldEZvcm1hdEluc3RydWN0aW9ucyIsIl90ZXh0Q29udGVudFRvU3RyaW5nIiwiY29udGVudCIsIl9pbWFnZVVybENvbnRlbnRUb1N0cmluZyIsIl9jb250ZW50IiwiRXJyb3IiLCJfbWVzc2FnZUNvbnRlbnRDb21wbGV4VG9TdHJpbmciLCJ0eXBlIiwiX2Jhc2VNZXNzYWdlQ29udGVudFRvU3RyaW5nIiwicmVkdWNlIiwiYWNjIiwiaXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/string.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/structured.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* binding */ AsymmetricStructuredOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* binding */ JsonMarkdownStructuredOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* binding */ StructuredOutputParser)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n\n\n\nclass StructuredOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    static lc_name() {\n        return \"StructuredOutputParser\";\n    }\n    toJSON() {\n        return this.toJSONNotImplemented();\n    }\n    constructor(schema){\n        super(schema);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: schema\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain\",\n                \"output_parsers\",\n                \"structured\"\n            ]\n        });\n    }\n    /**\n     * Creates a new StructuredOutputParser from a Zod schema.\n     * @param schema The Zod schema which the output should match\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    /**\n     * Creates a new StructuredOutputParser from a set of names and\n     * descriptions.\n     * @param schemas An object where each key is a name and each value is a description\n     * @returns A new instance of StructuredOutputParser.\n     */ static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n    /**\n     * Returns a markdown code snippet with a JSON object formatted according\n     * to the schema.\n     * @param options Optional. The options for formatting the instructions\n     * @returns A markdown code snippet with a JSON object formatted according to the schema.\n     */ getFormatInstructions() {\n        return `You must format your output as a JSON value that adheres to a given \"JSON Schema\" instance.\n\n\"JSON Schema\" is a declarative language that allows you to annotate and validate JSON documents.\n\nFor example, the example \"JSON Schema\" instance {{\"properties\": {{\"foo\": {{\"description\": \"a list of test words\", \"type\": \"array\", \"items\": {{\"type\": \"string\"}}}}}}, \"required\": [\"foo\"]}}}}\nwould match an object with one required property, \"foo\". The \"type\" property specifies \"foo\" must be an \"array\", and the \"description\" property semantically describes it as \"a list of test words\". The items within \"foo\" must be strings.\nThus, the object {{\"foo\": [\"bar\", \"baz\"]}} is a well-formatted instance of this example \"JSON Schema\". The object {{\"properties\": {{\"foo\": [\"bar\", \"baz\"]}}}} is not well-formatted.\n\nYour output will be parsed and type-checked according to the provided schema instance, so make sure all fields in your output match the schema exactly and there are no trailing commas!\n\nHere is the JSON Schema instance your output must adhere to. Include the enclosing markdown codeblock:\n\\`\\`\\`json\n${JSON.stringify((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema))}\n\\`\\`\\`\n`;\n    }\n    /**\n     * Parses the given text according to the schema.\n     * @param text The text to parse\n     * @returns The parsed output.\n     */ async parse(text) {\n        try {\n            const json = text.includes(\"```\") ? text.trim().split(/```(?:json)?/)[1] : text.trim();\n            const escapedJson = json.replace(/\"([^\"\\\\]*(\\\\.[^\"\\\\]*)*)\"/g, (_match, capturedGroup)=>{\n                const escapedInsideQuotes = capturedGroup.replace(/\\n/g, \"\\\\n\");\n                return `\"${escapedInsideQuotes}\"`;\n            }).replace(/\\n/g, \"\");\n            return await this.schema.parseAsync(JSON.parse(escapedJson));\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n    }\n}\n/**\n * A specific type of `StructuredOutputParser` that parses JSON data\n * formatted as a markdown code snippet.\n */ class JsonMarkdownStructuredOutputParser extends StructuredOutputParser {\n    static lc_name() {\n        return \"JsonMarkdownStructuredOutputParser\";\n    }\n    getFormatInstructions(options) {\n        const interpolationDepth = options?.interpolationDepth ?? 1;\n        if (interpolationDepth < 1) {\n            throw new Error(\"f string interpolation depth must be at least 1\");\n        }\n        return `Return a markdown code snippet with a JSON object formatted to look like:\\n\\`\\`\\`json\\n${this._schemaToInstruction((0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(this.schema)).replaceAll(\"{\", \"{\".repeat(interpolationDepth)).replaceAll(\"}\", \"}\".repeat(interpolationDepth))}\\n\\`\\`\\``;\n    }\n    _schemaToInstruction(schemaInput, indent = 2) {\n        const schema = schemaInput;\n        if (\"type\" in schema) {\n            let nullable = false;\n            let type;\n            if (Array.isArray(schema.type)) {\n                const nullIdx = schema.type.findIndex((type)=>type === \"null\");\n                if (nullIdx !== -1) {\n                    nullable = true;\n                    schema.type.splice(nullIdx, 1);\n                }\n                type = schema.type.join(\" | \");\n            } else {\n                type = schema.type;\n            }\n            if (schema.type === \"object\" && schema.properties) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                const properties = Object.entries(schema.properties).map(([key, value])=>{\n                    const isOptional = schema.required?.includes(key) ? \"\" : \" (optional)\";\n                    return `${\" \".repeat(indent)}\"${key}\": ${this._schemaToInstruction(value, indent + 2)}${isOptional}`;\n                }).join(\"\\n\");\n                return `{\\n${properties}\\n${\" \".repeat(indent - 2)}}${description}`;\n            }\n            if (schema.type === \"array\" && schema.items) {\n                const description = schema.description ? ` // ${schema.description}` : \"\";\n                return `array[\\n${\" \".repeat(indent)}${this._schemaToInstruction(schema.items, indent + 2)}\\n${\" \".repeat(indent - 2)}] ${description}`;\n            }\n            const isNullable = nullable ? \" (nullable)\" : \"\";\n            const description = schema.description ? ` // ${schema.description}` : \"\";\n            return `${type}${description}${isNullable}`;\n        }\n        if (\"anyOf\" in schema) {\n            return schema.anyOf.map((s)=>this._schemaToInstruction(s, indent)).join(`\\n${\" \".repeat(indent - 2)}`);\n        }\n        throw new Error(\"unsupported schema type\");\n    }\n    static fromZodSchema(schema) {\n        return new this(schema);\n    }\n    static fromNamesAndDescriptions(schemas) {\n        const zodSchema = zod__WEBPACK_IMPORTED_MODULE_2__.z.object(Object.fromEntries(Object.entries(schemas).map(([name, description])=>[\n                name,\n                zod__WEBPACK_IMPORTED_MODULE_2__.z.string().describe(description)\n            ])));\n        return new this(zodSchema);\n    }\n}\n/**\n * A type of `StructuredOutputParser` that handles asymmetric input and\n * output schemas.\n */ class AsymmetricStructuredOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    constructor({ inputSchema }){\n        super(...arguments);\n        Object.defineProperty(this, \"structuredInputParser\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.structuredInputParser = new JsonMarkdownStructuredOutputParser(inputSchema);\n    }\n    async parse(text) {\n        let parsedInput;\n        try {\n            parsedInput = await this.structuredInputParser.parse(text);\n        } catch (e) {\n            throw new _base_js__WEBPACK_IMPORTED_MODULE_1__.OutputParserException(`Failed to parse. Text: \"${text}\". Error: ${e}`, text);\n        }\n        return this.outputProcessor(parsedInput);\n    }\n    getFormatInstructions() {\n        return this.structuredInputParser.getFormatInstructions();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RydWN0dXJlZC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0I7QUFDOEI7QUFDZTtBQUM5RCxNQUFNSSwrQkFBK0JGLHNEQUFnQkE7SUFDeEQsT0FBT0csVUFBVTtRQUNiLE9BQU87SUFDWDtJQUNBQyxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUNDLG9CQUFvQjtJQUNwQztJQUNBQyxZQUFZQyxNQUFNLENBQUU7UUFDaEIsS0FBSyxDQUFDQTtRQUNOQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU9OO1FBQ1g7UUFDQUMsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87Z0JBQUM7Z0JBQWE7Z0JBQWtCO2FBQWE7UUFDeEQ7SUFDSjtJQUNBOzs7O0tBSUMsR0FDRCxPQUFPQyxjQUFjUCxNQUFNLEVBQUU7UUFDekIsT0FBTyxJQUFJLElBQUksQ0FBQ0E7SUFDcEI7SUFDQTs7Ozs7S0FLQyxHQUNELE9BQU9RLHlCQUF5QkMsT0FBTyxFQUFFO1FBQ3JDLE1BQU1DLFlBQVluQixrQ0FBQ0EsQ0FBQ29CLE1BQU0sQ0FBQ1YsT0FBT1csV0FBVyxDQUFDWCxPQUFPWSxPQUFPLENBQUNKLFNBQVNLLEdBQUcsQ0FBQyxDQUFDLENBQUNDLE1BQU1DLFlBQVksR0FBSztnQkFBQ0Q7Z0JBQU14QixrQ0FBQ0EsQ0FBQzBCLE1BQU0sR0FBR0MsUUFBUSxDQUFDRjthQUFhO1FBQzNJLE9BQU8sSUFBSSxJQUFJLENBQUNOO0lBQ3BCO0lBQ0E7Ozs7O0tBS0MsR0FDRFMsd0JBQXdCO1FBQ3BCLE9BQU8sQ0FBQzs7Ozs7Ozs7Ozs7O0FBWWhCLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQzdCLG1FQUFlQSxDQUFDLElBQUksQ0FBQ1EsTUFBTSxHQUFHOztBQUUvQyxDQUFDO0lBQ0c7SUFDQTs7OztLQUlDLEdBQ0QsTUFBTXNCLE1BQU1DLElBQUksRUFBRTtRQUNkLElBQUk7WUFDQSxNQUFNQyxPQUFPRCxLQUFLRSxRQUFRLENBQUMsU0FDckJGLEtBQUtHLElBQUksR0FBR0MsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUFFLEdBQ3BDSixLQUFLRyxJQUFJO1lBQ2YsTUFBTUUsY0FBY0osS0FDZkssT0FBTyxDQUFDLDZCQUE2QixDQUFDQyxRQUFRQztnQkFDL0MsTUFBTUMsc0JBQXNCRCxjQUFjRixPQUFPLENBQUMsT0FBTztnQkFDekQsT0FBTyxDQUFDLENBQUMsRUFBRUcsb0JBQW9CLENBQUMsQ0FBQztZQUNyQyxHQUNLSCxPQUFPLENBQUMsT0FBTztZQUNwQixPQUFPLE1BQU0sSUFBSSxDQUFDN0IsTUFBTSxDQUFDaUMsVUFBVSxDQUFDYixLQUFLRSxLQUFLLENBQUNNO1FBQ25ELEVBQ0EsT0FBT00sR0FBRztZQUNOLE1BQU0sSUFBSXhDLDJEQUFxQkEsQ0FBQyxDQUFDLHdCQUF3QixFQUFFNkIsS0FBSyxVQUFVLEVBQUVXLEVBQUUsQ0FBQyxFQUFFWDtRQUNyRjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxNQUFNWSwyQ0FBMkN4QztJQUNwRCxPQUFPQyxVQUFVO1FBQ2IsT0FBTztJQUNYO0lBQ0F1QixzQkFBc0JpQixPQUFPLEVBQUU7UUFDM0IsTUFBTUMscUJBQXFCRCxTQUFTQyxzQkFBc0I7UUFDMUQsSUFBSUEscUJBQXFCLEdBQUc7WUFDeEIsTUFBTSxJQUFJQyxNQUFNO1FBQ3BCO1FBQ0EsT0FBTyxDQUFDLHVGQUF1RixFQUFFLElBQUksQ0FBQ0Msb0JBQW9CLENBQUMvQyxtRUFBZUEsQ0FBQyxJQUFJLENBQUNRLE1BQU0sR0FDakp3QyxVQUFVLENBQUMsS0FBSyxJQUFJQyxNQUFNLENBQUNKLHFCQUMzQkcsVUFBVSxDQUFDLEtBQUssSUFBSUMsTUFBTSxDQUFDSixxQkFBcUIsUUFBUSxDQUFDO0lBQ2xFO0lBQ0FFLHFCQUFxQkcsV0FBVyxFQUFFQyxTQUFTLENBQUMsRUFBRTtRQUMxQyxNQUFNM0MsU0FBUzBDO1FBQ2YsSUFBSSxVQUFVMUMsUUFBUTtZQUNsQixJQUFJNEMsV0FBVztZQUNmLElBQUlDO1lBQ0osSUFBSUMsTUFBTUMsT0FBTyxDQUFDL0MsT0FBTzZDLElBQUksR0FBRztnQkFDNUIsTUFBTUcsVUFBVWhELE9BQU82QyxJQUFJLENBQUNJLFNBQVMsQ0FBQyxDQUFDSixPQUFTQSxTQUFTO2dCQUN6RCxJQUFJRyxZQUFZLENBQUMsR0FBRztvQkFDaEJKLFdBQVc7b0JBQ1g1QyxPQUFPNkMsSUFBSSxDQUFDSyxNQUFNLENBQUNGLFNBQVM7Z0JBQ2hDO2dCQUNBSCxPQUFPN0MsT0FBTzZDLElBQUksQ0FBQ00sSUFBSSxDQUFDO1lBQzVCLE9BQ0s7Z0JBQ0ROLE9BQU83QyxPQUFPNkMsSUFBSTtZQUN0QjtZQUNBLElBQUk3QyxPQUFPNkMsSUFBSSxLQUFLLFlBQVk3QyxPQUFPb0QsVUFBVSxFQUFFO2dCQUMvQyxNQUFNcEMsY0FBY2hCLE9BQU9nQixXQUFXLEdBQ2hDLENBQUMsSUFBSSxFQUFFaEIsT0FBT2dCLFdBQVcsQ0FBQyxDQUFDLEdBQzNCO2dCQUNOLE1BQU1vQyxhQUFhbkQsT0FBT1ksT0FBTyxDQUFDYixPQUFPb0QsVUFBVSxFQUM5Q3RDLEdBQUcsQ0FBQyxDQUFDLENBQUN1QyxLQUFLL0MsTUFBTTtvQkFDbEIsTUFBTWdELGFBQWF0RCxPQUFPdUQsUUFBUSxFQUFFOUIsU0FBUzRCLE9BQ3ZDLEtBQ0E7b0JBQ04sT0FBTyxDQUFDLEVBQUUsSUFBSVosTUFBTSxDQUFDRSxRQUFRLENBQUMsRUFBRVUsSUFBSSxHQUFHLEVBQUUsSUFBSSxDQUFDZCxvQkFBb0IsQ0FBQ2pDLE9BQU9xQyxTQUFTLEdBQUcsRUFBRVcsV0FBVyxDQUFDO2dCQUN4RyxHQUNLSCxJQUFJLENBQUM7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsRUFBRUMsV0FBVyxFQUFFLEVBQUUsSUFBSVgsTUFBTSxDQUFDRSxTQUFTLEdBQUcsQ0FBQyxFQUFFM0IsWUFBWSxDQUFDO1lBQ3ZFO1lBQ0EsSUFBSWhCLE9BQU82QyxJQUFJLEtBQUssV0FBVzdDLE9BQU93RCxLQUFLLEVBQUU7Z0JBQ3pDLE1BQU14QyxjQUFjaEIsT0FBT2dCLFdBQVcsR0FDaEMsQ0FBQyxJQUFJLEVBQUVoQixPQUFPZ0IsV0FBVyxDQUFDLENBQUMsR0FDM0I7Z0JBQ04sT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJeUIsTUFBTSxDQUFDRSxRQUFRLEVBQUUsSUFBSSxDQUFDSixvQkFBb0IsQ0FBQ3ZDLE9BQU93RCxLQUFLLEVBQUViLFNBQVMsR0FBRyxFQUFFLEVBQUUsSUFBSUYsTUFBTSxDQUFDRSxTQUFTLEdBQUcsRUFBRSxFQUFFM0IsWUFBWSxDQUFDO1lBQzNJO1lBQ0EsTUFBTXlDLGFBQWFiLFdBQVcsZ0JBQWdCO1lBQzlDLE1BQU01QixjQUFjaEIsT0FBT2dCLFdBQVcsR0FBRyxDQUFDLElBQUksRUFBRWhCLE9BQU9nQixXQUFXLENBQUMsQ0FBQyxHQUFHO1lBQ3ZFLE9BQU8sQ0FBQyxFQUFFNkIsS0FBSyxFQUFFN0IsWUFBWSxFQUFFeUMsV0FBVyxDQUFDO1FBQy9DO1FBQ0EsSUFBSSxXQUFXekQsUUFBUTtZQUNuQixPQUFPQSxPQUFPMEQsS0FBSyxDQUNkNUMsR0FBRyxDQUFDLENBQUM2QyxJQUFNLElBQUksQ0FBQ3BCLG9CQUFvQixDQUFDb0IsR0FBR2hCLFNBQ3hDUSxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSVYsTUFBTSxDQUFDRSxTQUFTLEdBQUcsQ0FBQztRQUMzQztRQUNBLE1BQU0sSUFBSUwsTUFBTTtJQUNwQjtJQUNBLE9BQU8vQixjQUFjUCxNQUFNLEVBQUU7UUFDekIsT0FBTyxJQUFJLElBQUksQ0FBQ0E7SUFDcEI7SUFDQSxPQUFPUSx5QkFBeUJDLE9BQU8sRUFBRTtRQUNyQyxNQUFNQyxZQUFZbkIsa0NBQUNBLENBQUNvQixNQUFNLENBQUNWLE9BQU9XLFdBQVcsQ0FBQ1gsT0FBT1ksT0FBTyxDQUFDSixTQUFTSyxHQUFHLENBQUMsQ0FBQyxDQUFDQyxNQUFNQyxZQUFZLEdBQUs7Z0JBQUNEO2dCQUFNeEIsa0NBQUNBLENBQUMwQixNQUFNLEdBQUdDLFFBQVEsQ0FBQ0Y7YUFBYTtRQUMzSSxPQUFPLElBQUksSUFBSSxDQUFDTjtJQUNwQjtBQUNKO0FBQ0E7OztDQUdDLEdBQ00sTUFBTWtELHlDQUF5Q25FLHNEQUFnQkE7SUFDbEVNLFlBQVksRUFBRThELFdBQVcsRUFBRSxDQUFFO1FBQ3pCLEtBQUssSUFBSUM7UUFDVDdELE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUseUJBQXlCO1lBQ2pEQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUN5RCxxQkFBcUIsR0FBRyxJQUFJNUIsbUNBQW1DMEI7SUFDeEU7SUFDQSxNQUFNdkMsTUFBTUMsSUFBSSxFQUFFO1FBQ2QsSUFBSXlDO1FBQ0osSUFBSTtZQUNBQSxjQUFjLE1BQU0sSUFBSSxDQUFDRCxxQkFBcUIsQ0FBQ3pDLEtBQUssQ0FBQ0M7UUFDekQsRUFDQSxPQUFPVyxHQUFHO1lBQ04sTUFBTSxJQUFJeEMsMkRBQXFCQSxDQUFDLENBQUMsd0JBQXdCLEVBQUU2QixLQUFLLFVBQVUsRUFBRVcsRUFBRSxDQUFDLEVBQUVYO1FBQ3JGO1FBQ0EsT0FBTyxJQUFJLENBQUMwQyxlQUFlLENBQUNEO0lBQ2hDO0lBQ0E3Qyx3QkFBd0I7UUFDcEIsT0FBTyxJQUFJLENBQUM0QyxxQkFBcUIsQ0FBQzVDLHFCQUFxQjtJQUMzRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvc3RydWN0dXJlZC5qcz80ZjUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5pbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEsIH0gZnJvbSBcInpvZC10by1qc29uLXNjaGVtYVwiO1xuaW1wb3J0IHsgQmFzZU91dHB1dFBhcnNlciwgT3V0cHV0UGFyc2VyRXhjZXB0aW9uLCB9IGZyb20gXCIuL2Jhc2UuanNcIjtcbmV4cG9ydCBjbGFzcyBTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGV4dGVuZHMgQmFzZU91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIlN0cnVjdHVyZWRPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b0pTT05Ob3RJbXBsZW1lbnRlZCgpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoc2NoZW1hKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic2NoZW1hXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBzY2hlbWFcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImxjX25hbWVzcGFjZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW1wibGFuZ2NoYWluXCIsIFwib3V0cHV0X3BhcnNlcnNcIiwgXCJzdHJ1Y3R1cmVkXCJdXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFN0cnVjdHVyZWRPdXRwdXRQYXJzZXIgZnJvbSBhIFpvZCBzY2hlbWEuXG4gICAgICogQHBhcmFtIHNjaGVtYSBUaGUgWm9kIHNjaGVtYSB3aGljaCB0aGUgb3V0cHV0IHNob3VsZCBtYXRjaFxuICAgICAqIEByZXR1cm5zIEEgbmV3IGluc3RhbmNlIG9mIFN0cnVjdHVyZWRPdXRwdXRQYXJzZXIuXG4gICAgICovXG4gICAgc3RhdGljIGZyb21ab2RTY2hlbWEoc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhzY2hlbWEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFN0cnVjdHVyZWRPdXRwdXRQYXJzZXIgZnJvbSBhIHNldCBvZiBuYW1lcyBhbmRcbiAgICAgKiBkZXNjcmlwdGlvbnMuXG4gICAgICogQHBhcmFtIHNjaGVtYXMgQW4gb2JqZWN0IHdoZXJlIGVhY2gga2V5IGlzIGEgbmFtZSBhbmQgZWFjaCB2YWx1ZSBpcyBhIGRlc2NyaXB0aW9uXG4gICAgICogQHJldHVybnMgQSBuZXcgaW5zdGFuY2Ugb2YgU3RydWN0dXJlZE91dHB1dFBhcnNlci5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbU5hbWVzQW5kRGVzY3JpcHRpb25zKHNjaGVtYXMpIHtcbiAgICAgICAgY29uc3Qgem9kU2NoZW1hID0gei5vYmplY3QoT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHNjaGVtYXMpLm1hcCgoW25hbWUsIGRlc2NyaXB0aW9uXSkgPT4gW25hbWUsIHouc3RyaW5nKCkuZGVzY3JpYmUoZGVzY3JpcHRpb24pXSkpKTtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHpvZFNjaGVtYSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBtYXJrZG93biBjb2RlIHNuaXBwZXQgd2l0aCBhIEpTT04gb2JqZWN0IGZvcm1hdHRlZCBhY2NvcmRpbmdcbiAgICAgKiB0byB0aGUgc2NoZW1hLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsLiBUaGUgb3B0aW9ucyBmb3IgZm9ybWF0dGluZyB0aGUgaW5zdHJ1Y3Rpb25zXG4gICAgICogQHJldHVybnMgQSBtYXJrZG93biBjb2RlIHNuaXBwZXQgd2l0aCBhIEpTT04gb2JqZWN0IGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gdGhlIHNjaGVtYS5cbiAgICAgKi9cbiAgICBnZXRGb3JtYXRJbnN0cnVjdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiBgWW91IG11c3QgZm9ybWF0IHlvdXIgb3V0cHV0IGFzIGEgSlNPTiB2YWx1ZSB0aGF0IGFkaGVyZXMgdG8gYSBnaXZlbiBcIkpTT04gU2NoZW1hXCIgaW5zdGFuY2UuXG5cblwiSlNPTiBTY2hlbWFcIiBpcyBhIGRlY2xhcmF0aXZlIGxhbmd1YWdlIHRoYXQgYWxsb3dzIHlvdSB0byBhbm5vdGF0ZSBhbmQgdmFsaWRhdGUgSlNPTiBkb2N1bWVudHMuXG5cbkZvciBleGFtcGxlLCB0aGUgZXhhbXBsZSBcIkpTT04gU2NoZW1hXCIgaW5zdGFuY2Uge3tcInByb3BlcnRpZXNcIjoge3tcImZvb1wiOiB7e1wiZGVzY3JpcHRpb25cIjogXCJhIGxpc3Qgb2YgdGVzdCB3b3Jkc1wiLCBcInR5cGVcIjogXCJhcnJheVwiLCBcIml0ZW1zXCI6IHt7XCJ0eXBlXCI6IFwic3RyaW5nXCJ9fX19fX0sIFwicmVxdWlyZWRcIjogW1wiZm9vXCJdfX19fVxud291bGQgbWF0Y2ggYW4gb2JqZWN0IHdpdGggb25lIHJlcXVpcmVkIHByb3BlcnR5LCBcImZvb1wiLiBUaGUgXCJ0eXBlXCIgcHJvcGVydHkgc3BlY2lmaWVzIFwiZm9vXCIgbXVzdCBiZSBhbiBcImFycmF5XCIsIGFuZCB0aGUgXCJkZXNjcmlwdGlvblwiIHByb3BlcnR5IHNlbWFudGljYWxseSBkZXNjcmliZXMgaXQgYXMgXCJhIGxpc3Qgb2YgdGVzdCB3b3Jkc1wiLiBUaGUgaXRlbXMgd2l0aGluIFwiZm9vXCIgbXVzdCBiZSBzdHJpbmdzLlxuVGh1cywgdGhlIG9iamVjdCB7e1wiZm9vXCI6IFtcImJhclwiLCBcImJhelwiXX19IGlzIGEgd2VsbC1mb3JtYXR0ZWQgaW5zdGFuY2Ugb2YgdGhpcyBleGFtcGxlIFwiSlNPTiBTY2hlbWFcIi4gVGhlIG9iamVjdCB7e1wicHJvcGVydGllc1wiOiB7e1wiZm9vXCI6IFtcImJhclwiLCBcImJhelwiXX19fX0gaXMgbm90IHdlbGwtZm9ybWF0dGVkLlxuXG5Zb3VyIG91dHB1dCB3aWxsIGJlIHBhcnNlZCBhbmQgdHlwZS1jaGVja2VkIGFjY29yZGluZyB0byB0aGUgcHJvdmlkZWQgc2NoZW1hIGluc3RhbmNlLCBzbyBtYWtlIHN1cmUgYWxsIGZpZWxkcyBpbiB5b3VyIG91dHB1dCBtYXRjaCB0aGUgc2NoZW1hIGV4YWN0bHkgYW5kIHRoZXJlIGFyZSBubyB0cmFpbGluZyBjb21tYXMhXG5cbkhlcmUgaXMgdGhlIEpTT04gU2NoZW1hIGluc3RhbmNlIHlvdXIgb3V0cHV0IG11c3QgYWRoZXJlIHRvLiBJbmNsdWRlIHRoZSBlbmNsb3NpbmcgbWFya2Rvd24gY29kZWJsb2NrOlxuXFxgXFxgXFxganNvblxuJHtKU09OLnN0cmluZ2lmeSh6b2RUb0pzb25TY2hlbWEodGhpcy5zY2hlbWEpKX1cblxcYFxcYFxcYFxuYDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBnaXZlbiB0ZXh0IGFjY29yZGluZyB0byB0aGUgc2NoZW1hLlxuICAgICAqIEBwYXJhbSB0ZXh0IFRoZSB0ZXh0IHRvIHBhcnNlXG4gICAgICogQHJldHVybnMgVGhlIHBhcnNlZCBvdXRwdXQuXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QganNvbiA9IHRleHQuaW5jbHVkZXMoXCJgYGBcIilcbiAgICAgICAgICAgICAgICA/IHRleHQudHJpbSgpLnNwbGl0KC9gYGAoPzpqc29uKT8vKVsxXVxuICAgICAgICAgICAgICAgIDogdGV4dC50cmltKCk7XG4gICAgICAgICAgICBjb25zdCBlc2NhcGVkSnNvbiA9IGpzb25cbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXCIoW15cIlxcXFxdKihcXFxcLlteXCJcXFxcXSopKilcIi9nLCAoX21hdGNoLCBjYXB0dXJlZEdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXNjYXBlZEluc2lkZVF1b3RlcyA9IGNhcHR1cmVkR3JvdXAucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcIiR7ZXNjYXBlZEluc2lkZVF1b3Rlc31cImA7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcIik7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5zY2hlbWEucGFyc2VBc3luYyhKU09OLnBhcnNlKGVzY2FwZWRKc29uKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPdXRwdXRQYXJzZXJFeGNlcHRpb24oYEZhaWxlZCB0byBwYXJzZS4gVGV4dDogXCIke3RleHR9XCIuIEVycm9yOiAke2V9YCwgdGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgc3BlY2lmaWMgdHlwZSBvZiBgU3RydWN0dXJlZE91dHB1dFBhcnNlcmAgdGhhdCBwYXJzZXMgSlNPTiBkYXRhXG4gKiBmb3JtYXR0ZWQgYXMgYSBtYXJrZG93biBjb2RlIHNuaXBwZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGV4dGVuZHMgU3RydWN0dXJlZE91dHB1dFBhcnNlciB7XG4gICAgc3RhdGljIGxjX25hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkpzb25NYXJrZG93blN0cnVjdHVyZWRPdXRwdXRQYXJzZXJcIjtcbiAgICB9XG4gICAgZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdGlvbkRlcHRoID0gb3B0aW9ucz8uaW50ZXJwb2xhdGlvbkRlcHRoID8/IDE7XG4gICAgICAgIGlmIChpbnRlcnBvbGF0aW9uRGVwdGggPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmIHN0cmluZyBpbnRlcnBvbGF0aW9uIGRlcHRoIG11c3QgYmUgYXQgbGVhc3QgMVwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYFJldHVybiBhIG1hcmtkb3duIGNvZGUgc25pcHBldCB3aXRoIGEgSlNPTiBvYmplY3QgZm9ybWF0dGVkIHRvIGxvb2sgbGlrZTpcXG5cXGBcXGBcXGBqc29uXFxuJHt0aGlzLl9zY2hlbWFUb0luc3RydWN0aW9uKHpvZFRvSnNvblNjaGVtYSh0aGlzLnNjaGVtYSkpXG4gICAgICAgICAgICAucmVwbGFjZUFsbChcIntcIiwgXCJ7XCIucmVwZWF0KGludGVycG9sYXRpb25EZXB0aCkpXG4gICAgICAgICAgICAucmVwbGFjZUFsbChcIn1cIiwgXCJ9XCIucmVwZWF0KGludGVycG9sYXRpb25EZXB0aCkpfVxcblxcYFxcYFxcYGA7XG4gICAgfVxuICAgIF9zY2hlbWFUb0luc3RydWN0aW9uKHNjaGVtYUlucHV0LCBpbmRlbnQgPSAyKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IHNjaGVtYUlucHV0O1xuICAgICAgICBpZiAoXCJ0eXBlXCIgaW4gc2NoZW1hKSB7XG4gICAgICAgICAgICBsZXQgbnVsbGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCB0eXBlO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbnVsbElkeCA9IHNjaGVtYS50eXBlLmZpbmRJbmRleCgodHlwZSkgPT4gdHlwZSA9PT0gXCJudWxsXCIpO1xuICAgICAgICAgICAgICAgIGlmIChudWxsSWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBudWxsYWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYS50eXBlLnNwbGljZShudWxsSWR4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHlwZSA9IHNjaGVtYS50eXBlLmpvaW4oXCIgfCBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gc2NoZW1hLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NoZW1hLnR5cGUgPT09IFwib2JqZWN0XCIgJiYgc2NoZW1hLnByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHNjaGVtYS5kZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICA/IGAgLy8gJHtzY2hlbWEuZGVzY3JpcHRpb259YFxuICAgICAgICAgICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IE9iamVjdC5lbnRyaWVzKHNjaGVtYS5wcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNPcHRpb25hbCA9IHNjaGVtYS5yZXF1aXJlZD8uaW5jbHVkZXMoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6IFwiIChvcHRpb25hbClcIjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke1wiIFwiLnJlcGVhdChpbmRlbnQpfVwiJHtrZXl9XCI6ICR7dGhpcy5fc2NoZW1hVG9JbnN0cnVjdGlvbih2YWx1ZSwgaW5kZW50ICsgMil9JHtpc09wdGlvbmFsfWA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCJcXG5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGB7XFxuJHtwcm9wZXJ0aWVzfVxcbiR7XCIgXCIucmVwZWF0KGluZGVudCAtIDIpfX0ke2Rlc2NyaXB0aW9ufWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NoZW1hLnR5cGUgPT09IFwiYXJyYXlcIiAmJiBzY2hlbWEuaXRlbXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHNjaGVtYS5kZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICA/IGAgLy8gJHtzY2hlbWEuZGVzY3JpcHRpb259YFxuICAgICAgICAgICAgICAgICAgICA6IFwiXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBhcnJheVtcXG4ke1wiIFwiLnJlcGVhdChpbmRlbnQpfSR7dGhpcy5fc2NoZW1hVG9JbnN0cnVjdGlvbihzY2hlbWEuaXRlbXMsIGluZGVudCArIDIpfVxcbiR7XCIgXCIucmVwZWF0KGluZGVudCAtIDIpfV0gJHtkZXNjcmlwdGlvbn1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNOdWxsYWJsZSA9IG51bGxhYmxlID8gXCIgKG51bGxhYmxlKVwiIDogXCJcIjtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gc2NoZW1hLmRlc2NyaXB0aW9uID8gYCAvLyAke3NjaGVtYS5kZXNjcmlwdGlvbn1gIDogXCJcIjtcbiAgICAgICAgICAgIHJldHVybiBgJHt0eXBlfSR7ZGVzY3JpcHRpb259JHtpc051bGxhYmxlfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwiYW55T2ZcIiBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlbWEuYW55T2ZcbiAgICAgICAgICAgICAgICAubWFwKChzKSA9PiB0aGlzLl9zY2hlbWFUb0luc3RydWN0aW9uKHMsIGluZGVudCkpXG4gICAgICAgICAgICAgICAgLmpvaW4oYFxcbiR7XCIgXCIucmVwZWF0KGluZGVudCAtIDIpfWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIHNjaGVtYSB0eXBlXCIpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVpvZFNjaGVtYShzY2hlbWEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tTmFtZXNBbmREZXNjcmlwdGlvbnMoc2NoZW1hcykge1xuICAgICAgICBjb25zdCB6b2RTY2hlbWEgPSB6Lm9iamVjdChPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoc2NoZW1hcykubWFwKChbbmFtZSwgZGVzY3JpcHRpb25dKSA9PiBbbmFtZSwgei5zdHJpbmcoKS5kZXNjcmliZShkZXNjcmlwdGlvbildKSkpO1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoem9kU2NoZW1hKTtcbiAgICB9XG59XG4vKipcbiAqIEEgdHlwZSBvZiBgU3RydWN0dXJlZE91dHB1dFBhcnNlcmAgdGhhdCBoYW5kbGVzIGFzeW1tZXRyaWMgaW5wdXQgYW5kXG4gKiBvdXRwdXQgc2NoZW1hcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFzeW1tZXRyaWNTdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIGV4dGVuZHMgQmFzZU91dHB1dFBhcnNlciB7XG4gICAgY29uc3RydWN0b3IoeyBpbnB1dFNjaGVtYSB9KSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0cnVjdHVyZWRJbnB1dFBhcnNlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0cnVjdHVyZWRJbnB1dFBhcnNlciA9IG5ldyBKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyKGlucHV0U2NoZW1hKTtcbiAgICB9XG4gICAgYXN5bmMgcGFyc2UodGV4dCkge1xuICAgICAgICBsZXQgcGFyc2VkSW5wdXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwYXJzZWRJbnB1dCA9IGF3YWl0IHRoaXMuc3RydWN0dXJlZElucHV0UGFyc2VyLnBhcnNlKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT3V0cHV0UGFyc2VyRXhjZXB0aW9uKGBGYWlsZWQgdG8gcGFyc2UuIFRleHQ6IFwiJHt0ZXh0fVwiLiBFcnJvcjogJHtlfWAsIHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm91dHB1dFByb2Nlc3NvcihwYXJzZWRJbnB1dCk7XG4gICAgfVxuICAgIGdldEZvcm1hdEluc3RydWN0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RydWN0dXJlZElucHV0UGFyc2VyLmdldEZvcm1hdEluc3RydWN0aW9ucygpO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJ6Iiwiem9kVG9Kc29uU2NoZW1hIiwiQmFzZU91dHB1dFBhcnNlciIsIk91dHB1dFBhcnNlckV4Y2VwdGlvbiIsIlN0cnVjdHVyZWRPdXRwdXRQYXJzZXIiLCJsY19uYW1lIiwidG9KU09OIiwidG9KU09OTm90SW1wbGVtZW50ZWQiLCJjb25zdHJ1Y3RvciIsInNjaGVtYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJmcm9tWm9kU2NoZW1hIiwiZnJvbU5hbWVzQW5kRGVzY3JpcHRpb25zIiwic2NoZW1hcyIsInpvZFNjaGVtYSIsIm9iamVjdCIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInN0cmluZyIsImRlc2NyaWJlIiwiZ2V0Rm9ybWF0SW5zdHJ1Y3Rpb25zIiwiSlNPTiIsInN0cmluZ2lmeSIsInBhcnNlIiwidGV4dCIsImpzb24iLCJpbmNsdWRlcyIsInRyaW0iLCJzcGxpdCIsImVzY2FwZWRKc29uIiwicmVwbGFjZSIsIl9tYXRjaCIsImNhcHR1cmVkR3JvdXAiLCJlc2NhcGVkSW5zaWRlUXVvdGVzIiwicGFyc2VBc3luYyIsImUiLCJKc29uTWFya2Rvd25TdHJ1Y3R1cmVkT3V0cHV0UGFyc2VyIiwib3B0aW9ucyIsImludGVycG9sYXRpb25EZXB0aCIsIkVycm9yIiwiX3NjaGVtYVRvSW5zdHJ1Y3Rpb24iLCJyZXBsYWNlQWxsIiwicmVwZWF0Iiwic2NoZW1hSW5wdXQiLCJpbmRlbnQiLCJudWxsYWJsZSIsInR5cGUiLCJBcnJheSIsImlzQXJyYXkiLCJudWxsSWR4IiwiZmluZEluZGV4Iiwic3BsaWNlIiwiam9pbiIsInByb3BlcnRpZXMiLCJrZXkiLCJpc09wdGlvbmFsIiwicmVxdWlyZWQiLCJpdGVtcyIsImlzTnVsbGFibGUiLCJhbnlPZiIsInMiLCJBc3ltbWV0cmljU3RydWN0dXJlZE91dHB1dFBhcnNlciIsImlucHV0U2NoZW1hIiwiYXJndW1lbnRzIiwic3RydWN0dXJlZElucHV0UGFyc2VyIiwicGFyc2VkSW5wdXQiLCJvdXRwdXRQcm9jZXNzb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/structured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/transform.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* binding */ BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* binding */ BaseTransformOutputParser)\n/* harmony export */ });\n/* harmony import */ var _cfworker_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cfworker/json-schema */ \"(rsc)/./node_modules/@cfworker/json-schema/dist/esm/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/base.js\");\n/* harmony import */ var _messages_base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/base.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n\n\n\n\n/**\n * Class to parse the output of an LLM call that also allows streaming inputs.\n */ class BaseTransformOutputParser extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseOutputParser {\n    async *_transform(inputGenerator) {\n        for await (const chunk of inputGenerator){\n            if (typeof chunk === \"string\") {\n                yield this.parseResult([\n                    {\n                        text: chunk\n                    }\n                ]);\n            } else {\n                yield this.parseResult([\n                    {\n                        message: chunk,\n                        text: this._baseMessageToString(chunk)\n                    }\n                ]);\n            }\n        }\n    }\n    /**\n     * Transforms an asynchronous generator of input into an asynchronous\n     * generator of parsed output.\n     * @param inputGenerator An asynchronous generator of input.\n     * @param options A configuration object.\n     * @returns An asynchronous generator of parsed output.\n     */ async *transform(inputGenerator, options) {\n        yield* this._transformStreamWithConfig(inputGenerator, this._transform.bind(this), {\n            ...options,\n            runType: \"parser\"\n        });\n    }\n}\n/**\n * A base class for output parsers that can handle streaming input. It\n * extends the `BaseTransformOutputParser` class and provides a method for\n * converting parsed outputs into a diff format.\n */ class BaseCumulativeTransformOutputParser extends BaseTransformOutputParser {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"diff\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.diff = fields?.diff ?? this.diff;\n    }\n    async *_transform(inputGenerator) {\n        let prevParsed;\n        let accGen;\n        for await (const chunk of inputGenerator){\n            if (typeof chunk !== \"string\" && typeof chunk.content !== \"string\") {\n                throw new Error(\"Cannot handle non-string output.\");\n            }\n            let chunkGen;\n            if ((0,_messages_base_js__WEBPACK_IMPORTED_MODULE_2__.isBaseMessageChunk)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_4__.ChatGenerationChunk({\n                    message: chunk,\n                    text: chunk.content\n                });\n            } else if ((0,_messages_base_js__WEBPACK_IMPORTED_MODULE_2__.isBaseMessage)(chunk)) {\n                if (typeof chunk.content !== \"string\") {\n                    throw new Error(\"Cannot handle non-string message output.\");\n                }\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_4__.ChatGenerationChunk({\n                    message: (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_3__.convertToChunk)(chunk),\n                    text: chunk.content\n                });\n            } else {\n                chunkGen = new _outputs_js__WEBPACK_IMPORTED_MODULE_4__.GenerationChunk({\n                    text: chunk\n                });\n            }\n            if (accGen === undefined) {\n                accGen = chunkGen;\n            } else {\n                accGen = accGen.concat(chunkGen);\n            }\n            const parsed = await this.parsePartialResult([\n                accGen\n            ]);\n            if (parsed !== undefined && parsed !== null && !(0,_cfworker_json_schema__WEBPACK_IMPORTED_MODULE_0__.deepCompareStrict)(parsed, prevParsed)) {\n                if (this.diff) {\n                    yield this._diff(prevParsed, parsed);\n                } else {\n                    yield parsed;\n                }\n                prevParsed = parsed;\n            }\n        }\n    }\n    getFormatInstructions() {\n        return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/output_parsers/xml.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   XMLOutputParser: () => (/* binding */ XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* binding */ XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseXMLMarkdown: () => (/* binding */ parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _transform_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transform.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/transform.js\");\n/* harmony import */ var _utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/json_patch.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\");\n/* harmony import */ var _utils_sax_js_sax_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/sax-js/sax.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js\");\n\n\n\nconst XML_FORMAT_INSTRUCTIONS = `The output should be formatted as a XML file.\n1. Output should conform to the tags below. \n2. If tags are not given, make them on your own.\n3. Remember to always open and close all the tags.\n\nAs an example, for the tags [\"foo\", \"bar\", \"baz\"]:\n1. String \"<foo>\\n   <bar>\\n      <baz></baz>\\n   </bar>\\n</foo>\" is a well-formatted instance of the schema. \n2. String \"<foo>\\n   <bar>\\n   </foo>\" is a badly-formatted instance.\n3. String \"<foo>\\n   <tag>\\n   </tag>\\n</foo>\" is a badly-formatted instance.\n\nHere are the output tags:\n\\`\\`\\`\n{tags}\n\\`\\`\\``;\nclass XMLOutputParser extends _transform_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"output_parsers\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.tags = fields?.tags;\n    }\n    static lc_name() {\n        return \"XMLOutputParser\";\n    }\n    _diff(prev, next) {\n        if (!next) {\n            return undefined;\n        }\n        if (!prev) {\n            return [\n                {\n                    op: \"replace\",\n                    path: \"\",\n                    value: next\n                }\n            ];\n        }\n        return (0,_utils_json_patch_js__WEBPACK_IMPORTED_MODULE_1__.compare)(prev, next);\n    }\n    async parsePartialResult(generations) {\n        return parseXMLMarkdown(generations[0].text);\n    }\n    async parse(text) {\n        return parseXMLMarkdown(text);\n    }\n    getFormatInstructions() {\n        const withTags = !!(this.tags && this.tags.length > 0);\n        return withTags ? XML_FORMAT_INSTRUCTIONS.replace(\"{tags}\", this.tags?.join(\", \") ?? \"\") : XML_FORMAT_INSTRUCTIONS;\n    }\n}\nconst strip = (text)=>text.split(\"\\n\").map((line)=>line.replace(/^\\s+/, \"\")).join(\"\\n\").trim();\nconst parseParsedResult = (input)=>{\n    if (Object.keys(input).length === 0) {\n        return {};\n    }\n    const result = {};\n    if (input.children.length > 0) {\n        result[input.name] = input.children.map(parseParsedResult);\n        return result;\n    } else {\n        result[input.name] = input.text ?? undefined;\n        return result;\n    }\n};\nfunction parseXMLMarkdown(s) {\n    const cleanedString = strip(s);\n    const parser = _utils_sax_js_sax_js__WEBPACK_IMPORTED_MODULE_2__.sax.parser(true);\n    let parsedResult = {};\n    const elementStack = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onopentag = (node)=>{\n        const element = {\n            name: node.name,\n            attributes: node.attributes,\n            children: [],\n            text: \"\",\n            isSelfClosing: node.isSelfClosing\n        };\n        if (elementStack.length > 0) {\n            const parentElement = elementStack[elementStack.length - 1];\n            parentElement.children.push(element);\n        } else {\n            parsedResult = element;\n        }\n        if (!node.isSelfClosing) {\n            elementStack.push(element);\n        }\n    };\n    parser.onclosetag = ()=>{\n        if (elementStack.length > 0) {\n            const lastElement = elementStack.pop();\n            if (elementStack.length === 0 && lastElement) {\n                parsedResult = lastElement;\n            }\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.ontext = (text)=>{\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.text += text;\n        }\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parser.onattribute = (attr)=>{\n        if (elementStack.length > 0) {\n            const currentElement = elementStack[elementStack.length - 1];\n            currentElement.attributes[attr.name] = attr.value;\n        }\n    };\n    // Try to find XML string within triple backticks.\n    const match = /```(xml)?(.*)```/s.exec(cleanedString);\n    const xmlString = match ? match[2] : cleanedString;\n    parser.write(xmlString).close();\n    // Remove the XML declaration if present\n    if (parsedResult && parsedResult.name === \"?xml\") {\n        parsedResult = parsedResult.children[0];\n    }\n    return parseParsedResult(parsedResult);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/output_parsers/xml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/outputs.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/core/dist/outputs.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* binding */ ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* binding */ GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* binding */ RUN_KEY)\n/* harmony export */ });\nconst RUN_KEY = \"__run\";\n/**\n * Chunk of a single generation. Used for streaming.\n */ class GenerationChunk {\n    constructor(fields){\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"generationInfo\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.text = fields.text;\n        this.generationInfo = fields.generationInfo;\n    }\n    concat(chunk) {\n        return new GenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            }\n        });\n    }\n}\nclass ChatGenerationChunk extends GenerationChunk {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = fields.message;\n    }\n    concat(chunk) {\n        return new ChatGenerationChunk({\n            text: this.text + chunk.text,\n            generationInfo: {\n                ...this.generationInfo,\n                ...chunk.generationInfo\n            },\n            message: this.message.concat(chunk.message)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBTyxNQUFNQSxVQUFVLFFBQVE7QUFDL0I7O0NBRUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsOERBQThEO1FBQzlETCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQjtZQUMxQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDQyxJQUFJLEdBQUdQLE9BQU9PLElBQUk7UUFDdkIsSUFBSSxDQUFDQyxjQUFjLEdBQUdSLE9BQU9RLGNBQWM7SUFDL0M7SUFDQUMsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJWixnQkFBZ0I7WUFDdkJTLE1BQU0sSUFBSSxDQUFDQSxJQUFJLEdBQUdHLE1BQU1ILElBQUk7WUFDNUJDLGdCQUFnQjtnQkFDWixHQUFHLElBQUksQ0FBQ0EsY0FBYztnQkFDdEIsR0FBR0UsTUFBTUYsY0FBYztZQUMzQjtRQUNKO0lBQ0o7QUFDSjtBQUNPLE1BQU1HLDRCQUE0QmI7SUFDckNDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsV0FBVztZQUNuQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDTSxPQUFPLEdBQUdaLE9BQU9ZLE9BQU87SUFDakM7SUFDQUgsT0FBT0MsS0FBSyxFQUFFO1FBQ1YsT0FBTyxJQUFJQyxvQkFBb0I7WUFDM0JKLE1BQU0sSUFBSSxDQUFDQSxJQUFJLEdBQUdHLE1BQU1ILElBQUk7WUFDNUJDLGdCQUFnQjtnQkFDWixHQUFHLElBQUksQ0FBQ0EsY0FBYztnQkFDdEIsR0FBR0UsTUFBTUYsY0FBYztZQUMzQjtZQUNBSSxTQUFTLElBQUksQ0FBQ0EsT0FBTyxDQUFDSCxNQUFNLENBQUNDLE1BQU1FLE9BQU87UUFDOUM7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvb3V0cHV0cy5qcz9kNzgwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBSVU5fS0VZID0gXCJfX3J1blwiO1xuLyoqXG4gKiBDaHVuayBvZiBhIHNpbmdsZSBnZW5lcmF0aW9uLiBVc2VkIGZvciBzdHJlYW1pbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmF0aW9uQ2h1bmsge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0ZXh0XCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdlbmVyYXRpb25JbmZvXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGV4dCA9IGZpZWxkcy50ZXh0O1xuICAgICAgICB0aGlzLmdlbmVyYXRpb25JbmZvID0gZmllbGRzLmdlbmVyYXRpb25JbmZvO1xuICAgIH1cbiAgICBjb25jYXQoY2h1bmspIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmF0aW9uQ2h1bmsoe1xuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0ICsgY2h1bmsudGV4dCxcbiAgICAgICAgICAgIGdlbmVyYXRpb25JbmZvOiB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgICAgICAuLi5jaHVuay5nZW5lcmF0aW9uSW5mbyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBDaGF0R2VuZXJhdGlvbkNodW5rIGV4dGVuZHMgR2VuZXJhdGlvbkNodW5rIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibWVzc2FnZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBmaWVsZHMubWVzc2FnZTtcbiAgICB9XG4gICAgY29uY2F0KGNodW5rKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hhdEdlbmVyYXRpb25DaHVuayh7XG4gICAgICAgICAgICB0ZXh0OiB0aGlzLnRleHQgKyBjaHVuay50ZXh0LFxuICAgICAgICAgICAgZ2VuZXJhdGlvbkluZm86IHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmdlbmVyYXRpb25JbmZvLFxuICAgICAgICAgICAgICAgIC4uLmNodW5rLmdlbmVyYXRpb25JbmZvLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZS5jb25jYXQoY2h1bmsubWVzc2FnZSksXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJSVU5fS0VZIiwiR2VuZXJhdGlvbkNodW5rIiwiY29uc3RydWN0b3IiLCJmaWVsZHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIiwidGV4dCIsImdlbmVyYXRpb25JbmZvIiwiY29uY2F0IiwiY2h1bmsiLCJDaGF0R2VuZXJhdGlvbkNodW5rIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/prompt_values.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/prompt_values.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePromptValue: () => (/* binding */ BasePromptValue),\n/* harmony export */   ChatPromptValue: () => (/* binding */ ChatPromptValue),\n/* harmony export */   ImagePromptValue: () => (/* binding */ ImagePromptValue),\n/* harmony export */   StringPromptValue: () => (/* binding */ StringPromptValue)\n/* harmony export */ });\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _messages_human_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./messages/human.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/human.js\");\n/* harmony import */ var _messages_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./messages/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/utils.js\");\n\n\n\n/**\n * Base PromptValue class. All prompt values should extend this class.\n */ class BasePromptValue extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_0__.Serializable {\n}\n/**\n * Represents a prompt value as a string. It extends the BasePromptValue\n * class and overrides the toString and toChatMessages methods.\n */ class StringPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"StringPromptValue\";\n    }\n    constructor(value){\n        super({\n            value\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.value = value;\n    }\n    toString() {\n        return this.value;\n    }\n    toChatMessages() {\n        return [\n            new _messages_human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage(this.value)\n        ];\n    }\n}\n/**\n * Class that represents a chat prompt value. It extends the\n * BasePromptValue and includes an array of BaseMessage instances.\n */ class ChatPromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ChatPromptValue\";\n    }\n    constructor(fields){\n        if (Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                messages: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"messages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.messages = fields.messages;\n    }\n    toString() {\n        return (0,_messages_utils_js__WEBPACK_IMPORTED_MODULE_2__.getBufferString)(this.messages);\n    }\n    toChatMessages() {\n        return this.messages;\n    }\n}\n/**\n * Class that represents an image prompt value. It extends the\n * BasePromptValue and includes an ImageURL instance.\n */ class ImagePromptValue extends BasePromptValue {\n    static lc_name() {\n        return \"ImagePromptValue\";\n    }\n    constructor(fields){\n        if (!(\"imageUrl\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                imageUrl: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"prompt_values\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"imageUrl\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** @ignore */ Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.imageUrl = fields.imageUrl;\n    }\n    toString() {\n        return this.imageUrl.url;\n    }\n    toChatMessages() {\n        return [\n            new _messages_human_js__WEBPACK_IMPORTED_MODULE_1__.HumanMessage({\n                content: [\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            detail: this.imageUrl.detail,\n                            url: this.imageUrl.url\n                        }\n                    }\n                ]\n            })\n        ];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/prompt_values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/base.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/base.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Runnable: () => (/* binding */ Runnable),\n/* harmony export */   RunnableAssign: () => (/* binding */ RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* binding */ RunnableBinding),\n/* harmony export */   RunnableEach: () => (/* binding */ RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* binding */ RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* binding */ RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* binding */ RunnableParallel),\n/* harmony export */   RunnablePick: () => (/* binding */ RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* binding */ RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* binding */ RunnableSequence),\n/* harmony export */   RunnableToolLike: () => (/* binding */ RunnableToolLike),\n/* harmony export */   RunnableTraceable: () => (/* binding */ RunnableTraceable),\n/* harmony export */   RunnableWithFallbacks: () => (/* binding */ RunnableWithFallbacks),\n/* harmony export */   _coerceToDict: () => (/* binding */ _coerceToDict),\n/* harmony export */   _coerceToRunnable: () => (/* binding */ _coerceToRunnable),\n/* harmony export */   convertRunnableToTool: () => (/* binding */ convertRunnableToTool)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! langsmith/singletons/traceable */ \"(rsc)/./node_modules/langsmith/singletons/traceable.js\");\n/* harmony import */ var _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tracers/log_stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\");\n/* harmony import */ var _tracers_event_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tracers/event_stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.js\");\n/* harmony import */ var _load_serializable_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../load/serializable.js */ \"(rsc)/./node_modules/@langchain/core/dist/load/serializable.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _utils_signal_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/signal.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/signal.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n/* harmony import */ var _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../tracers/root_listener.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./graph.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js\");\n/* harmony import */ var _wrappers_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./wrappers.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.js\");\n/* harmony import */ var _iter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./iter.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/iter.js\");\n/* harmony import */ var _tools_utils_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../tools/utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && // eslint-disable-next-line no-instanceof/no-instanceof\n    !(value instanceof Date) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\n/**\n * A Runnable is a generic unit of work that can be invoked, batched, streamed, and/or\n * transformed.\n */ class Runnable extends _load_serializable_js__WEBPACK_IMPORTED_MODULE_4__.Serializable {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"lc_runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    getName(suffix) {\n        const name = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.name ?? this.constructor.lc_name() ?? this.constructor.name;\n        return suffix ? `${name}${suffix}` : name;\n    }\n    /**\n     * Bind arguments to a Runnable, returning a new Runnable.\n     * @param kwargs\n     * @returns A new RunnableBinding that, when invoked, will apply the bound args.\n     */ bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            kwargs,\n            config: {}\n        });\n    }\n    /**\n     * Return a new Runnable that maps a list of inputs to a list of outputs,\n     * by calling invoke() with each input.\n     */ map() {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableEach({\n            bound: this\n        });\n    }\n    /**\n     * Add retry logic to an existing runnable.\n     * @param kwargs\n     * @returns A new RunnableRetry that, when invoked, will retry according to the parameters.\n     */ withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableRetry({\n            bound: this,\n            kwargs: {},\n            config: {},\n            maxAttemptNumber: fields?.stopAfterAttempt,\n            ...fields\n        });\n    }\n    /**\n     * Bind config to a Runnable, returning a new Runnable.\n     * @param config New configuration parameters to attach to the new runnable.\n     * @returns A new RunnableBinding with a config matching what's passed.\n     */ withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config,\n            kwargs: {}\n        });\n    }\n    /**\n     * Create a new runnable from the current one that will try invoking\n     * other passed fallback runnables if the initial invocation fails.\n     * @param fields.fallbacks Other runnables to call if the runnable errors.\n     * @returns A new RunnableWithFallbacks.\n     */ withFallbacks(fields) {\n        const fallbacks = Array.isArray(fields) ? fields : fields.fallbacks;\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableWithFallbacks({\n            runnable: this,\n            fallbacks\n        });\n    }\n    _getOptionsList(options, length = 0) {\n        if (Array.isArray(options) && options.length !== length) {\n            throw new Error(`Passed \"options\" must be an array with the same length as the inputs, but got ${options.length} options for ${length} inputs`);\n        }\n        if (Array.isArray(options)) {\n            return options.map(_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig);\n        }\n        if (length > 1 && !Array.isArray(options) && options.runId) {\n            console.warn(\"Provided runId will be used only for the first element of the batch.\");\n            const subsequent = Object.fromEntries(Object.entries(options).filter(([key])=>key !== \"runId\"));\n            return Array.from({\n                length\n            }, (_, i)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(i === 0 ? options : subsequent));\n        }\n        return Array.from({\n            length\n        }, ()=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = configList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const caller = new _utils_async_caller_js__WEBPACK_IMPORTED_MODULE_8__.AsyncCaller({\n            maxConcurrency,\n            onFailedAttempt: (e)=>{\n                throw e;\n            }\n        });\n        const batchCalls = inputs.map((input, i)=>caller.call(async ()=>{\n                try {\n                    const result = await this.invoke(input, configList[i]);\n                    return result;\n                } catch (e) {\n                    if (batchOptions?.returnExceptions) {\n                        return e;\n                    }\n                    throw e;\n                }\n            }));\n        return Promise.all(batchCalls);\n    }\n    /**\n     * Default streaming implementation.\n     * Subclasses should override this method if they support streaming output.\n     * @param input\n     * @param options\n     */ async *_streamIterator(input, options) {\n        yield this.invoke(input, options);\n    }\n    /**\n     * Stream output in chunks.\n     * @param input\n     * @param options\n     * @returns A readable stream that is also an iterable.\n     */ async stream(input, options) {\n        // Buffer the first streamed chunk to allow for initial errors\n        // to surface immediately.\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this._streamIterator(input, config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n    _separateRunnableConfigFromCallOptions(options) {\n        let runnableConfig;\n        if (options === undefined) {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        } else {\n            runnableConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)({\n                callbacks: options.callbacks,\n                tags: options.tags,\n                metadata: options.metadata,\n                runName: options.runName,\n                configurable: options.configurable,\n                recursionLimit: options.recursionLimit,\n                maxConcurrency: options.maxConcurrency,\n                runId: options.runId,\n                timeout: options.timeout,\n                signal: options.signal\n            });\n        }\n        const callOptions = {\n            ...options\n        };\n        delete callOptions.callbacks;\n        delete callOptions.tags;\n        delete callOptions.metadata;\n        delete callOptions.runName;\n        delete callOptions.configurable;\n        delete callOptions.recursionLimit;\n        delete callOptions.maxConcurrency;\n        delete callOptions.runId;\n        delete callOptions.timeout;\n        delete callOptions.signal;\n        return [\n            runnableConfig,\n            callOptions\n        ];\n    }\n    async _callWithConfig(func, input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, config?.runType, undefined, undefined, config?.runName ?? this.getName());\n        delete config.runId;\n        let output;\n        try {\n            const promise = func.call(this, input, config, runManager);\n            output = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, options?.signal);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n        return output;\n    }\n    /**\n     * Internal method that handles batching and configuration for a runnable\n     * It takes a function, input values, and optional configuration, and\n     * returns a promise that resolves to the output values.\n     * @param func The function to be executed for each input value.\n     * @param input The input values to be processed.\n     * @param config Optional configuration for the function execution.\n     * @returns A promise that resolves to the output values.\n     */ async _batchWithConfig(func, inputs, options, batchOptions) {\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(optionsList.map(_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), optionsList[i].runId, optionsList[i].runType, undefined, undefined, optionsList[i].runName ?? this.getName());\n            delete optionsList[i].runId;\n            return handleStartRes;\n        }));\n        let outputs;\n        try {\n            const promise = func.call(this, inputs, optionsList, runManagers, batchOptions);\n            outputs = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, optionsList?.[0]?.signal);\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(outputs, \"output\"))));\n        return outputs;\n    }\n    /**\n     * Helper method to transform an Iterator of Input values into an Iterator of\n     * Output values, with callbacks.\n     * Use this to implement `stream()` or `transform()` in Runnable subclasses.\n     */ async *_transformStreamWithConfig(inputGenerator, transformer, options) {\n        let finalInput;\n        let finalInputSupported = true;\n        let finalOutput;\n        let finalOutputSupported = true;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        async function* wrapInputForTracing() {\n            for await (const chunk of inputGenerator){\n                if (finalInputSupported) {\n                    if (finalInput === undefined) {\n                        finalInput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalInput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalInput, chunk);\n                        } catch  {\n                            finalInput = undefined;\n                            finalInputSupported = false;\n                        }\n                    }\n                }\n                yield chunk;\n            }\n        }\n        let runManager;\n        try {\n            const pipe = await (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.pipeGeneratorWithSetup)(transformer.bind(this), wrapInputForTracing(), async ()=>callbackManager_?.handleChainStart(this.toJSON(), {\n                    input: \"\"\n                }, config.runId, config.runType, undefined, undefined, config.runName ?? this.getName()), options?.signal, config);\n            delete config.runId;\n            runManager = pipe.setup;\n            const streamEventsHandler = runManager?.handlers.find(_tracers_event_stream_js__WEBPACK_IMPORTED_MODULE_3__.isStreamEventsHandler);\n            let iterator = pipe.output;\n            if (streamEventsHandler !== undefined && runManager !== undefined) {\n                iterator = streamEventsHandler.tapOutputIterable(runManager.runId, iterator);\n            }\n            const streamLogHandler = runManager?.handlers.find(_tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.isLogStreamHandler);\n            if (streamLogHandler !== undefined && runManager !== undefined) {\n                iterator = streamLogHandler.tapOutputIterable(runManager.runId, iterator);\n            }\n            for await (const chunk of iterator){\n                yield chunk;\n                if (finalOutputSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                        } catch  {\n                            finalOutput = undefined;\n                            finalOutputSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e, undefined, undefined, undefined, {\n                inputs: _coerceToDict(finalInput, \"input\")\n            });\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {}, undefined, undefined, undefined, {\n            inputs: _coerceToDict(finalInput, \"input\")\n        });\n    }\n    getGraph(_) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_12__.Graph();\n        // TODO: Add input schema for runnables\n        const inputNode = graph.addNode({\n            name: `${this.getName()}Input`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_16__.z.any()\n        });\n        const runnableNode = graph.addNode(this);\n        // TODO: Add output schemas for runnables\n        const outputNode = graph.addNode({\n            name: `${this.getName()}Output`,\n            schema: zod__WEBPACK_IMPORTED_MODULE_16__.z.any()\n        });\n        graph.addEdge(inputNode, runnableNode);\n        graph.addEdge(runnableNode, outputNode);\n        return graph;\n    }\n    /**\n     * Create a new runnable sequence that runs each individual runnable in series,\n     * piping the output of one runnable into another runnable or runnable-like.\n     * @param coerceable A runnable, function, or object whose values are functions or runnables.\n     * @returns A new runnable sequence.\n     */ pipe(coerceable) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableSequence({\n            first: this,\n            last: _coerceToRunnable(coerceable)\n        });\n    }\n    /**\n     * Pick keys from the dict output of this runnable. Returns a new runnable.\n     */ pick(keys) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return this.pipe(new RunnablePick(keys));\n    }\n    /**\n     * Assigns new fields to the dict output of this runnable. Returns a new runnable.\n     */ assign(mapping) {\n        return this.pipe(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableAssign(// eslint-disable-next-line @typescript-eslint/no-use-before-define\n        new RunnableMap({\n            steps: mapping\n        })));\n    }\n    /**\n     * Default implementation of transform, which buffers input and then calls stream.\n     * Subclasses should override this method if they can start producing output while\n     * input is still being generated.\n     * @param generator\n     * @param options\n     */ async *transform(generator, options) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                // This method should throw an error if gathering fails.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalChunk, chunk);\n            }\n        }\n        yield* this._streamIterator(finalChunk, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options));\n    }\n    /**\n     * Stream all output from a runnable, as reported to the callback system.\n     * This includes all inner runs of LLMs, Retrievers, Tools, etc.\n     * Output is streamed as Log objects, which include a list of\n     * jsonpatch ops that describe how the state of the run has changed in each\n     * step, and the final state of the run.\n     * The jsonpatch ops can be applied in order to construct state.\n     * @param input\n     * @param options\n     * @param streamOptions\n     */ async *streamLog(input, options, streamOptions) {\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"original\"\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        yield* this._streamLog(input, logStreamCallbackHandler, config);\n    }\n    async *_streamLog(input, logStreamCallbackHandler, config) {\n        const { callbacks } = config;\n        if (callbacks === undefined) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = [\n                logStreamCallbackHandler\n            ];\n        } else if (Array.isArray(callbacks)) {\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = callbacks.concat([\n                logStreamCallbackHandler\n            ]);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.addHandler(logStreamCallbackHandler, true);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        const runnableStreamPromise = this.stream(input, config);\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await runnableStreamPromise;\n                for await (const chunk of runnableStream){\n                    const patch = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: \"/streamed_output/-\",\n                                value: chunk\n                            }\n                        ]\n                    });\n                    await logStreamCallbackHandler.writer.write(patch);\n                }\n            } finally{\n                await logStreamCallbackHandler.writer.close();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        try {\n            for await (const log of logStreamCallbackHandler){\n                yield log;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    streamEvents(input, options, streamOptions) {\n        let stream;\n        if (options.version === \"v1\") {\n            stream = this._streamEventsV1(input, options, streamOptions);\n        } else if (options.version === \"v2\") {\n            stream = this._streamEventsV2(input, options, streamOptions);\n        } else {\n            throw new Error(`Only versions \"v1\" and \"v2\" of the schema are currently supported.`);\n        }\n        if (options.encoding === \"text/event-stream\") {\n            return (0,_wrappers_js__WEBPACK_IMPORTED_MODULE_13__.convertToHttpEventStream)(stream);\n        } else {\n            return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(stream);\n        }\n    }\n    async *_streamEventsV2(input, options, streamOptions) {\n        const eventStreamer = new _tracers_event_stream_js__WEBPACK_IMPORTED_MODULE_3__.EventStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false\n        });\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const runId = config.runId ?? (0,uuid__WEBPACK_IMPORTED_MODULE_17__[\"default\"])();\n        config.runId = runId;\n        const callbacks = config.callbacks;\n        if (callbacks === undefined) {\n            config.callbacks = [\n                eventStreamer\n            ];\n        } else if (Array.isArray(callbacks)) {\n            config.callbacks = callbacks.concat(eventStreamer);\n        } else {\n            const copiedCallbacks = callbacks.copy();\n            copiedCallbacks.addHandler(eventStreamer, true);\n            // eslint-disable-next-line no-param-reassign\n            config.callbacks = copiedCallbacks;\n        }\n        // Call the runnable in streaming mode,\n        // add each chunk to the output stream\n        const outerThis = this;\n        async function consumeRunnableStream() {\n            try {\n                const runnableStream = await outerThis.stream(input, config);\n                const tappedStream = eventStreamer.tapOutputIterable(runId, runnableStream);\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                for await (const _ of tappedStream){\n                // Just iterate so that the callback handler picks up events\n                }\n            } finally{\n                await eventStreamer.finish();\n            }\n        }\n        const runnableStreamConsumePromise = consumeRunnableStream();\n        let firstEventSent = false;\n        let firstEventRunId;\n        try {\n            for await (const event of eventStreamer){\n                // This is a work-around an issue where the inputs into the\n                // chain are not available until the entire input is consumed.\n                // As a temporary solution, we'll modify the input to be the input\n                // that was passed into the chain.\n                if (!firstEventSent) {\n                    event.data.input = input;\n                    firstEventSent = true;\n                    firstEventRunId = event.run_id;\n                    yield event;\n                    continue;\n                }\n                if (event.run_id === firstEventRunId && event.event.endsWith(\"_end\")) {\n                    // If it's the end event corresponding to the root runnable\n                    // we dont include the input in the event since it's guaranteed\n                    // to be included in the first event.\n                    if (event.data?.input) {\n                        delete event.data.input;\n                    }\n                }\n                yield event;\n            }\n        } finally{\n            await runnableStreamConsumePromise;\n        }\n    }\n    async *_streamEventsV1(input, options, streamOptions) {\n        let runLog;\n        let hasEncounteredStartEvent = false;\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const rootTags = config.tags ?? [];\n        const rootMetadata = config.metadata ?? {};\n        const rootName = config.runName ?? this.getName();\n        const logStreamCallbackHandler = new _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.LogStreamCallbackHandler({\n            ...streamOptions,\n            autoClose: false,\n            _schemaFormat: \"streaming_events\"\n        });\n        const rootEventFilter = new _utils_js__WEBPACK_IMPORTED_MODULE_10__._RootEventFilter({\n            ...streamOptions\n        });\n        const logStream = this._streamLog(input, logStreamCallbackHandler, config);\n        for await (const log of logStream){\n            if (!runLog) {\n                runLog = _tracers_log_stream_js__WEBPACK_IMPORTED_MODULE_2__.RunLog.fromRunLogPatch(log);\n            } else {\n                runLog = runLog.concat(log);\n            }\n            if (runLog.state === undefined) {\n                throw new Error(`Internal error: \"streamEvents\" state is missing. Please open a bug report.`);\n            }\n            // Yield the start event for the root runnable if it hasn't been seen.\n            // The root run is never filtered out\n            if (!hasEncounteredStartEvent) {\n                hasEncounteredStartEvent = true;\n                const state = {\n                    ...runLog.state\n                };\n                const event = {\n                    run_id: state.id,\n                    event: `on_${state.type}_start`,\n                    name: rootName,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    data: {\n                        input\n                    }\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n            const paths = log.ops.filter((op)=>op.path.startsWith(\"/logs/\")).map((op)=>op.path.split(\"/\")[2]);\n            const dedupedPaths = [\n                ...new Set(paths)\n            ];\n            for (const path of dedupedPaths){\n                let eventType;\n                let data = {};\n                const logEntry = runLog.state.logs[path];\n                if (logEntry.end_time === undefined) {\n                    if (logEntry.streamed_output.length > 0) {\n                        eventType = \"stream\";\n                    } else {\n                        eventType = \"start\";\n                    }\n                } else {\n                    eventType = \"end\";\n                }\n                if (eventType === \"start\") {\n                    // Include the inputs with the start event if they are available.\n                    // Usually they will NOT be available for components that operate\n                    // on streams, since those components stream the input and\n                    // don't know its final value until the end of the stream.\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                } else if (eventType === \"end\") {\n                    if (logEntry.inputs !== undefined) {\n                        data.input = logEntry.inputs;\n                    }\n                    data.output = logEntry.final_output;\n                } else if (eventType === \"stream\") {\n                    const chunkCount = logEntry.streamed_output.length;\n                    if (chunkCount !== 1) {\n                        throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${logEntry.name}\"`);\n                    }\n                    data = {\n                        chunk: logEntry.streamed_output[0]\n                    };\n                    // Clean up the stream, we don't need it anymore.\n                    // And this avoids duplicates as well!\n                    logEntry.streamed_output = [];\n                }\n                yield {\n                    event: `on_${logEntry.type}_${eventType}`,\n                    name: logEntry.name,\n                    run_id: logEntry.id,\n                    tags: logEntry.tags,\n                    metadata: logEntry.metadata,\n                    data\n                };\n            }\n            // Finally, we take care of the streaming output from the root chain\n            // if there is any.\n            const { state } = runLog;\n            if (state.streamed_output.length > 0) {\n                const chunkCount = state.streamed_output.length;\n                if (chunkCount !== 1) {\n                    throw new Error(`Expected exactly one chunk of streamed output, got ${chunkCount} instead. Encountered in: \"${state.name}\"`);\n                }\n                const data = {\n                    chunk: state.streamed_output[0]\n                };\n                // Clean up the stream, we don't need it anymore.\n                state.streamed_output = [];\n                const event = {\n                    event: `on_${state.type}_stream`,\n                    run_id: state.id,\n                    tags: rootTags,\n                    metadata: rootMetadata,\n                    name: rootName,\n                    data\n                };\n                if (rootEventFilter.includeEvent(event, state.type)) {\n                    yield event;\n                }\n            }\n        }\n        const state = runLog?.state;\n        if (state !== undefined) {\n            // Finally, yield the end event for the root runnable.\n            const event = {\n                event: `on_${state.type}_end`,\n                name: rootName,\n                run_id: state.id,\n                tags: rootTags,\n                metadata: rootMetadata,\n                data: {\n                    output: state.final_output\n                }\n            };\n            if (rootEventFilter.includeEvent(event, state.type)) yield event;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnable(thing) {\n        return (0,_utils_js__WEBPACK_IMPORTED_MODULE_10__.isRunnableInterface)(thing);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunnableBinding({\n            bound: this,\n            config: {},\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_9__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n    /**\n     * Convert a runnable to a tool. Return a new instance of `RunnableToolLike`\n     * which contains the runnable, name, description and schema.\n     *\n     * @template {T extends RunInput = RunInput} RunInput - The input type of the runnable. Should be the same as the `RunInput` type of the runnable.\n     *\n     * @param fields\n     * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n     * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n     * @param {z.ZodType<T>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n     * @returns {RunnableToolLike<z.ZodType<T>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n     */ asTool(fields) {\n        return convertRunnableToTool(this, fields);\n    }\n}\n/**\n * A runnable that delegates calls to another runnable with a set of kwargs.\n * @example\n * ```typescript\n * import {\n *   type RunnableConfig,\n *   RunnableLambda,\n * } from \"@langchain/core/runnables\";\n *\n * const enhanceProfile = (\n *   profile: Record<string, any>,\n *   config?: RunnableConfig\n * ) => {\n *   if (config?.configurable?.role) {\n *     return { ...profile, role: config.configurable.role };\n *   }\n *   return profile;\n * };\n *\n * const runnable = RunnableLambda.from(enhanceProfile);\n *\n * // Bind configuration to the runnable to set the user's role dynamically\n * const adminRunnable = runnable.bind({ configurable: { role: \"Admin\" } });\n * const userRunnable = runnable.bind({ configurable: { role: \"User\" } });\n *\n * const result1 = await adminRunnable.invoke({\n *   name: \"Alice\",\n *   email: \"alice@example.com\"\n * });\n *\n * // { name: \"Alice\", email: \"alice@example.com\", role: \"Admin\" }\n *\n * const result2 = await userRunnable.invoke({\n *   name: \"Bob\",\n *   email: \"bob@example.com\"\n * });\n *\n * // { name: \"Bob\", email: \"bob@example.com\", role: \"User\" }\n * ```\n */ class RunnableBinding extends Runnable {\n    static lc_name() {\n        return \"RunnableBinding\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"configFactories\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n        this.kwargs = fields.kwargs;\n        this.config = fields.config;\n        this.configFactories = fields.configFactories;\n    }\n    getName(suffix) {\n        return this.bound.getName(suffix);\n    }\n    async _mergeConfig(...options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.mergeConfigs)(this.config, ...options);\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.mergeConfigs)(config, ...this.configFactories ? await Promise.all(this.configFactories.map(async (configFactory)=>await configFactory(config))) : []);\n    }\n    bind(kwargs) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: {\n                ...this.kwargs,\n                ...kwargs\n            },\n            config: this.config\n        });\n    }\n    withConfig(config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: {\n                ...this.config,\n                ...config\n            }\n        });\n    }\n    withRetry(fields) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return new this.constructor({\n            bound: this.bound.withRetry(fields),\n            kwargs: this.kwargs,\n            config: this.config\n        });\n    }\n    async invoke(input, options) {\n        return this.bound.invoke(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    async batch(inputs, options, batchOptions) {\n        const mergedOptions = Array.isArray(options) ? await Promise.all(options.map(async (individualOption)=>this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(individualOption), this.kwargs))) : await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs);\n        return this.bound.batch(inputs, mergedOptions, batchOptions);\n    }\n    async *_streamIterator(input, options) {\n        yield* this.bound._streamIterator(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    async stream(input, options) {\n        return this.bound.stream(input, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    async *transform(generator, options) {\n        yield* this.bound.transform(generator, await this._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), this.kwargs));\n    }\n    streamEvents(input, options, streamOptions) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const outerThis = this;\n        const generator = async function*() {\n            yield* outerThis.bound.streamEvents(input, {\n                ...await outerThis._mergeConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options), outerThis.kwargs),\n                version: options.version\n            }, streamOptions);\n        };\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(generator());\n    }\n    static isRunnableBinding(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    thing) {\n        return thing.bound && Runnable.isRunnable(thing.bound);\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableBinding({\n            bound: this.bound,\n            kwargs: this.kwargs,\n            config: this.config,\n            configFactories: [\n                (config)=>({\n                        callbacks: [\n                            new _tracers_root_listener_js__WEBPACK_IMPORTED_MODULE_9__.RootListenersTracer({\n                                config,\n                                onStart,\n                                onEnd,\n                                onError\n                            })\n                        ]\n                    })\n            ]\n        });\n    }\n}\n/**\n * A runnable that delegates calls to another runnable\n * with each element of the input sequence.\n * @example\n * ```typescript\n * import { RunnableEach, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const toUpperCase = (input: string): string => input.toUpperCase();\n * const addGreeting = (input: string): string => `Hello, ${input}!`;\n *\n * const upperCaseLambda = RunnableLambda.from(toUpperCase);\n * const greetingLambda = RunnableLambda.from(addGreeting);\n *\n * const chain = new RunnableEach({\n *   bound: upperCaseLambda.pipe(greetingLambda),\n * });\n *\n * const result = await chain.invoke([\"alice\", \"bob\", \"carol\"])\n *\n * // [\"Hello, ALICE!\", \"Hello, BOB!\", \"Hello, CAROL!\"]\n * ```\n */ class RunnableEach extends Runnable {\n    static lc_name() {\n        return \"RunnableEach\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"bound\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.bound = fields.bound;\n    }\n    /**\n     * Binds the runnable with the specified arguments.\n     * @param kwargs The arguments to bind the runnable with.\n     * @returns A new instance of the `RunnableEach` class that is bound with the specified arguments.\n     */ bind(kwargs) {\n        return new RunnableEach({\n            bound: this.bound.bind(kwargs)\n        });\n    }\n    /**\n     * Invokes the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(inputs, config) {\n        return this._callWithConfig(this._invoke.bind(this), inputs, config);\n    }\n    /**\n     * A helper method that is used to invoke the runnable with the specified input and configuration.\n     * @param input The input to invoke the runnable with.\n     * @param config The configuration to invoke the runnable with.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async _invoke(inputs, config, runManager) {\n        return this.bound.batch(inputs, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks: runManager?.getChild()\n        }));\n    }\n    /**\n     * Bind lifecycle listeners to a Runnable, returning a new Runnable.\n     * The Run object contains information about the run, including its id,\n     * type, input, output, error, startTime, endTime, and any tags or metadata\n     * added to the run.\n     *\n     * @param {Object} params - The object containing the callback functions.\n     * @param {(run: Run) => void} params.onStart - Called before the runnable starts running, with the Run object.\n     * @param {(run: Run) => void} params.onEnd - Called after the runnable finishes running, with the Run object.\n     * @param {(run: Run) => void} params.onError - Called if the runnable throws an error, with the Run object.\n     */ withListeners({ onStart, onEnd, onError }) {\n        return new RunnableEach({\n            bound: this.bound.withListeners({\n                onStart,\n                onEnd,\n                onError\n            })\n        });\n    }\n}\n/**\n * Base class for runnables that can be retried a\n * specified number of times.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableRetry,\n * } from \"@langchain/core/runnables\";\n *\n * // Simulate an API call that fails\n * const simulateApiCall = (input: string): string => {\n *   console.log(`Attempting API call with input: ${input}`);\n *   throw new Error(\"API call failed due to network issue\");\n * };\n *\n * const apiCallLambda = RunnableLambda.from(simulateApiCall);\n *\n * // Apply retry logic using the .withRetry() method\n * const apiCallWithRetry = apiCallLambda.withRetry({ stopAfterAttempt: 3 });\n *\n * // Alternatively, create a RunnableRetry instance manually\n * const manualRetry = new RunnableRetry({\n *   bound: apiCallLambda,\n *   maxAttemptNumber: 3,\n *   config: {},\n * });\n *\n * // Example invocation using the .withRetry() method\n * const res = await apiCallWithRetry\n *   .invoke(\"Request 1\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n *\n * // Example invocation using the manual retry instance\n * const res2 = await manualRetry\n *   .invoke(\"Request 2\")\n *   .catch((error) => {\n *     console.error(\"Failed after multiple retries:\", error.message);\n *   });\n * ```\n */ class RunnableRetry extends RunnableBinding {\n    static lc_name() {\n        return \"RunnableRetry\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"maxAttemptNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 3\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ()=>{}\n        });\n        this.maxAttemptNumber = fields.maxAttemptNumber ?? this.maxAttemptNumber;\n        this.onFailedAttempt = fields.onFailedAttempt ?? this.onFailedAttempt;\n    }\n    _patchConfigForRetry(attempt, config, runManager) {\n        const tag = attempt > 1 ? `retry:attempt:${attempt}` : undefined;\n        return (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks: runManager?.getChild(tag)\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return p_retry__WEBPACK_IMPORTED_MODULE_0__((attemptNumber)=>super.invoke(input, this._patchConfigForRetry(attemptNumber, config, runManager)), {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            onFailedAttempt: (error)=>this.onFailedAttempt(error, input),\n            retries: Math.max(this.maxAttemptNumber - 1, 0),\n            randomize: true\n        });\n    }\n    /**\n     * Method that invokes the runnable with the specified input, run manager,\n     * and config. It handles the retry logic by catching any errors and\n     * recursively invoking itself with the updated config for the next retry\n     * attempt.\n     * @param input The input for the runnable.\n     * @param runManager The run manager for the runnable.\n     * @param config The config for the runnable.\n     * @returns A promise that resolves to the output of the runnable.\n     */ async invoke(input, config) {\n        return this._callWithConfig(this._invoke.bind(this), input, config);\n    }\n    async _batch(inputs, configs, runManagers, batchOptions) {\n        const resultsMap = {};\n        try {\n            await p_retry__WEBPACK_IMPORTED_MODULE_0__(async (attemptNumber)=>{\n                const remainingIndexes = inputs.map((_, i)=>i).filter((i)=>resultsMap[i.toString()] === undefined || // eslint-disable-next-line no-instanceof/no-instanceof\n                    resultsMap[i.toString()] instanceof Error);\n                const remainingInputs = remainingIndexes.map((i)=>inputs[i]);\n                const patchedConfigs = remainingIndexes.map((i)=>this._patchConfigForRetry(attemptNumber, configs?.[i], runManagers?.[i]));\n                const results = await super.batch(remainingInputs, patchedConfigs, {\n                    ...batchOptions,\n                    returnExceptions: true\n                });\n                let firstException;\n                for(let i = 0; i < results.length; i += 1){\n                    const result = results[i];\n                    const resultMapIndex = remainingIndexes[i];\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (result instanceof Error) {\n                        if (firstException === undefined) {\n                            firstException = result;\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            firstException.input = remainingInputs[i];\n                        }\n                    }\n                    resultsMap[resultMapIndex.toString()] = result;\n                }\n                if (firstException) {\n                    throw firstException;\n                }\n                return results;\n            }, {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                onFailedAttempt: (error)=>this.onFailedAttempt(error, error.input),\n                retries: Math.max(this.maxAttemptNumber - 1, 0),\n                randomize: true\n            });\n        } catch (e) {\n            if (batchOptions?.returnExceptions !== true) {\n                throw e;\n            }\n        }\n        return Object.keys(resultsMap).sort((a, b)=>parseInt(a, 10) - parseInt(b, 10)).map((key)=>resultsMap[parseInt(key, 10)]);\n    }\n    async batch(inputs, options, batchOptions) {\n        return this._batchWithConfig(this._batch.bind(this), inputs, options, batchOptions);\n    }\n}\n/**\n * A sequence of runnables, where the output of each is the input of the next.\n * @example\n * ```typescript\n * const promptTemplate = PromptTemplate.fromTemplate(\n *   \"Tell me a joke about {topic}\",\n * );\n * const chain = RunnableSequence.from([promptTemplate, new ChatOpenAI({})]);\n * const result = await chain.invoke({ topic: \"bears\" });\n * ```\n */ class RunnableSequence extends Runnable {\n    static lc_name() {\n        return \"RunnableSequence\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"first\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"middle\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        Object.defineProperty(this, \"last\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"omitSequenceTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        this.first = fields.first;\n        this.middle = fields.middle ?? this.middle;\n        this.last = fields.last;\n        this.name = fields.name;\n        this.omitSequenceTags = fields.omitSequenceTags ?? this.omitSequenceTags;\n    }\n    get steps() {\n        return [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        let nextStepInput = input;\n        let finalOutput;\n        try {\n            const initialSteps = [\n                this.first,\n                ...this.middle\n            ];\n            for(let i = 0; i < initialSteps.length; i += 1){\n                const step = initialSteps[i];\n                const promise = step.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`)\n                }));\n                nextStepInput = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, options?.signal);\n            }\n            // TypeScript can't detect that the last output of the sequence returns RunOutput, so call it out of the loop here\n            if (options?.signal?.aborted) {\n                throw new Error(\"Aborted\");\n            }\n            finalOutput = await this.last.invoke(nextStepInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${this.steps.length}`)\n            }));\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n        return finalOutput;\n    }\n    async batch(inputs, options, batchOptions) {\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map(_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let nextStepInputs = inputs;\n        try {\n            for(let i = 0; i < this.steps.length; i += 1){\n                const step = this.steps[i];\n                const promise = step.batch(nextStepInputs, runManagers.map((runManager, j)=>{\n                    const childRunManager = runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`);\n                    return (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(configList[j], {\n                        callbacks: childRunManager\n                    });\n                }), batchOptions);\n                nextStepInputs = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, configList[0]?.signal);\n            }\n        } catch (e) {\n            await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(e)));\n            throw e;\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainEnd(_coerceToDict(nextStepInputs, \"output\"))));\n        return nextStepInputs;\n    }\n    async *_streamIterator(input, options) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(options);\n        const { runId, ...otherOptions } = options ?? {};\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherOptions?.runName);\n        const steps = [\n            this.first,\n            ...this.middle,\n            this.last\n        ];\n        let concatSupported = true;\n        let finalOutput;\n        async function* inputGenerator() {\n            yield input;\n        }\n        try {\n            let finalGenerator = steps[0].transform(inputGenerator(), (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherOptions, {\n                callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:1`)\n            }));\n            for(let i = 1; i < steps.length; i += 1){\n                const step = steps[i];\n                finalGenerator = await step.transform(finalGenerator, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherOptions, {\n                    callbacks: runManager?.getChild(this.omitSequenceTags ? undefined : `seq:step:${i + 1}`)\n                }));\n            }\n            for await (const chunk of finalGenerator){\n                options?.signal?.throwIfAborted();\n                yield chunk;\n                if (concatSupported) {\n                    if (finalOutput === undefined) {\n                        finalOutput = chunk;\n                    } else {\n                        try {\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                        } catch (e) {\n                            finalOutput = undefined;\n                            concatSupported = false;\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(finalOutput, \"output\"));\n    }\n    getGraph(config) {\n        const graph = new _graph_js__WEBPACK_IMPORTED_MODULE_12__.Graph();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let currentLastNode = null;\n        this.steps.forEach((step, index)=>{\n            const stepGraph = step.getGraph(config);\n            if (index !== 0) {\n                stepGraph.trimFirstNode();\n            }\n            if (index !== this.steps.length - 1) {\n                stepGraph.trimLastNode();\n            }\n            graph.extend(stepGraph);\n            const stepFirstNode = stepGraph.firstNode();\n            if (!stepFirstNode) {\n                throw new Error(`Runnable ${step} has no first node`);\n            }\n            if (currentLastNode) {\n                graph.addEdge(currentLastNode, stepFirstNode);\n            }\n            currentLastNode = stepGraph.lastNode();\n        });\n        return graph;\n    }\n    pipe(coerceable) {\n        if (RunnableSequence.isRunnableSequence(coerceable)) {\n            return new RunnableSequence({\n                first: this.first,\n                middle: this.middle.concat([\n                    this.last,\n                    coerceable.first,\n                    ...coerceable.middle\n                ]),\n                last: coerceable.last,\n                name: this.name ?? coerceable.name\n            });\n        } else {\n            return new RunnableSequence({\n                first: this.first,\n                middle: [\n                    ...this.middle,\n                    this.last\n                ],\n                last: _coerceToRunnable(coerceable),\n                name: this.name\n            });\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static isRunnableSequence(thing) {\n        return Array.isArray(thing.middle) && Runnable.isRunnable(thing);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from([first, ...runnables], nameOrFields) {\n        let extra = {};\n        if (typeof nameOrFields === \"string\") {\n            extra.name = nameOrFields;\n        } else if (nameOrFields !== undefined) {\n            extra = nameOrFields;\n        }\n        return new RunnableSequence({\n            ...extra,\n            first: _coerceToRunnable(first),\n            middle: runnables.slice(0, -1).map(_coerceToRunnable),\n            last: _coerceToRunnable(runnables[runnables.length - 1])\n        });\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * const mapChain = RunnableMap.from({\n *   joke: PromptTemplate.fromTemplate(\"Tell me a joke about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n *   poem: PromptTemplate.fromTemplate(\"write a 2-line poem about {topic}\").pipe(\n *     new ChatAnthropic({}),\n *   ),\n * });\n * const result = await mapChain.invoke({ topic: \"bear\" });\n * ```\n */ class RunnableMap extends Runnable {\n    static lc_name() {\n        return \"RunnableMap\";\n    }\n    getStepsKeys() {\n        return Object.keys(this.steps);\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"steps\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.steps = {};\n        for (const [key, value] of Object.entries(fields.steps)){\n            this.steps[key] = _coerceToRunnable(value);\n        }\n    }\n    static from(steps) {\n        return new RunnableMap({\n            steps\n        });\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), {\n            input\n        }, config.runId, undefined, undefined, undefined, config?.runName);\n        delete config.runId;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const output = {};\n        try {\n            const promises = Object.entries(this.steps).map(async ([key, runnable])=>{\n                output[key] = await runnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`map:key:${key}`)\n                }));\n            });\n            await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(Promise.all(promises), options?.signal);\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(output);\n        return output;\n    }\n    async *_transform(generator, runManager, options) {\n        // shallow copy steps to ignore changes while iterating\n        const steps = {\n            ...this.steps\n        };\n        // each step gets a copy of the input iterator\n        const inputCopies = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.atee)(generator, Object.keys(steps).length);\n        // start the first iteration of each output iterator\n        const tasks = new Map(Object.entries(steps).map(([key, runnable], i)=>{\n            const gen = runnable.transform(inputCopies[i], (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(options, {\n                callbacks: runManager?.getChild(`map:key:${key}`)\n            }));\n            return [\n                key,\n                gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    }))\n            ];\n        }));\n        // yield chunks as they become available,\n        // starting new iterations as needed,\n        // until all iterators are done\n        while(tasks.size){\n            const promise = Promise.race(tasks.values());\n            const { key, result, gen } = await (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, options?.signal);\n            tasks.delete(key);\n            if (!result.done) {\n                yield {\n                    [key]: result.value\n                };\n                tasks.set(key, gen.next().then((result)=>({\n                        key,\n                        gen,\n                        result\n                    })));\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that wraps a traced LangSmith function.\n */ class RunnableTraceable extends Runnable {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (!(0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.isTraceableFunction)(fields.func)) {\n            throw new Error(\"RunnableTraceable requires a function that is wrapped in traceable higher-order function\");\n        }\n        this.func = fields.func;\n    }\n    async invoke(input, options) {\n        const [config] = this._getOptionsList(options ?? {}, 1);\n        const callbacks = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const promise = this.func((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks\n        }), input);\n        return (0,_utils_signal_js__WEBPACK_IMPORTED_MODULE_6__.raceWithSignal)(promise, config?.signal);\n    }\n    async *_streamIterator(input, options) {\n        const [config] = this._getOptionsList(options ?? {}, 1);\n        const result = await this.invoke(input, options);\n        if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isAsyncIterable)(result)) {\n            for await (const item of result){\n                config?.signal?.throwIfAborted();\n                yield item;\n            }\n            return;\n        }\n        if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isIterator)(result)) {\n            while(true){\n                config?.signal?.throwIfAborted();\n                const state = result.next();\n                if (state.done) break;\n                yield state.value;\n            }\n            return;\n        }\n        yield result;\n    }\n    static from(func) {\n        return new RunnableTraceable({\n            func\n        });\n    }\n}\nfunction assertNonTraceableFunction(func) {\n    if ((0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.isTraceableFunction)(func)) {\n        throw new Error(\"RunnableLambda requires a function that is not wrapped in traceable higher-order function. This shouldn't happen.\");\n    }\n}\n/**\n * A runnable that wraps an arbitrary function that takes a single argument.\n * @example\n * ```typescript\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const add = (input: { x: number; y: number }) => input.x + input.y;\n *\n * const multiply = (input: { value: number; multiplier: number }) =>\n *   input.value * input.multiplier;\n *\n * // Create runnables for the functions\n * const addLambda = RunnableLambda.from(add);\n * const multiplyLambda = RunnableLambda.from(multiply);\n *\n * // Chain the lambdas for a mathematical operation\n * const chainedLambda = addLambda.pipe((result) =>\n *   multiplyLambda.invoke({ value: result, multiplier: 2 })\n * );\n *\n * // Example invocation of the chainedLambda\n * const result = await chainedLambda.invoke({ x: 2, y: 3 });\n *\n * // Will log \"10\" (since (2 + 3) * 2 = 10)\n * ```\n */ class RunnableLambda extends Runnable {\n    static lc_name() {\n        return \"RunnableLambda\";\n    }\n    constructor(fields){\n        if ((0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.isTraceableFunction)(fields.func)) {\n            // eslint-disable-next-line no-constructor-return\n            return RunnableTraceable.from(fields.func);\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        assertNonTraceableFunction(fields.func);\n        this.func = fields.func;\n    }\n    static from(func) {\n        return new RunnableLambda({\n            func\n        });\n    }\n    async _invoke(input, config, runManager) {\n        return new Promise((resolve, reject)=>{\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n                callbacks: runManager?.getChild(),\n                recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RECURSION_LIMIT) - 1\n            });\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.pickRunnableConfigKeys)(childConfig), async ()=>{\n                try {\n                    let output = await this.func(input, {\n                        ...childConfig\n                    });\n                    if (output && Runnable.isRunnable(output)) {\n                        if (config?.recursionLimit === 0) {\n                            throw new Error(\"Recursion limit reached.\");\n                        }\n                        output = await output.invoke(input, {\n                            ...childConfig,\n                            recursionLimit: (childConfig.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RECURSION_LIMIT) - 1\n                        });\n                    } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isAsyncIterable)(output)) {\n                        let finalOutput;\n                        for await (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeAsyncIterableInContext)(childConfig, output)){\n                            config?.signal?.throwIfAborted();\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                // Make a best effort to gather, for any type that supports concat.\n                                try {\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = chunk;\n                                }\n                            }\n                        }\n                        output = finalOutput;\n                    } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isIterableIterator)(output)) {\n                        let finalOutput;\n                        for (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeIteratorInContext)(childConfig, output)){\n                            config?.signal?.throwIfAborted();\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                // Make a best effort to gather, for any type that supports concat.\n                                try {\n                                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = chunk;\n                                }\n                            }\n                        }\n                        output = finalOutput;\n                    }\n                    resolve(output);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._invoke.bind(this), input, options);\n    }\n    async *_transform(generator, runManager, config) {\n        let finalChunk;\n        for await (const chunk of generator){\n            if (finalChunk === undefined) {\n                finalChunk = chunk;\n            } else {\n                // Make a best effort to gather, for any type that supports concat.\n                try {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    finalChunk = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(finalChunk, chunk);\n                } catch (e) {\n                    finalChunk = chunk;\n                }\n            }\n        }\n        const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(config, {\n            callbacks: runManager?.getChild(),\n            recursionLimit: (config?.recursionLimit ?? _config_js__WEBPACK_IMPORTED_MODULE_7__.DEFAULT_RECURSION_LIMIT) - 1\n        });\n        const output = await new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_7__.pickRunnableConfigKeys)(childConfig), async ()=>{\n                try {\n                    const res = await this.func(finalChunk, {\n                        ...childConfig,\n                        config: childConfig\n                    });\n                    resolve(res);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n        if (output && Runnable.isRunnable(output)) {\n            if (config?.recursionLimit === 0) {\n                throw new Error(\"Recursion limit reached.\");\n            }\n            const stream = await output.stream(finalChunk, childConfig);\n            for await (const chunk of stream){\n                yield chunk;\n            }\n        } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isAsyncIterable)(output)) {\n            for await (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeAsyncIterableInContext)(childConfig, output)){\n                config?.signal?.throwIfAborted();\n                yield chunk;\n            }\n        } else if ((0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.isIterableIterator)(output)) {\n            for (const chunk of (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeIteratorInContext)(childConfig, output)){\n                config?.signal?.throwIfAborted();\n                yield chunk;\n            }\n        } else {\n            yield output;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that runs a mapping of runnables in parallel,\n * and returns a mapping of their outputs.\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const addYears = (age: number): number => age + 5;\n * const yearsToFifty = (age: number): number => 50 - age;\n * const yearsToHundred = (age: number): number => 100 - age;\n *\n * const addYearsLambda = RunnableLambda.from(addYears);\n * const milestoneFiftyLambda = RunnableLambda.from(yearsToFifty);\n * const milestoneHundredLambda = RunnableLambda.from(yearsToHundred);\n *\n * // Pipe will coerce objects into RunnableParallel by default, but we\n * // explicitly instantiate one here to demonstrate\n * const sequence = addYearsLambda.pipe(\n *   RunnableParallel.from({\n *     years_to_fifty: milestoneFiftyLambda,\n *     years_to_hundred: milestoneHundredLambda,\n *   })\n * );\n *\n * // Invoke the sequence with a single age input\n * const res = sequence.invoke(25);\n *\n * // { years_to_fifty: 25, years_to_hundred: 75 }\n * ```\n */ class RunnableParallel extends RunnableMap {\n}\n/**\n * A Runnable that can fallback to other Runnables if it fails.\n * External APIs (e.g., APIs for a language model) may at times experience\n * degraded performance or even downtime.\n *\n * In these cases, it can be useful to have a fallback Runnable that can be\n * used in place of the original Runnable (e.g., fallback to another LLM provider).\n *\n * Fallbacks can be defined at the level of a single Runnable, or at the level\n * of a chain of Runnables. Fallbacks are tried in order until one succeeds or\n * all fail.\n *\n * While you can instantiate a `RunnableWithFallbacks` directly, it is usually\n * more convenient to use the `withFallbacks` method on an existing Runnable.\n *\n * When streaming, fallbacks will only be called on failures during the initial\n * stream creation. Errors that occur after a stream starts will not fallback\n * to the next Runnable.\n *\n * @example\n * ```typescript\n * import {\n *   RunnableLambda,\n *   RunnableWithFallbacks,\n * } from \"@langchain/core/runnables\";\n *\n * const primaryOperation = (input: string): string => {\n *   if (input !== \"safe\") {\n *     throw new Error(\"Primary operation failed due to unsafe input\");\n *   }\n *   return `Processed: ${input}`;\n * };\n *\n * // Define a fallback operation that processes the input differently\n * const fallbackOperation = (input: string): string =>\n *   `Fallback processed: ${input}`;\n *\n * const primaryRunnable = RunnableLambda.from(primaryOperation);\n * const fallbackRunnable = RunnableLambda.from(fallbackOperation);\n *\n * // Apply the fallback logic using the .withFallbacks() method\n * const runnableWithFallback = primaryRunnable.withFallbacks([fallbackRunnable]);\n *\n * // Alternatively, create a RunnableWithFallbacks instance manually\n * const manualFallbackChain = new RunnableWithFallbacks({\n *   runnable: primaryRunnable,\n *   fallbacks: [fallbackRunnable],\n * });\n *\n * // Example invocation using .withFallbacks()\n * const res = await runnableWithFallback\n *   .invoke(\"unsafe input\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Fallback processed: unsafe input\"\n *\n * // Example invocation using manual instantiation\n * const res = await manualFallbackChain\n *   .invoke(\"safe\")\n *   .catch((error) => {\n *     console.error(\"Failed after all attempts:\", error.message);\n *   });\n *\n * // \"Processed: safe\"\n * ```\n */ class RunnableWithFallbacks extends Runnable {\n    static lc_name() {\n        return \"RunnableWithFallbacks\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"fallbacks\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.fallbacks = fields.fallbacks;\n    }\n    *runnables() {\n        yield this.runnable;\n        for (const fallback of this.fallbacks){\n            yield fallback;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const { runId, ...otherConfigFields } = config;\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherConfigFields?.runName);\n        const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherConfigFields, {\n            callbacks: runManager?.getChild()\n        });\n        const res = await _singletons_index_js__WEBPACK_IMPORTED_MODULE_11__.AsyncLocalStorageProviderSingleton.runWithConfig(childConfig, async ()=>{\n            let firstError;\n            for (const runnable of this.runnables()){\n                config?.signal?.throwIfAborted();\n                try {\n                    const output = await runnable.invoke(input, childConfig);\n                    await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n                    return output;\n                } catch (e) {\n                    if (firstError === undefined) {\n                        firstError = e;\n                    }\n                }\n            }\n            if (firstError === undefined) {\n                throw new Error(\"No error stored at end of fallback.\");\n            }\n            await runManager?.handleChainError(firstError);\n            throw firstError;\n        });\n        return res;\n    }\n    async *_streamIterator(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config);\n        const { runId, ...otherConfigFields } = config;\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), _coerceToDict(input, \"input\"), runId, undefined, undefined, undefined, otherConfigFields?.runName);\n        let firstError;\n        let stream;\n        for (const runnable of this.runnables()){\n            config?.signal?.throwIfAborted();\n            const childConfig = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(otherConfigFields, {\n                callbacks: runManager?.getChild()\n            });\n            try {\n                const originalStream = await runnable.stream(input, childConfig);\n                stream = (0,_iter_js__WEBPACK_IMPORTED_MODULE_14__.consumeAsyncIterableInContext)(childConfig, originalStream);\n                break;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (stream === undefined) {\n            const error = firstError ?? new Error(\"No error stored at end of fallback.\");\n            await runManager?.handleChainError(error);\n            throw error;\n        }\n        let output;\n        try {\n            for await (const chunk of stream){\n                yield chunk;\n                try {\n                    output = output === undefined ? output : (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.concat)(output, chunk);\n                } catch (e) {\n                    output = undefined;\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(_coerceToDict(output, \"output\"));\n    }\n    async batch(inputs, options, batchOptions) {\n        if (batchOptions?.returnExceptions) {\n            throw new Error(\"Not implemented.\");\n        }\n        const configList = this._getOptionsList(options ?? {}, inputs.length);\n        const callbackManagers = await Promise.all(configList.map((config)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.getCallbackManagerForConfig)(config)));\n        const runManagers = await Promise.all(callbackManagers.map(async (callbackManager, i)=>{\n            const handleStartRes = await callbackManager?.handleChainStart(this.toJSON(), _coerceToDict(inputs[i], \"input\"), configList[i].runId, undefined, undefined, undefined, configList[i].runName);\n            delete configList[i].runId;\n            return handleStartRes;\n        }));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let firstError;\n        for (const runnable of this.runnables()){\n            configList[0].signal?.throwIfAborted();\n            try {\n                const outputs = await runnable.batch(inputs, runManagers.map((runManager, j)=>(0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(configList[j], {\n                        callbacks: runManager?.getChild()\n                    })), batchOptions);\n                await Promise.all(runManagers.map((runManager, i)=>runManager?.handleChainEnd(_coerceToDict(outputs[i], \"output\"))));\n                return outputs;\n            } catch (e) {\n                if (firstError === undefined) {\n                    firstError = e;\n                }\n            }\n        }\n        if (!firstError) {\n            throw new Error(\"No error stored at end of fallbacks.\");\n        }\n        await Promise.all(runManagers.map((runManager)=>runManager?.handleChainError(firstError)));\n        throw firstError;\n    }\n}\n// TODO: Figure out why the compiler needs help eliminating Error as a RunOutput type\nfunction _coerceToRunnable(coerceable) {\n    if (typeof coerceable === \"function\") {\n        return new RunnableLambda({\n            func: coerceable\n        });\n    } else if (Runnable.isRunnable(coerceable)) {\n        return coerceable;\n    } else if (!Array.isArray(coerceable) && typeof coerceable === \"object\") {\n        const runnables = {};\n        for (const [key, value] of Object.entries(coerceable)){\n            runnables[key] = _coerceToRunnable(value);\n        }\n        return new RunnableMap({\n            steps: runnables\n        });\n    } else {\n        throw new Error(`Expected a Runnable, function or object.\\nInstead got an unsupported type.`);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * @example\n * ```typescript\n * import {\n *   RunnableAssign,\n *   RunnableLambda,\n *   RunnableParallel,\n * } from \"@langchain/core/runnables\";\n *\n * const calculateAge = (x: { birthYear: number }): { age: number } => {\n *   const currentYear = new Date().getFullYear();\n *   return { age: currentYear - x.birthYear };\n * };\n *\n * const createGreeting = (x: { name: string }): { greeting: string } => {\n *   return { greeting: `Hello, ${x.name}!` };\n * };\n *\n * const mapper = RunnableParallel.from({\n *   age_step: RunnableLambda.from(calculateAge),\n *   greeting_step: RunnableLambda.from(createGreeting),\n * });\n *\n * const runnableAssign = new RunnableAssign({ mapper });\n *\n * const res = await runnableAssign.invoke({ name: \"Alice\", birthYear: 1990 });\n *\n * // { name: \"Alice\", birthYear: 1990, age_step: { age: 34 }, greeting_step: { greeting: \"Hello, Alice!\" } }\n * ```\n */ class RunnableAssign extends Runnable {\n    static lc_name() {\n        return \"RunnableAssign\";\n    }\n    constructor(fields){\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (fields instanceof RunnableMap) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                mapper: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"mapper\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.mapper = fields.mapper;\n    }\n    async invoke(input, options) {\n        const mapperResult = await this.mapper.invoke(input, options);\n        return {\n            ...input,\n            ...mapperResult\n        };\n    }\n    async *_transform(generator, runManager, options) {\n        // collect mapper keys\n        const mapperKeys = this.mapper.getStepsKeys();\n        // create two input gens, one for the mapper, one for the input\n        const [forPassthrough, forMapper] = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.atee)(generator);\n        // create mapper output gen\n        const mapperOutput = this.mapper.transform(forMapper, (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.patchConfig)(options, {\n            callbacks: runManager?.getChild()\n        }));\n        // start the mapper\n        const firstMapperChunkPromise = mapperOutput.next();\n        // yield the passthrough\n        for await (const chunk of forPassthrough){\n            if (typeof chunk !== \"object\" || Array.isArray(chunk)) {\n                throw new Error(`RunnableAssign can only be used with objects as input, got ${typeof chunk}`);\n            }\n            const filtered = Object.fromEntries(Object.entries(chunk).filter(([key])=>!mapperKeys.includes(key)));\n            if (Object.keys(filtered).length > 0) {\n                yield filtered;\n            }\n        }\n        // yield the mapper output\n        yield (await firstMapperChunkPromise).value;\n        for await (const chunk of mapperOutput){\n            yield chunk;\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\n/**\n * A runnable that assigns key-value pairs to inputs of type `Record<string, unknown>`.\n * Useful for streaming, can be automatically created and chained by calling `runnable.pick();`.\n * @example\n * ```typescript\n * import { RunnablePick } from \"@langchain/core/runnables\";\n *\n * const inputData = {\n *   name: \"John\",\n *   age: 30,\n *   city: \"New York\",\n *   country: \"USA\",\n *   email: \"john.doe@example.com\",\n *   phone: \"+1234567890\",\n * };\n *\n * const basicInfoRunnable = new RunnablePick([\"name\", \"city\"]);\n *\n * // Example invocation\n * const res = await basicInfoRunnable.invoke(inputData);\n *\n * // { name: 'John', city: 'New York' }\n * ```\n */ class RunnablePick extends Runnable {\n    static lc_name() {\n        return \"RunnablePick\";\n    }\n    constructor(fields){\n        if (typeof fields === \"string\" || Array.isArray(fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                keys: fields\n            };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"keys\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.keys = fields.keys;\n    }\n    async _pick(input) {\n        if (typeof this.keys === \"string\") {\n            return input[this.keys];\n        } else {\n            const picked = this.keys.map((key)=>[\n                    key,\n                    input[key]\n                ]).filter((v)=>v[1] !== undefined);\n            return picked.length === 0 ? undefined : Object.fromEntries(picked);\n        }\n    }\n    async invoke(input, options) {\n        return this._callWithConfig(this._pick.bind(this), input, options);\n    }\n    async *_transform(generator) {\n        for await (const chunk of generator){\n            const picked = await this._pick(chunk);\n            if (picked !== undefined) {\n                yield picked;\n            }\n        }\n    }\n    transform(generator, options) {\n        return this._transformStreamWithConfig(generator, this._transform.bind(this), options);\n    }\n    async stream(input, options) {\n        async function* generator() {\n            yield input;\n        }\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_7__.ensureConfig)(options);\n        const wrappedGenerator = new _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.AsyncGeneratorWithSetup({\n            generator: this.transform(generator(), config),\n            config\n        });\n        await wrappedGenerator.setup;\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_5__.IterableReadableStream.fromAsyncGenerator(wrappedGenerator);\n    }\n}\nclass RunnableToolLike extends RunnableBinding {\n    constructor(fields){\n        const sequence = RunnableSequence.from([\n            RunnableLambda.from(async (input)=>{\n                let toolInput;\n                if ((0,_tools_utils_js__WEBPACK_IMPORTED_MODULE_15__._isToolCall)(input)) {\n                    try {\n                        toolInput = await this.schema.parseAsync(input.args);\n                    } catch (e) {\n                        throw new _tools_utils_js__WEBPACK_IMPORTED_MODULE_15__.ToolInputParsingException(`Received tool input did not match expected schema`, JSON.stringify(input.args));\n                    }\n                } else {\n                    toolInput = input;\n                }\n                return toolInput;\n            }).withConfig({\n                runName: `${fields.name}:parse_input`\n            }),\n            fields.bound\n        ]).withConfig({\n            runName: fields.name\n        });\n        super({\n            bound: sequence,\n            config: fields.config ?? {}\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.schema = fields.schema;\n    }\n    static lc_name() {\n        return \"RunnableToolLike\";\n    }\n}\n/**\n * Given a runnable and a Zod schema, convert the runnable to a tool.\n *\n * @template RunInput The input type for the runnable.\n * @template RunOutput The output type for the runnable.\n *\n * @param {Runnable<RunInput, RunOutput>} runnable The runnable to convert to a tool.\n * @param fields\n * @param {string | undefined} [fields.name] The name of the tool. If not provided, it will default to the name of the runnable.\n * @param {string | undefined} [fields.description] The description of the tool. Falls back to the description on the Zod schema if not provided, or undefined if neither are provided.\n * @param {z.ZodType<RunInput>} [fields.schema] The Zod schema for the input of the tool. Infers the Zod type from the input type of the runnable.\n * @returns {RunnableToolLike<z.ZodType<RunInput>, RunOutput>} An instance of `RunnableToolLike` which is a runnable that can be used as a tool.\n */ function convertRunnableToTool(runnable, fields) {\n    const name = fields.name ?? runnable.getName();\n    const description = fields.description ?? fields.schema?.description;\n    if (fields.schema.constructor === zod__WEBPACK_IMPORTED_MODULE_16__.z.ZodString) {\n        return new RunnableToolLike({\n            name,\n            description,\n            schema: zod__WEBPACK_IMPORTED_MODULE_16__.z.object({\n                input: zod__WEBPACK_IMPORTED_MODULE_16__.z.string()\n            }).transform((input)=>input.input),\n            bound: runnable\n        });\n    }\n    return new RunnableToolLike({\n        name,\n        description,\n        schema: fields.schema,\n        bound: runnable\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/branch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableBranch: () => (/* binding */ RunnableBranch)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n\n\n\n/**\n * Class that represents a runnable branch. The RunnableBranch is\n * initialized with an array of branches and a default branch. When invoked,\n * it evaluates the condition of each branch in order and executes the\n * corresponding branch if the condition is true. If none of the conditions\n * are true, it executes the default branch.\n * @example\n * ```typescript\n * const branch = RunnableBranch.from([\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"anthropic\"),\n *     anthropicChain,\n *   ],\n *   [\n *     (x: { topic: string; question: string }) =>\n *       x.topic.toLowerCase().includes(\"langchain\"),\n *     langChainChain,\n *   ],\n *   generalChain,\n * ]);\n *\n * const fullChain = RunnableSequence.from([\n *   {\n *     topic: classificationChain,\n *     question: (input: { question: string }) => input.question,\n *   },\n *   branch,\n * ]);\n *\n * const result = await fullChain.invoke({\n *   question: \"how do I use LangChain?\",\n * });\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnableBranch extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RunnableBranch\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"default\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"branches\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.branches = fields.branches;\n        this.default = fields.default;\n    }\n    /**\n     * Convenience method for instantiating a RunnableBranch from\n     * RunnableLikes (objects, functions, or Runnables).\n     *\n     * Each item in the input except for the last one should be a\n     * tuple with two items. The first is a \"condition\" RunnableLike that\n     * returns \"true\" if the second RunnableLike in the tuple should run.\n     *\n     * The final item in the input should be a RunnableLike that acts as a\n     * default branch if no other branches match.\n     *\n     * @example\n     * ```ts\n     * import { RunnableBranch } from \"@langchain/core/runnables\";\n     *\n     * const branch = RunnableBranch.from([\n     *   [(x: number) => x > 0, (x: number) => x + 1],\n     *   [(x: number) => x < 0, (x: number) => x - 1],\n     *   (x: number) => x\n     * ]);\n     * ```\n     * @param branches An array where the every item except the last is a tuple of [condition, runnable]\n     *   pairs. The last item is a default runnable which is invoked if no other condition matches.\n     * @returns A new RunnableBranch.\n     */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static from(branches) {\n        if (branches.length < 1) {\n            throw new Error(\"RunnableBranch requires at least one branch\");\n        }\n        const branchLikes = branches.slice(0, -1);\n        const coercedBranches = branchLikes.map(([condition, runnable])=>[\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(condition),\n                (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(runnable)\n            ]);\n        const defaultBranch = (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable)(branches[branches.length - 1]);\n        return new this({\n            branches: coercedBranches,\n            default: defaultBranch\n        });\n    }\n    async _invoke(input, config, runManager) {\n        let result;\n        for(let i = 0; i < this.branches.length; i += 1){\n            const [condition, branchRunnable] = this.branches[i];\n            const conditionValue = await condition.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                callbacks: runManager?.getChild(`condition:${i + 1}`)\n            }));\n            if (conditionValue) {\n                result = await branchRunnable.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`branch:${i + 1}`)\n                }));\n                break;\n            }\n        }\n        if (!result) {\n            result = await this.default.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                callbacks: runManager?.getChild(\"branch:default\")\n            }));\n        }\n        return result;\n    }\n    async invoke(input, config = {}) {\n        return this._callWithConfig(this._invoke, input, config);\n    }\n    async *_streamIterator(input, config) {\n        const callbackManager_ = await (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.getCallbackManagerForConfig)(config);\n        const runManager = await callbackManager_?.handleChainStart(this.toJSON(), (0,_base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToDict)(input, \"input\"), config?.runId, undefined, undefined, undefined, config?.runName);\n        let finalOutput;\n        let finalOutputSupported = true;\n        let stream;\n        try {\n            for(let i = 0; i < this.branches.length; i += 1){\n                const [condition, branchRunnable] = this.branches[i];\n                const conditionValue = await condition.invoke(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(`condition:${i + 1}`)\n                }));\n                if (conditionValue) {\n                    stream = await branchRunnable.stream(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                        callbacks: runManager?.getChild(`branch:${i + 1}`)\n                    }));\n                    for await (const chunk of stream){\n                        yield chunk;\n                        if (finalOutputSupported) {\n                            if (finalOutput === undefined) {\n                                finalOutput = chunk;\n                            } else {\n                                try {\n                                    finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.concat)(finalOutput, chunk);\n                                } catch (e) {\n                                    finalOutput = undefined;\n                                    finalOutputSupported = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n            }\n            if (stream === undefined) {\n                stream = await this.default.stream(input, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig)(config, {\n                    callbacks: runManager?.getChild(\"branch:default\")\n                }));\n                for await (const chunk of stream){\n                    yield chunk;\n                    if (finalOutputSupported) {\n                        if (finalOutput === undefined) {\n                            finalOutput = chunk;\n                        } else {\n                            try {\n                                finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.concat)(finalOutput, chunk);\n                            } catch (e) {\n                                finalOutput = undefined;\n                                finalOutputSupported = false;\n                            }\n                        }\n                    }\n                }\n            }\n        } catch (e) {\n            await runManager?.handleChainError(e);\n            throw e;\n        }\n        await runManager?.handleChainEnd(finalOutput ?? {});\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/config.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/config.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RECURSION_LIMIT: () => (/* binding */ DEFAULT_RECURSION_LIMIT),\n/* harmony export */   ensureConfig: () => (/* binding */ ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* binding */ getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* binding */ mergeConfigs),\n/* harmony export */   patchConfig: () => (/* binding */ patchConfig),\n/* harmony export */   pickRunnableConfigKeys: () => (/* binding */ pickRunnableConfigKeys)\n/* harmony export */ });\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n\n\nconst DEFAULT_RECURSION_LIMIT = 25;\nasync function getCallbackManagerForConfig(config) {\n    return _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n}\nfunction mergeConfigs(...configs) {\n    // We do not want to call ensureConfig on the empty state here as this may cause\n    // double loading of callbacks if async local storage is being used.\n    const copy = {};\n    for (const options of configs.filter((c)=>!!c)){\n        for (const key of Object.keys(options)){\n            if (key === \"metadata\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"tags\") {\n                const baseKeys = copy[key] ?? [];\n                copy[key] = [\n                    ...new Set(baseKeys.concat(options[key] ?? []))\n                ];\n            } else if (key === \"configurable\") {\n                copy[key] = {\n                    ...copy[key],\n                    ...options[key]\n                };\n            } else if (key === \"timeout\") {\n                if (copy.timeout === undefined) {\n                    copy.timeout = options.timeout;\n                } else if (options.timeout !== undefined) {\n                    copy.timeout = Math.min(copy.timeout, options.timeout);\n                }\n            } else if (key === \"signal\") {\n                if (copy.signal === undefined) {\n                    copy.signal = options.signal;\n                } else if (options.signal !== undefined) {\n                    if (\"any\" in AbortSignal) {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        copy.signal = AbortSignal.any([\n                            copy.signal,\n                            options.signal\n                        ]);\n                    } else {\n                        copy.signal = options.signal;\n                    }\n                }\n            } else if (key === \"callbacks\") {\n                const baseCallbacks = copy.callbacks;\n                const providedCallbacks = options.callbacks;\n                // callbacks can be either undefined, Array<handler> or manager\n                // so merging two callbacks values has 6 cases\n                if (Array.isArray(providedCallbacks)) {\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        copy.callbacks = baseCallbacks.concat(providedCallbacks);\n                    } else {\n                        // baseCallbacks is a manager\n                        const manager = baseCallbacks.copy();\n                        for (const callback of providedCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    }\n                } else if (providedCallbacks) {\n                    // providedCallbacks is a manager\n                    if (!baseCallbacks) {\n                        copy.callbacks = providedCallbacks;\n                    } else if (Array.isArray(baseCallbacks)) {\n                        const manager = providedCallbacks.copy();\n                        for (const callback of baseCallbacks){\n                            manager.addHandler((0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.ensureHandler)(callback), true);\n                        }\n                        copy.callbacks = manager;\n                    } else {\n                        // baseCallbacks is also a manager\n                        copy.callbacks = new _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager(providedCallbacks._parentRunId, {\n                            handlers: baseCallbacks.handlers.concat(providedCallbacks.handlers),\n                            inheritableHandlers: baseCallbacks.inheritableHandlers.concat(providedCallbacks.inheritableHandlers),\n                            tags: Array.from(new Set(baseCallbacks.tags.concat(providedCallbacks.tags))),\n                            inheritableTags: Array.from(new Set(baseCallbacks.inheritableTags.concat(providedCallbacks.inheritableTags))),\n                            metadata: {\n                                ...baseCallbacks.metadata,\n                                ...providedCallbacks.metadata\n                            }\n                        });\n                    }\n                }\n            } else {\n                const typedKey = key;\n                copy[typedKey] = options[typedKey] ?? copy[typedKey];\n            }\n        }\n    }\n    return copy;\n}\nconst PRIMITIVES = new Set([\n    \"string\",\n    \"number\",\n    \"boolean\"\n]);\n/**\n * Ensure that a passed config is an object with all required keys present.\n */ function ensureConfig(config) {\n    const implicitConfig = _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.getRunnableConfig();\n    let empty = {\n        tags: [],\n        metadata: {},\n        recursionLimit: 25,\n        runId: undefined\n    };\n    if (implicitConfig) {\n        // Don't allow runId and runName to be loaded implicitly, as this can cause\n        // child runs to improperly inherit their parents' run ids.\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { runId, runName, ...rest } = implicitConfig;\n        empty = Object.entries(rest).reduce(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (currentConfig, [key, value])=>{\n            if (value !== undefined) {\n                // eslint-disable-next-line no-param-reassign\n                currentConfig[key] = value;\n            }\n            return currentConfig;\n        }, empty);\n    }\n    if (config) {\n        empty = Object.entries(config).reduce(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (currentConfig, [key, value])=>{\n            if (value !== undefined) {\n                // eslint-disable-next-line no-param-reassign\n                currentConfig[key] = value;\n            }\n            return currentConfig;\n        }, empty);\n    }\n    if (empty?.configurable) {\n        for (const key of Object.keys(empty.configurable)){\n            if (PRIMITIVES.has(typeof empty.configurable[key]) && !empty.metadata?.[key]) {\n                if (!empty.metadata) {\n                    empty.metadata = {};\n                }\n                empty.metadata[key] = empty.configurable[key];\n            }\n        }\n    }\n    if (empty.timeout !== undefined) {\n        if (empty.timeout <= 0) {\n            throw new Error(\"Timeout must be a positive number\");\n        }\n        const timeoutSignal = AbortSignal.timeout(empty.timeout);\n        if (empty.signal !== undefined) {\n            if (\"any\" in AbortSignal) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                empty.signal = AbortSignal.any([\n                    empty.signal,\n                    timeoutSignal\n                ]);\n            }\n        } else {\n            empty.signal = timeoutSignal;\n        }\n        delete empty.timeout;\n    }\n    return empty;\n}\n/**\n * Helper function that patches runnable configs with updated properties.\n */ function patchConfig(config = {}, { callbacks, maxConcurrency, recursionLimit, runName, configurable, runId } = {}) {\n    const newConfig = ensureConfig(config);\n    if (callbacks !== undefined) {\n        /**\n         * If we're replacing callbacks we need to unset runName\n         * since that should apply only to the same run as the original callbacks\n         */ delete newConfig.runName;\n        newConfig.callbacks = callbacks;\n    }\n    if (recursionLimit !== undefined) {\n        newConfig.recursionLimit = recursionLimit;\n    }\n    if (maxConcurrency !== undefined) {\n        newConfig.maxConcurrency = maxConcurrency;\n    }\n    if (runName !== undefined) {\n        newConfig.runName = runName;\n    }\n    if (configurable !== undefined) {\n        newConfig.configurable = {\n            ...newConfig.configurable,\n            ...configurable\n        };\n    }\n    if (runId !== undefined) {\n        delete newConfig.runId;\n    }\n    return newConfig;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction pickRunnableConfigKeys(config) {\n    return config ? {\n        configurable: config.configurable,\n        recursionLimit: config.recursionLimit,\n        callbacks: config.callbacks,\n        tags: config.tags,\n        metadata: config.metadata,\n        maxConcurrency: config.maxConcurrency,\n        timeout: config.timeout,\n        signal: config.signal\n    } : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Graph: () => (/* binding */ Graph)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\");\n/* harmony import */ var _graph_mermaid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graph_mermaid.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.js\");\n\n\n\n\nfunction nodeDataStr(id, data) {\n    if (id !== undefined && !(0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(id)) {\n        return id;\n    } else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(data)) {\n        try {\n            let dataStr = data.getName();\n            dataStr = dataStr.startsWith(\"Runnable\") ? dataStr.slice(\"Runnable\".length) : dataStr;\n            return dataStr;\n        } catch (error) {\n            return data.getName();\n        }\n    } else {\n        return data.name ?? \"UnknownSchema\";\n    }\n}\nfunction nodeDataJson(node) {\n    // if node.data implements Runnable\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.isRunnableInterface)(node.data)) {\n        return {\n            type: \"runnable\",\n            data: {\n                id: node.data.lc_id,\n                name: node.data.getName()\n            }\n        };\n    } else {\n        return {\n            type: \"schema\",\n            data: {\n                ...(0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(node.data.schema),\n                title: node.data.name\n            }\n        };\n    }\n}\nclass Graph {\n    constructor(params){\n        Object.defineProperty(this, \"nodes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"edges\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        this.nodes = params?.nodes ?? this.nodes;\n        this.edges = params?.edges ?? this.edges;\n    }\n    // Convert the graph to a JSON-serializable format.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const stableNodeIds = {};\n        Object.values(this.nodes).forEach((node, i)=>{\n            stableNodeIds[node.id] = (0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(node.id) ? i : node.id;\n        });\n        return {\n            nodes: Object.values(this.nodes).map((node)=>({\n                    id: stableNodeIds[node.id],\n                    ...nodeDataJson(node)\n                })),\n            edges: this.edges.map((edge)=>{\n                const item = {\n                    source: stableNodeIds[edge.source],\n                    target: stableNodeIds[edge.target]\n                };\n                if (typeof edge.data !== \"undefined\") {\n                    item.data = edge.data;\n                }\n                if (typeof edge.conditional !== \"undefined\") {\n                    item.conditional = edge.conditional;\n                }\n                return item;\n            })\n        };\n    }\n    addNode(data, id, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    metadata) {\n        if (id !== undefined && this.nodes[id] !== undefined) {\n            throw new Error(`Node with id ${id} already exists`);\n        }\n        const nodeId = id ?? (0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])();\n        const node = {\n            id: nodeId,\n            data,\n            name: nodeDataStr(id, data),\n            metadata\n        };\n        this.nodes[nodeId] = node;\n        return node;\n    }\n    removeNode(node) {\n        // Remove the node from the nodes map\n        delete this.nodes[node.id];\n        // Filter out edges connected to the node\n        this.edges = this.edges.filter((edge)=>edge.source !== node.id && edge.target !== node.id);\n    }\n    addEdge(source, target, data, conditional) {\n        if (this.nodes[source.id] === undefined) {\n            throw new Error(`Source node ${source.id} not in graph`);\n        }\n        if (this.nodes[target.id] === undefined) {\n            throw new Error(`Target node ${target.id} not in graph`);\n        }\n        const edge = {\n            source: source.id,\n            target: target.id,\n            data,\n            conditional\n        };\n        this.edges.push(edge);\n        return edge;\n    }\n    firstNode() {\n        return _firstNode(this);\n    }\n    lastNode() {\n        return _lastNode(this);\n    }\n    /**\n     * Add all nodes and edges from another graph.\n     * Note this doesn't check for duplicates, nor does it connect the graphs.\n     */ extend(graph, prefix = \"\") {\n        let finalPrefix = prefix;\n        const nodeIds = Object.values(graph.nodes).map((node)=>node.id);\n        if (nodeIds.every(uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])) {\n            finalPrefix = \"\";\n        }\n        const prefixed = (id)=>{\n            return finalPrefix ? `${finalPrefix}:${id}` : id;\n        };\n        Object.entries(graph.nodes).forEach(([key, value])=>{\n            this.nodes[prefixed(key)] = {\n                ...value,\n                id: prefixed(key)\n            };\n        });\n        const newEdges = graph.edges.map((edge)=>{\n            return {\n                ...edge,\n                source: prefixed(edge.source),\n                target: prefixed(edge.target)\n            };\n        });\n        // Add all edges from the other graph\n        this.edges = [\n            ...this.edges,\n            ...newEdges\n        ];\n        const first = graph.firstNode();\n        const last = graph.lastNode();\n        return [\n            first ? {\n                id: prefixed(first.id),\n                data: first.data\n            } : undefined,\n            last ? {\n                id: prefixed(last.id),\n                data: last.data\n            } : undefined\n        ];\n    }\n    trimFirstNode() {\n        const firstNode = this.firstNode();\n        if (firstNode && _firstNode(this, [\n            firstNode.id\n        ])) {\n            this.removeNode(firstNode);\n        }\n    }\n    trimLastNode() {\n        const lastNode = this.lastNode();\n        if (lastNode && _lastNode(this, [\n            lastNode.id\n        ])) {\n            this.removeNode(lastNode);\n        }\n    }\n    /**\n     * Return a new graph with all nodes re-identified,\n     * using their unique, readable names where possible.\n     */ reid() {\n        const nodeLabels = Object.fromEntries(Object.values(this.nodes).map((node)=>[\n                node.id,\n                node.name\n            ]));\n        const nodeLabelCounts = new Map();\n        Object.values(nodeLabels).forEach((label)=>{\n            nodeLabelCounts.set(label, (nodeLabelCounts.get(label) || 0) + 1);\n        });\n        const getNodeId = (nodeId)=>{\n            const label = nodeLabels[nodeId];\n            if ((0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(nodeId) && nodeLabelCounts.get(label) === 1) {\n                return label;\n            } else {\n                return nodeId;\n            }\n        };\n        return new Graph({\n            nodes: Object.fromEntries(Object.entries(this.nodes).map(([id, node])=>[\n                    getNodeId(id),\n                    {\n                        ...node,\n                        id: getNodeId(id)\n                    }\n                ])),\n            edges: this.edges.map((edge)=>({\n                    ...edge,\n                    source: getNodeId(edge.source),\n                    target: getNodeId(edge.target)\n                }))\n        });\n    }\n    drawMermaid(params) {\n        const { withStyles, curveStyle, nodeColors = {\n            default: \"fill:#f2f0ff,line-height:1.2\",\n            first: \"fill-opacity:0\",\n            last: \"fill:#bfb6fc\"\n        }, wrapLabelNWords } = params ?? {};\n        const graph = this.reid();\n        const firstNode = graph.firstNode();\n        const lastNode = graph.lastNode();\n        return (0,_graph_mermaid_js__WEBPACK_IMPORTED_MODULE_2__.drawMermaid)(graph.nodes, graph.edges, {\n            firstNode: firstNode?.id,\n            lastNode: lastNode?.id,\n            withStyles,\n            curveStyle,\n            nodeColors,\n            wrapLabelNWords\n        });\n    }\n    async drawMermaidPng(params) {\n        const mermaidSyntax = this.drawMermaid(params);\n        return (0,_graph_mermaid_js__WEBPACK_IMPORTED_MODULE_2__.drawMermaidPng)(mermaidSyntax, {\n            backgroundColor: params?.backgroundColor\n        });\n    }\n}\n/**\n * Find the single node that is not a target of any edge.\n * Exclude nodes/sources with ids in the exclude list.\n * If there is no such node, or there are multiple, return undefined.\n * When drawing the graph, this node would be the origin.\n */ function _firstNode(graph, exclude = []) {\n    const targets = new Set(graph.edges.filter((edge)=>!exclude.includes(edge.source)).map((edge)=>edge.target));\n    const found = [];\n    for (const node of Object.values(graph.nodes)){\n        if (!exclude.includes(node.id) && !targets.has(node.id)) {\n            found.push(node);\n        }\n    }\n    return found.length === 1 ? found[0] : undefined;\n}\n/**\n * Find the single node that is not a source of any edge.\n * Exclude nodes/targets with ids in the exclude list.\n * If there is no such node, or there are multiple, return undefined.\n * When drawing the graph, this node would be the destination.\n */ function _lastNode(graph, exclude = []) {\n    const sources = new Set(graph.edges.filter((edge)=>!exclude.includes(edge.target)).map((edge)=>edge.source));\n    const found = [];\n    for (const node of Object.values(graph.nodes)){\n        if (!exclude.includes(node.id) && !sources.has(node.id)) {\n            found.push(node);\n        }\n    }\n    return found.length === 1 ? found[0] : undefined;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2dyYXBoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUNHO0FBQ1A7QUFDZ0I7QUFDakUsU0FBU1EsWUFBWUMsRUFBRSxFQUFFQyxJQUFJO0lBQ3pCLElBQUlELE9BQU9FLGFBQWEsQ0FBQ1AsZ0RBQU1BLENBQUNLLEtBQUs7UUFDakMsT0FBT0E7SUFDWCxPQUNLLElBQUlKLDhEQUFtQkEsQ0FBQ0ssT0FBTztRQUNoQyxJQUFJO1lBQ0EsSUFBSUUsVUFBVUYsS0FBS0csT0FBTztZQUMxQkQsVUFBVUEsUUFBUUUsVUFBVSxDQUFDLGNBQ3ZCRixRQUFRRyxLQUFLLENBQUMsV0FBV0MsTUFBTSxJQUMvQko7WUFDTixPQUFPQTtRQUNYLEVBQ0EsT0FBT0ssT0FBTztZQUNWLE9BQU9QLEtBQUtHLE9BQU87UUFDdkI7SUFDSixPQUNLO1FBQ0QsT0FBT0gsS0FBS1EsSUFBSSxJQUFJO0lBQ3hCO0FBQ0o7QUFDQSxTQUFTQyxhQUFhQyxJQUFJO0lBQ3RCLG1DQUFtQztJQUNuQyxJQUFJZiw4REFBbUJBLENBQUNlLEtBQUtWLElBQUksR0FBRztRQUNoQyxPQUFPO1lBQ0hXLE1BQU07WUFDTlgsTUFBTTtnQkFDRkQsSUFBSVcsS0FBS1YsSUFBSSxDQUFDWSxLQUFLO2dCQUNuQkosTUFBTUUsS0FBS1YsSUFBSSxDQUFDRyxPQUFPO1lBQzNCO1FBQ0o7SUFDSixPQUNLO1FBQ0QsT0FBTztZQUNIUSxNQUFNO1lBQ05YLE1BQU07Z0JBQUUsR0FBR1YsbUVBQWVBLENBQUNvQixLQUFLVixJQUFJLENBQUNhLE1BQU0sQ0FBQztnQkFBRUMsT0FBT0osS0FBS1YsSUFBSSxDQUFDUSxJQUFJO1lBQUM7UUFDeEU7SUFDSjtBQUNKO0FBQ08sTUFBTU87SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFNBQVM7WUFDakNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sQ0FBQztRQUNaO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUztZQUNqQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxFQUFFO1FBQ2I7UUFDQSxJQUFJLENBQUNDLEtBQUssR0FBR1AsUUFBUU8sU0FBUyxJQUFJLENBQUNBLEtBQUs7UUFDeEMsSUFBSSxDQUFDQyxLQUFLLEdBQUdSLFFBQVFRLFNBQVMsSUFBSSxDQUFDQSxLQUFLO0lBQzVDO0lBQ0EsbURBQW1EO0lBQ25ELDhEQUE4RDtJQUM5REMsU0FBUztRQUNMLE1BQU1DLGdCQUFnQixDQUFDO1FBQ3ZCVCxPQUFPVSxNQUFNLENBQUMsSUFBSSxDQUFDSixLQUFLLEVBQUVLLE9BQU8sQ0FBQyxDQUFDbkIsTUFBTW9CO1lBQ3JDSCxhQUFhLENBQUNqQixLQUFLWCxFQUFFLENBQUMsR0FBR0wsZ0RBQU1BLENBQUNnQixLQUFLWCxFQUFFLElBQUkrQixJQUFJcEIsS0FBS1gsRUFBRTtRQUMxRDtRQUNBLE9BQU87WUFDSHlCLE9BQU9OLE9BQU9VLE1BQU0sQ0FBQyxJQUFJLENBQUNKLEtBQUssRUFBRU8sR0FBRyxDQUFDLENBQUNyQixPQUFVO29CQUM1Q1gsSUFBSTRCLGFBQWEsQ0FBQ2pCLEtBQUtYLEVBQUUsQ0FBQztvQkFDMUIsR0FBR1UsYUFBYUMsS0FBSztnQkFDekI7WUFDQWUsT0FBTyxJQUFJLENBQUNBLEtBQUssQ0FBQ00sR0FBRyxDQUFDLENBQUNDO2dCQUNuQixNQUFNQyxPQUFPO29CQUNUQyxRQUFRUCxhQUFhLENBQUNLLEtBQUtFLE1BQU0sQ0FBQztvQkFDbENDLFFBQVFSLGFBQWEsQ0FBQ0ssS0FBS0csTUFBTSxDQUFDO2dCQUN0QztnQkFDQSxJQUFJLE9BQU9ILEtBQUtoQyxJQUFJLEtBQUssYUFBYTtvQkFDbENpQyxLQUFLakMsSUFBSSxHQUFHZ0MsS0FBS2hDLElBQUk7Z0JBQ3pCO2dCQUNBLElBQUksT0FBT2dDLEtBQUtJLFdBQVcsS0FBSyxhQUFhO29CQUN6Q0gsS0FBS0csV0FBVyxHQUFHSixLQUFLSSxXQUFXO2dCQUN2QztnQkFDQSxPQUFPSDtZQUNYO1FBQ0o7SUFDSjtJQUNBSSxRQUFRckMsSUFBSSxFQUFFRCxFQUFFLEVBQ2hCLDhEQUE4RDtJQUM5RHVDLFFBQVEsRUFBRTtRQUNOLElBQUl2QyxPQUFPRSxhQUFhLElBQUksQ0FBQ3VCLEtBQUssQ0FBQ3pCLEdBQUcsS0FBS0UsV0FBVztZQUNsRCxNQUFNLElBQUlzQyxNQUFNLENBQUMsYUFBYSxFQUFFeEMsR0FBRyxlQUFlLENBQUM7UUFDdkQ7UUFDQSxNQUFNeUMsU0FBU3pDLE1BQU1QLGdEQUFNQTtRQUMzQixNQUFNa0IsT0FBTztZQUNUWCxJQUFJeUM7WUFDSnhDO1lBQ0FRLE1BQU1WLFlBQVlDLElBQUlDO1lBQ3RCc0M7UUFDSjtRQUNBLElBQUksQ0FBQ2QsS0FBSyxDQUFDZ0IsT0FBTyxHQUFHOUI7UUFDckIsT0FBT0E7SUFDWDtJQUNBK0IsV0FBVy9CLElBQUksRUFBRTtRQUNiLHFDQUFxQztRQUNyQyxPQUFPLElBQUksQ0FBQ2MsS0FBSyxDQUFDZCxLQUFLWCxFQUFFLENBQUM7UUFDMUIseUNBQXlDO1FBQ3pDLElBQUksQ0FBQzBCLEtBQUssR0FBRyxJQUFJLENBQUNBLEtBQUssQ0FBQ2lCLE1BQU0sQ0FBQyxDQUFDVixPQUFTQSxLQUFLRSxNQUFNLEtBQUt4QixLQUFLWCxFQUFFLElBQUlpQyxLQUFLRyxNQUFNLEtBQUt6QixLQUFLWCxFQUFFO0lBQy9GO0lBQ0E0QyxRQUFRVCxNQUFNLEVBQUVDLE1BQU0sRUFBRW5DLElBQUksRUFBRW9DLFdBQVcsRUFBRTtRQUN2QyxJQUFJLElBQUksQ0FBQ1osS0FBSyxDQUFDVSxPQUFPbkMsRUFBRSxDQUFDLEtBQUtFLFdBQVc7WUFDckMsTUFBTSxJQUFJc0MsTUFBTSxDQUFDLFlBQVksRUFBRUwsT0FBT25DLEVBQUUsQ0FBQyxhQUFhLENBQUM7UUFDM0Q7UUFDQSxJQUFJLElBQUksQ0FBQ3lCLEtBQUssQ0FBQ1csT0FBT3BDLEVBQUUsQ0FBQyxLQUFLRSxXQUFXO1lBQ3JDLE1BQU0sSUFBSXNDLE1BQU0sQ0FBQyxZQUFZLEVBQUVKLE9BQU9wQyxFQUFFLENBQUMsYUFBYSxDQUFDO1FBQzNEO1FBQ0EsTUFBTWlDLE9BQU87WUFDVEUsUUFBUUEsT0FBT25DLEVBQUU7WUFDakJvQyxRQUFRQSxPQUFPcEMsRUFBRTtZQUNqQkM7WUFDQW9DO1FBQ0o7UUFDQSxJQUFJLENBQUNYLEtBQUssQ0FBQ21CLElBQUksQ0FBQ1o7UUFDaEIsT0FBT0E7SUFDWDtJQUNBYSxZQUFZO1FBQ1IsT0FBT0MsV0FBVyxJQUFJO0lBQzFCO0lBQ0FDLFdBQVc7UUFDUCxPQUFPQyxVQUFVLElBQUk7SUFDekI7SUFDQTs7O0tBR0MsR0FDREMsT0FBT0MsS0FBSyxFQUFFQyxTQUFTLEVBQUUsRUFBRTtRQUN2QixJQUFJQyxjQUFjRDtRQUNsQixNQUFNRSxVQUFVbkMsT0FBT1UsTUFBTSxDQUFDc0IsTUFBTTFCLEtBQUssRUFBRU8sR0FBRyxDQUFDLENBQUNyQixPQUFTQSxLQUFLWCxFQUFFO1FBQ2hFLElBQUlzRCxRQUFRQyxLQUFLLENBQUM1RCw0Q0FBTUEsR0FBRztZQUN2QjBELGNBQWM7UUFDbEI7UUFDQSxNQUFNRyxXQUFXLENBQUN4RDtZQUNkLE9BQU9xRCxjQUFjLENBQUMsRUFBRUEsWUFBWSxDQUFDLEVBQUVyRCxHQUFHLENBQUMsR0FBR0E7UUFDbEQ7UUFDQW1CLE9BQU9zQyxPQUFPLENBQUNOLE1BQU0xQixLQUFLLEVBQUVLLE9BQU8sQ0FBQyxDQUFDLENBQUM0QixLQUFLbEMsTUFBTTtZQUM3QyxJQUFJLENBQUNDLEtBQUssQ0FBQytCLFNBQVNFLEtBQUssR0FBRztnQkFBRSxHQUFHbEMsS0FBSztnQkFBRXhCLElBQUl3RCxTQUFTRTtZQUFLO1FBQzlEO1FBQ0EsTUFBTUMsV0FBV1IsTUFBTXpCLEtBQUssQ0FBQ00sR0FBRyxDQUFDLENBQUNDO1lBQzlCLE9BQU87Z0JBQ0gsR0FBR0EsSUFBSTtnQkFDUEUsUUFBUXFCLFNBQVN2QixLQUFLRSxNQUFNO2dCQUM1QkMsUUFBUW9CLFNBQVN2QixLQUFLRyxNQUFNO1lBQ2hDO1FBQ0o7UUFDQSxxQ0FBcUM7UUFDckMsSUFBSSxDQUFDVixLQUFLLEdBQUc7ZUFBSSxJQUFJLENBQUNBLEtBQUs7ZUFBS2lDO1NBQVM7UUFDekMsTUFBTUMsUUFBUVQsTUFBTUwsU0FBUztRQUM3QixNQUFNZSxPQUFPVixNQUFNSCxRQUFRO1FBQzNCLE9BQU87WUFDSFksUUFBUTtnQkFBRTVELElBQUl3RCxTQUFTSSxNQUFNNUQsRUFBRTtnQkFBR0MsTUFBTTJELE1BQU0zRCxJQUFJO1lBQUMsSUFBSUM7WUFDdkQyRCxPQUFPO2dCQUFFN0QsSUFBSXdELFNBQVNLLEtBQUs3RCxFQUFFO2dCQUFHQyxNQUFNNEQsS0FBSzVELElBQUk7WUFBQyxJQUFJQztTQUN2RDtJQUNMO0lBQ0E0RCxnQkFBZ0I7UUFDWixNQUFNaEIsWUFBWSxJQUFJLENBQUNBLFNBQVM7UUFDaEMsSUFBSUEsYUFBYUMsV0FBVyxJQUFJLEVBQUU7WUFBQ0QsVUFBVTlDLEVBQUU7U0FBQyxHQUFHO1lBQy9DLElBQUksQ0FBQzBDLFVBQVUsQ0FBQ0k7UUFDcEI7SUFDSjtJQUNBaUIsZUFBZTtRQUNYLE1BQU1mLFdBQVcsSUFBSSxDQUFDQSxRQUFRO1FBQzlCLElBQUlBLFlBQVlDLFVBQVUsSUFBSSxFQUFFO1lBQUNELFNBQVNoRCxFQUFFO1NBQUMsR0FBRztZQUM1QyxJQUFJLENBQUMwQyxVQUFVLENBQUNNO1FBQ3BCO0lBQ0o7SUFDQTs7O0tBR0MsR0FDRGdCLE9BQU87UUFDSCxNQUFNQyxhQUFhOUMsT0FBTytDLFdBQVcsQ0FBQy9DLE9BQU9VLE1BQU0sQ0FBQyxJQUFJLENBQUNKLEtBQUssRUFBRU8sR0FBRyxDQUFDLENBQUNyQixPQUFTO2dCQUFDQSxLQUFLWCxFQUFFO2dCQUFFVyxLQUFLRixJQUFJO2FBQUM7UUFDbEcsTUFBTTBELGtCQUFrQixJQUFJQztRQUM1QmpELE9BQU9VLE1BQU0sQ0FBQ29DLFlBQVluQyxPQUFPLENBQUMsQ0FBQ3VDO1lBQy9CRixnQkFBZ0JHLEdBQUcsQ0FBQ0QsT0FBTyxDQUFDRixnQkFBZ0JJLEdBQUcsQ0FBQ0YsVUFBVSxLQUFLO1FBQ25FO1FBQ0EsTUFBTUcsWUFBWSxDQUFDL0I7WUFDZixNQUFNNEIsUUFBUUosVUFBVSxDQUFDeEIsT0FBTztZQUNoQyxJQUFJOUMsZ0RBQU1BLENBQUM4QyxXQUFXMEIsZ0JBQWdCSSxHQUFHLENBQUNGLFdBQVcsR0FBRztnQkFDcEQsT0FBT0E7WUFDWCxPQUNLO2dCQUNELE9BQU81QjtZQUNYO1FBQ0o7UUFDQSxPQUFPLElBQUl6QixNQUFNO1lBQ2JTLE9BQU9OLE9BQU8rQyxXQUFXLENBQUMvQyxPQUFPc0MsT0FBTyxDQUFDLElBQUksQ0FBQ2hDLEtBQUssRUFBRU8sR0FBRyxDQUFDLENBQUMsQ0FBQ2hDLElBQUlXLEtBQUssR0FBSztvQkFDckU2RCxVQUFVeEU7b0JBQ1Y7d0JBQUUsR0FBR1csSUFBSTt3QkFBRVgsSUFBSXdFLFVBQVV4RTtvQkFBSTtpQkFDaEM7WUFDRDBCLE9BQU8sSUFBSSxDQUFDQSxLQUFLLENBQUNNLEdBQUcsQ0FBQyxDQUFDQyxPQUFVO29CQUM3QixHQUFHQSxJQUFJO29CQUNQRSxRQUFRcUMsVUFBVXZDLEtBQUtFLE1BQU07b0JBQzdCQyxRQUFRb0MsVUFBVXZDLEtBQUtHLE1BQU07Z0JBQ2pDO1FBQ0o7SUFDSjtJQUNBdkMsWUFBWXFCLE1BQU0sRUFBRTtRQUNoQixNQUFNLEVBQUV1RCxVQUFVLEVBQUVDLFVBQVUsRUFBRUMsYUFBYTtZQUN6Q0MsU0FBUztZQUNUaEIsT0FBTztZQUNQQyxNQUFNO1FBQ1YsQ0FBQyxFQUFFZ0IsZUFBZSxFQUFHLEdBQUczRCxVQUFVLENBQUM7UUFDbkMsTUFBTWlDLFFBQVEsSUFBSSxDQUFDYSxJQUFJO1FBQ3ZCLE1BQU1sQixZQUFZSyxNQUFNTCxTQUFTO1FBQ2pDLE1BQU1FLFdBQVdHLE1BQU1ILFFBQVE7UUFDL0IsT0FBT25ELDhEQUFXQSxDQUFDc0QsTUFBTTFCLEtBQUssRUFBRTBCLE1BQU16QixLQUFLLEVBQUU7WUFDekNvQixXQUFXQSxXQUFXOUM7WUFDdEJnRCxVQUFVQSxVQUFVaEQ7WUFDcEJ5RTtZQUNBQztZQUNBQztZQUNBRTtRQUNKO0lBQ0o7SUFDQSxNQUFNL0UsZUFBZW9CLE1BQU0sRUFBRTtRQUN6QixNQUFNNEQsZ0JBQWdCLElBQUksQ0FBQ2pGLFdBQVcsQ0FBQ3FCO1FBQ3ZDLE9BQU9wQixpRUFBY0EsQ0FBQ2dGLGVBQWU7WUFDakNDLGlCQUFpQjdELFFBQVE2RDtRQUM3QjtJQUNKO0FBQ0o7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVNoQyxXQUFXSSxLQUFLLEVBQUU2QixVQUFVLEVBQUU7SUFDbkMsTUFBTUMsVUFBVSxJQUFJQyxJQUFJL0IsTUFBTXpCLEtBQUssQ0FDOUJpQixNQUFNLENBQUMsQ0FBQ1YsT0FBUyxDQUFDK0MsUUFBUUcsUUFBUSxDQUFDbEQsS0FBS0UsTUFBTSxHQUM5Q0gsR0FBRyxDQUFDLENBQUNDLE9BQVNBLEtBQUtHLE1BQU07SUFDOUIsTUFBTWdELFFBQVEsRUFBRTtJQUNoQixLQUFLLE1BQU16RSxRQUFRUSxPQUFPVSxNQUFNLENBQUNzQixNQUFNMUIsS0FBSyxFQUFHO1FBQzNDLElBQUksQ0FBQ3VELFFBQVFHLFFBQVEsQ0FBQ3hFLEtBQUtYLEVBQUUsS0FBSyxDQUFDaUYsUUFBUUksR0FBRyxDQUFDMUUsS0FBS1gsRUFBRSxHQUFHO1lBQ3JEb0YsTUFBTXZDLElBQUksQ0FBQ2xDO1FBQ2Y7SUFDSjtJQUNBLE9BQU95RSxNQUFNN0UsTUFBTSxLQUFLLElBQUk2RSxLQUFLLENBQUMsRUFBRSxHQUFHbEY7QUFDM0M7QUFDQTs7Ozs7Q0FLQyxHQUNELFNBQVMrQyxVQUFVRSxLQUFLLEVBQUU2QixVQUFVLEVBQUU7SUFDbEMsTUFBTU0sVUFBVSxJQUFJSixJQUFJL0IsTUFBTXpCLEtBQUssQ0FDOUJpQixNQUFNLENBQUMsQ0FBQ1YsT0FBUyxDQUFDK0MsUUFBUUcsUUFBUSxDQUFDbEQsS0FBS0csTUFBTSxHQUM5Q0osR0FBRyxDQUFDLENBQUNDLE9BQVNBLEtBQUtFLE1BQU07SUFDOUIsTUFBTWlELFFBQVEsRUFBRTtJQUNoQixLQUFLLE1BQU16RSxRQUFRUSxPQUFPVSxNQUFNLENBQUNzQixNQUFNMUIsS0FBSyxFQUFHO1FBQzNDLElBQUksQ0FBQ3VELFFBQVFHLFFBQVEsQ0FBQ3hFLEtBQUtYLEVBQUUsS0FBSyxDQUFDc0YsUUFBUUQsR0FBRyxDQUFDMUUsS0FBS1gsRUFBRSxHQUFHO1lBQ3JEb0YsTUFBTXZDLElBQUksQ0FBQ2xDO1FBQ2Y7SUFDSjtJQUNBLE9BQU95RSxNQUFNN0UsTUFBTSxLQUFLLElBQUk2RSxLQUFLLENBQUMsRUFBRSxHQUFHbEY7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvZ3JhcGguanM/MzQxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6b2RUb0pzb25TY2hlbWEgfSBmcm9tIFwiem9kLXRvLWpzb24tc2NoZW1hXCI7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQsIHZhbGlkYXRlIGFzIGlzVXVpZCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgeyBpc1J1bm5hYmxlSW50ZXJmYWNlIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbmltcG9ydCB7IGRyYXdNZXJtYWlkLCBkcmF3TWVybWFpZFBuZyB9IGZyb20gXCIuL2dyYXBoX21lcm1haWQuanNcIjtcbmZ1bmN0aW9uIG5vZGVEYXRhU3RyKGlkLCBkYXRhKSB7XG4gICAgaWYgKGlkICE9PSB1bmRlZmluZWQgJiYgIWlzVXVpZChpZCkpIHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1J1bm5hYmxlSW50ZXJmYWNlKGRhdGEpKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgZGF0YVN0ciA9IGRhdGEuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgZGF0YVN0ciA9IGRhdGFTdHIuc3RhcnRzV2l0aChcIlJ1bm5hYmxlXCIpXG4gICAgICAgICAgICAgICAgPyBkYXRhU3RyLnNsaWNlKFwiUnVubmFibGVcIi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgOiBkYXRhU3RyO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFTdHI7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5nZXROYW1lKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBkYXRhLm5hbWUgPz8gXCJVbmtub3duU2NoZW1hXCI7XG4gICAgfVxufVxuZnVuY3Rpb24gbm9kZURhdGFKc29uKG5vZGUpIHtcbiAgICAvLyBpZiBub2RlLmRhdGEgaW1wbGVtZW50cyBSdW5uYWJsZVxuICAgIGlmIChpc1J1bm5hYmxlSW50ZXJmYWNlKG5vZGUuZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwicnVubmFibGVcIixcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBpZDogbm9kZS5kYXRhLmxjX2lkLFxuICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUuZGF0YS5nZXROYW1lKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwic2NoZW1hXCIsXG4gICAgICAgICAgICBkYXRhOiB7IC4uLnpvZFRvSnNvblNjaGVtYShub2RlLmRhdGEuc2NoZW1hKSwgdGl0bGU6IG5vZGUuZGF0YS5uYW1lIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEdyYXBoIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibm9kZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJlZGdlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm9kZXMgPSBwYXJhbXM/Lm5vZGVzID8/IHRoaXMubm9kZXM7XG4gICAgICAgIHRoaXMuZWRnZXMgPSBwYXJhbXM/LmVkZ2VzID8/IHRoaXMuZWRnZXM7XG4gICAgfVxuICAgIC8vIENvbnZlcnQgdGhlIGdyYXBoIHRvIGEgSlNPTi1zZXJpYWxpemFibGUgZm9ybWF0LlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdG9KU09OKCkge1xuICAgICAgICBjb25zdCBzdGFibGVOb2RlSWRzID0ge307XG4gICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5ub2RlcykuZm9yRWFjaCgobm9kZSwgaSkgPT4ge1xuICAgICAgICAgICAgc3RhYmxlTm9kZUlkc1tub2RlLmlkXSA9IGlzVXVpZChub2RlLmlkKSA/IGkgOiBub2RlLmlkO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5vZGVzOiBPYmplY3QudmFsdWVzKHRoaXMubm9kZXMpLm1hcCgobm9kZSkgPT4gKHtcbiAgICAgICAgICAgICAgICBpZDogc3RhYmxlTm9kZUlkc1tub2RlLmlkXSxcbiAgICAgICAgICAgICAgICAuLi5ub2RlRGF0YUpzb24obm9kZSksXG4gICAgICAgICAgICB9KSksXG4gICAgICAgICAgICBlZGdlczogdGhpcy5lZGdlcy5tYXAoKGVkZ2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHN0YWJsZU5vZGVJZHNbZWRnZS5zb3VyY2VdLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHN0YWJsZU5vZGVJZHNbZWRnZS50YXJnZXRdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlZGdlLmRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5kYXRhID0gZWRnZS5kYXRhO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVkZ2UuY29uZGl0aW9uYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jb25kaXRpb25hbCA9IGVkZ2UuY29uZGl0aW9uYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFkZE5vZGUoZGF0YSwgaWQsIFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbWV0YWRhdGEpIHtcbiAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQgJiYgdGhpcy5ub2Rlc1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb2RlIHdpdGggaWQgJHtpZH0gYWxyZWFkeSBleGlzdHNgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlSWQgPSBpZCA/PyB1dWlkdjQoKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHtcbiAgICAgICAgICAgIGlkOiBub2RlSWQsXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgbmFtZTogbm9kZURhdGFTdHIoaWQsIGRhdGEpLFxuICAgICAgICAgICAgbWV0YWRhdGEsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubm9kZXNbbm9kZUlkXSA9IG5vZGU7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICByZW1vdmVOb2RlKG5vZGUpIHtcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBub2RlIGZyb20gdGhlIG5vZGVzIG1hcFxuICAgICAgICBkZWxldGUgdGhpcy5ub2Rlc1tub2RlLmlkXTtcbiAgICAgICAgLy8gRmlsdGVyIG91dCBlZGdlcyBjb25uZWN0ZWQgdG8gdGhlIG5vZGVcbiAgICAgICAgdGhpcy5lZGdlcyA9IHRoaXMuZWRnZXMuZmlsdGVyKChlZGdlKSA9PiBlZGdlLnNvdXJjZSAhPT0gbm9kZS5pZCAmJiBlZGdlLnRhcmdldCAhPT0gbm9kZS5pZCk7XG4gICAgfVxuICAgIGFkZEVkZ2Uoc291cmNlLCB0YXJnZXQsIGRhdGEsIGNvbmRpdGlvbmFsKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVzW3NvdXJjZS5pZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTb3VyY2Ugbm9kZSAke3NvdXJjZS5pZH0gbm90IGluIGdyYXBoYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubm9kZXNbdGFyZ2V0LmlkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRhcmdldCBub2RlICR7dGFyZ2V0LmlkfSBub3QgaW4gZ3JhcGhgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlZGdlID0ge1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UuaWQsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldC5pZCxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBjb25kaXRpb25hbCxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lZGdlcy5wdXNoKGVkZ2UpO1xuICAgICAgICByZXR1cm4gZWRnZTtcbiAgICB9XG4gICAgZmlyc3ROb2RlKCkge1xuICAgICAgICByZXR1cm4gX2ZpcnN0Tm9kZSh0aGlzKTtcbiAgICB9XG4gICAgbGFzdE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBfbGFzdE5vZGUodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhbGwgbm9kZXMgYW5kIGVkZ2VzIGZyb20gYW5vdGhlciBncmFwaC5cbiAgICAgKiBOb3RlIHRoaXMgZG9lc24ndCBjaGVjayBmb3IgZHVwbGljYXRlcywgbm9yIGRvZXMgaXQgY29ubmVjdCB0aGUgZ3JhcGhzLlxuICAgICAqL1xuICAgIGV4dGVuZChncmFwaCwgcHJlZml4ID0gXCJcIikge1xuICAgICAgICBsZXQgZmluYWxQcmVmaXggPSBwcmVmaXg7XG4gICAgICAgIGNvbnN0IG5vZGVJZHMgPSBPYmplY3QudmFsdWVzKGdyYXBoLm5vZGVzKS5tYXAoKG5vZGUpID0+IG5vZGUuaWQpO1xuICAgICAgICBpZiAobm9kZUlkcy5ldmVyeShpc1V1aWQpKSB7XG4gICAgICAgICAgICBmaW5hbFByZWZpeCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJlZml4ZWQgPSAoaWQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmaW5hbFByZWZpeCA/IGAke2ZpbmFsUHJlZml4fToke2lkfWAgOiBpZDtcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZ3JhcGgubm9kZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5ub2Rlc1twcmVmaXhlZChrZXkpXSA9IHsgLi4udmFsdWUsIGlkOiBwcmVmaXhlZChrZXkpIH07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBuZXdFZGdlcyA9IGdyYXBoLmVkZ2VzLm1hcCgoZWRnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5lZGdlLFxuICAgICAgICAgICAgICAgIHNvdXJjZTogcHJlZml4ZWQoZWRnZS5zb3VyY2UpLFxuICAgICAgICAgICAgICAgIHRhcmdldDogcHJlZml4ZWQoZWRnZS50YXJnZXQpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEFkZCBhbGwgZWRnZXMgZnJvbSB0aGUgb3RoZXIgZ3JhcGhcbiAgICAgICAgdGhpcy5lZGdlcyA9IFsuLi50aGlzLmVkZ2VzLCAuLi5uZXdFZGdlc107XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gZ3JhcGguZmlyc3ROb2RlKCk7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBncmFwaC5sYXN0Tm9kZSgpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgZmlyc3QgPyB7IGlkOiBwcmVmaXhlZChmaXJzdC5pZCksIGRhdGE6IGZpcnN0LmRhdGEgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxhc3QgPyB7IGlkOiBwcmVmaXhlZChsYXN0LmlkKSwgZGF0YTogbGFzdC5kYXRhIH0gOiB1bmRlZmluZWQsXG4gICAgICAgIF07XG4gICAgfVxuICAgIHRyaW1GaXJzdE5vZGUoKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0Tm9kZSA9IHRoaXMuZmlyc3ROb2RlKCk7XG4gICAgICAgIGlmIChmaXJzdE5vZGUgJiYgX2ZpcnN0Tm9kZSh0aGlzLCBbZmlyc3ROb2RlLmlkXSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTm9kZShmaXJzdE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyaW1MYXN0Tm9kZSgpIHtcbiAgICAgICAgY29uc3QgbGFzdE5vZGUgPSB0aGlzLmxhc3ROb2RlKCk7XG4gICAgICAgIGlmIChsYXN0Tm9kZSAmJiBfbGFzdE5vZGUodGhpcywgW2xhc3ROb2RlLmlkXSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTm9kZShsYXN0Tm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgbmV3IGdyYXBoIHdpdGggYWxsIG5vZGVzIHJlLWlkZW50aWZpZWQsXG4gICAgICogdXNpbmcgdGhlaXIgdW5pcXVlLCByZWFkYWJsZSBuYW1lcyB3aGVyZSBwb3NzaWJsZS5cbiAgICAgKi9cbiAgICByZWlkKCkge1xuICAgICAgICBjb25zdCBub2RlTGFiZWxzID0gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC52YWx1ZXModGhpcy5ub2RlcykubWFwKChub2RlKSA9PiBbbm9kZS5pZCwgbm9kZS5uYW1lXSkpO1xuICAgICAgICBjb25zdCBub2RlTGFiZWxDb3VudHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIE9iamVjdC52YWx1ZXMobm9kZUxhYmVscykuZm9yRWFjaCgobGFiZWwpID0+IHtcbiAgICAgICAgICAgIG5vZGVMYWJlbENvdW50cy5zZXQobGFiZWwsIChub2RlTGFiZWxDb3VudHMuZ2V0KGxhYmVsKSB8fCAwKSArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZ2V0Tm9kZUlkID0gKG5vZGVJZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBub2RlTGFiZWxzW25vZGVJZF07XG4gICAgICAgICAgICBpZiAoaXNVdWlkKG5vZGVJZCkgJiYgbm9kZUxhYmVsQ291bnRzLmdldChsYWJlbCkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZUlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IEdyYXBoKHtcbiAgICAgICAgICAgIG5vZGVzOiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXModGhpcy5ub2RlcykubWFwKChbaWQsIG5vZGVdKSA9PiBbXG4gICAgICAgICAgICAgICAgZ2V0Tm9kZUlkKGlkKSxcbiAgICAgICAgICAgICAgICB7IC4uLm5vZGUsIGlkOiBnZXROb2RlSWQoaWQpIH0sXG4gICAgICAgICAgICBdKSksXG4gICAgICAgICAgICBlZGdlczogdGhpcy5lZGdlcy5tYXAoKGVkZ2UpID0+ICh7XG4gICAgICAgICAgICAgICAgLi4uZWRnZSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IGdldE5vZGVJZChlZGdlLnNvdXJjZSksXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBnZXROb2RlSWQoZWRnZS50YXJnZXQpLFxuICAgICAgICAgICAgfSkpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhd01lcm1haWQocGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHsgd2l0aFN0eWxlcywgY3VydmVTdHlsZSwgbm9kZUNvbG9ycyA9IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IFwiZmlsbDojZjJmMGZmLGxpbmUtaGVpZ2h0OjEuMlwiLFxuICAgICAgICAgICAgZmlyc3Q6IFwiZmlsbC1vcGFjaXR5OjBcIixcbiAgICAgICAgICAgIGxhc3Q6IFwiZmlsbDojYmZiNmZjXCIsXG4gICAgICAgIH0sIHdyYXBMYWJlbE5Xb3JkcywgfSA9IHBhcmFtcyA/PyB7fTtcbiAgICAgICAgY29uc3QgZ3JhcGggPSB0aGlzLnJlaWQoKTtcbiAgICAgICAgY29uc3QgZmlyc3ROb2RlID0gZ3JhcGguZmlyc3ROb2RlKCk7XG4gICAgICAgIGNvbnN0IGxhc3ROb2RlID0gZ3JhcGgubGFzdE5vZGUoKTtcbiAgICAgICAgcmV0dXJuIGRyYXdNZXJtYWlkKGdyYXBoLm5vZGVzLCBncmFwaC5lZGdlcywge1xuICAgICAgICAgICAgZmlyc3ROb2RlOiBmaXJzdE5vZGU/LmlkLFxuICAgICAgICAgICAgbGFzdE5vZGU6IGxhc3ROb2RlPy5pZCxcbiAgICAgICAgICAgIHdpdGhTdHlsZXMsXG4gICAgICAgICAgICBjdXJ2ZVN0eWxlLFxuICAgICAgICAgICAgbm9kZUNvbG9ycyxcbiAgICAgICAgICAgIHdyYXBMYWJlbE5Xb3JkcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGRyYXdNZXJtYWlkUG5nKHBhcmFtcykge1xuICAgICAgICBjb25zdCBtZXJtYWlkU3ludGF4ID0gdGhpcy5kcmF3TWVybWFpZChwYXJhbXMpO1xuICAgICAgICByZXR1cm4gZHJhd01lcm1haWRQbmcobWVybWFpZFN5bnRheCwge1xuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBwYXJhbXM/LmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuLyoqXG4gKiBGaW5kIHRoZSBzaW5nbGUgbm9kZSB0aGF0IGlzIG5vdCBhIHRhcmdldCBvZiBhbnkgZWRnZS5cbiAqIEV4Y2x1ZGUgbm9kZXMvc291cmNlcyB3aXRoIGlkcyBpbiB0aGUgZXhjbHVkZSBsaXN0LlxuICogSWYgdGhlcmUgaXMgbm8gc3VjaCBub2RlLCBvciB0aGVyZSBhcmUgbXVsdGlwbGUsIHJldHVybiB1bmRlZmluZWQuXG4gKiBXaGVuIGRyYXdpbmcgdGhlIGdyYXBoLCB0aGlzIG5vZGUgd291bGQgYmUgdGhlIG9yaWdpbi5cbiAqL1xuZnVuY3Rpb24gX2ZpcnN0Tm9kZShncmFwaCwgZXhjbHVkZSA9IFtdKSB7XG4gICAgY29uc3QgdGFyZ2V0cyA9IG5ldyBTZXQoZ3JhcGguZWRnZXNcbiAgICAgICAgLmZpbHRlcigoZWRnZSkgPT4gIWV4Y2x1ZGUuaW5jbHVkZXMoZWRnZS5zb3VyY2UpKVxuICAgICAgICAubWFwKChlZGdlKSA9PiBlZGdlLnRhcmdldCkpO1xuICAgIGNvbnN0IGZvdW5kID0gW107XG4gICAgZm9yIChjb25zdCBub2RlIG9mIE9iamVjdC52YWx1ZXMoZ3JhcGgubm9kZXMpKSB7XG4gICAgICAgIGlmICghZXhjbHVkZS5pbmNsdWRlcyhub2RlLmlkKSAmJiAhdGFyZ2V0cy5oYXMobm9kZS5pZCkpIHtcbiAgICAgICAgICAgIGZvdW5kLnB1c2gobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kLmxlbmd0aCA9PT0gMSA/IGZvdW5kWzBdIDogdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBGaW5kIHRoZSBzaW5nbGUgbm9kZSB0aGF0IGlzIG5vdCBhIHNvdXJjZSBvZiBhbnkgZWRnZS5cbiAqIEV4Y2x1ZGUgbm9kZXMvdGFyZ2V0cyB3aXRoIGlkcyBpbiB0aGUgZXhjbHVkZSBsaXN0LlxuICogSWYgdGhlcmUgaXMgbm8gc3VjaCBub2RlLCBvciB0aGVyZSBhcmUgbXVsdGlwbGUsIHJldHVybiB1bmRlZmluZWQuXG4gKiBXaGVuIGRyYXdpbmcgdGhlIGdyYXBoLCB0aGlzIG5vZGUgd291bGQgYmUgdGhlIGRlc3RpbmF0aW9uLlxuICovXG5mdW5jdGlvbiBfbGFzdE5vZGUoZ3JhcGgsIGV4Y2x1ZGUgPSBbXSkge1xuICAgIGNvbnN0IHNvdXJjZXMgPSBuZXcgU2V0KGdyYXBoLmVkZ2VzXG4gICAgICAgIC5maWx0ZXIoKGVkZ2UpID0+ICFleGNsdWRlLmluY2x1ZGVzKGVkZ2UudGFyZ2V0KSlcbiAgICAgICAgLm1hcCgoZWRnZSkgPT4gZWRnZS5zb3VyY2UpKTtcbiAgICBjb25zdCBmb3VuZCA9IFtdO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBPYmplY3QudmFsdWVzKGdyYXBoLm5vZGVzKSkge1xuICAgICAgICBpZiAoIWV4Y2x1ZGUuaW5jbHVkZXMobm9kZS5pZCkgJiYgIXNvdXJjZXMuaGFzKG5vZGUuaWQpKSB7XG4gICAgICAgICAgICBmb3VuZC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmb3VuZC5sZW5ndGggPT09IDEgPyBmb3VuZFswXSA6IHVuZGVmaW5lZDtcbn1cbiJdLCJuYW1lcyI6WyJ6b2RUb0pzb25TY2hlbWEiLCJ2NCIsInV1aWR2NCIsInZhbGlkYXRlIiwiaXNVdWlkIiwiaXNSdW5uYWJsZUludGVyZmFjZSIsImRyYXdNZXJtYWlkIiwiZHJhd01lcm1haWRQbmciLCJub2RlRGF0YVN0ciIsImlkIiwiZGF0YSIsInVuZGVmaW5lZCIsImRhdGFTdHIiLCJnZXROYW1lIiwic3RhcnRzV2l0aCIsInNsaWNlIiwibGVuZ3RoIiwiZXJyb3IiLCJuYW1lIiwibm9kZURhdGFKc29uIiwibm9kZSIsInR5cGUiLCJsY19pZCIsInNjaGVtYSIsInRpdGxlIiwiR3JhcGgiLCJjb25zdHJ1Y3RvciIsInBhcmFtcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJub2RlcyIsImVkZ2VzIiwidG9KU09OIiwic3RhYmxlTm9kZUlkcyIsInZhbHVlcyIsImZvckVhY2giLCJpIiwibWFwIiwiZWRnZSIsIml0ZW0iLCJzb3VyY2UiLCJ0YXJnZXQiLCJjb25kaXRpb25hbCIsImFkZE5vZGUiLCJtZXRhZGF0YSIsIkVycm9yIiwibm9kZUlkIiwicmVtb3ZlTm9kZSIsImZpbHRlciIsImFkZEVkZ2UiLCJwdXNoIiwiZmlyc3ROb2RlIiwiX2ZpcnN0Tm9kZSIsImxhc3ROb2RlIiwiX2xhc3ROb2RlIiwiZXh0ZW5kIiwiZ3JhcGgiLCJwcmVmaXgiLCJmaW5hbFByZWZpeCIsIm5vZGVJZHMiLCJldmVyeSIsInByZWZpeGVkIiwiZW50cmllcyIsImtleSIsIm5ld0VkZ2VzIiwiZmlyc3QiLCJsYXN0IiwidHJpbUZpcnN0Tm9kZSIsInRyaW1MYXN0Tm9kZSIsInJlaWQiLCJub2RlTGFiZWxzIiwiZnJvbUVudHJpZXMiLCJub2RlTGFiZWxDb3VudHMiLCJNYXAiLCJsYWJlbCIsInNldCIsImdldCIsImdldE5vZGVJZCIsIndpdGhTdHlsZXMiLCJjdXJ2ZVN0eWxlIiwibm9kZUNvbG9ycyIsImRlZmF1bHQiLCJ3cmFwTGFiZWxOV29yZHMiLCJtZXJtYWlkU3ludGF4IiwiYmFja2dyb3VuZENvbG9yIiwiZXhjbHVkZSIsInRhcmdldHMiLCJTZXQiLCJpbmNsdWRlcyIsImZvdW5kIiwiaGFzIiwic291cmNlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/graph_mermaid.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   drawMermaid: () => (/* binding */ drawMermaid),\n/* harmony export */   drawMermaidPng: () => (/* binding */ drawMermaidPng)\n/* harmony export */ });\nfunction _escapeNodeLabel(nodeLabel) {\n    // Escapes the node label for Mermaid syntax.\n    return nodeLabel.replace(/[^a-zA-Z-_0-9]/g, \"_\");\n}\nconst MARKDOWN_SPECIAL_CHARS = [\n    \"*\",\n    \"_\",\n    \"`\"\n];\nfunction _generateMermaidGraphStyles(nodeColors) {\n    let styles = \"\";\n    for (const [className, color] of Object.entries(nodeColors)){\n        styles += `\\tclassDef ${className} ${color};\\n`;\n    }\n    return styles;\n}\n/**\n * Draws a Mermaid graph using the provided graph data\n */ function drawMermaid(nodes, edges, config) {\n    const { firstNode, lastNode, nodeColors, withStyles = true, curveStyle = \"linear\", wrapLabelNWords = 9 } = config ?? {};\n    // Initialize Mermaid graph configuration\n    let mermaidGraph = withStyles ? `%%{init: {'flowchart': {'curve': '${curveStyle}'}}}%%\\ngraph TD;\\n` : \"graph TD;\\n\";\n    if (withStyles) {\n        // Node formatting templates\n        const defaultClassLabel = \"default\";\n        const formatDict = {\n            [defaultClassLabel]: \"{0}({1})\"\n        };\n        if (firstNode !== undefined) {\n            formatDict[firstNode] = \"{0}([{1}]):::first\";\n        }\n        if (lastNode !== undefined) {\n            formatDict[lastNode] = \"{0}([{1}]):::last\";\n        }\n        // Add nodes to the graph\n        for (const [key, node] of Object.entries(nodes)){\n            const nodeName = node.name.split(\":\").pop() ?? \"\";\n            const label = MARKDOWN_SPECIAL_CHARS.some((char)=>nodeName.startsWith(char) && nodeName.endsWith(char)) ? `<p>${nodeName}</p>` : nodeName;\n            let finalLabel = label;\n            if (Object.keys(node.metadata ?? {}).length) {\n                finalLabel += `<hr/><small><em>${Object.entries(node.metadata ?? {}).map(([k, v])=>`${k} = ${v}`).join(\"\\n\")}</em></small>`;\n            }\n            const nodeLabel = (formatDict[key] ?? formatDict[defaultClassLabel]).replace(\"{0}\", _escapeNodeLabel(key)).replace(\"{1}\", finalLabel);\n            mermaidGraph += `\\t${nodeLabel}\\n`;\n        }\n    }\n    // Group edges by their common prefixes\n    const edgeGroups = {};\n    for (const edge of edges){\n        const srcParts = edge.source.split(\":\");\n        const tgtParts = edge.target.split(\":\");\n        const commonPrefix = srcParts.filter((src, i)=>src === tgtParts[i]).join(\":\");\n        if (!edgeGroups[commonPrefix]) {\n            edgeGroups[commonPrefix] = [];\n        }\n        edgeGroups[commonPrefix].push(edge);\n    }\n    const seenSubgraphs = new Set();\n    function addSubgraph(edges, prefix) {\n        const selfLoop = edges.length === 1 && edges[0].source === edges[0].target;\n        if (prefix && !selfLoop) {\n            const subgraph = prefix.split(\":\").pop();\n            if (seenSubgraphs.has(subgraph)) {\n                throw new Error(`Found duplicate subgraph '${subgraph}' -- this likely means that ` + \"you're reusing a subgraph node with the same name. \" + \"Please adjust your graph to have subgraph nodes with unique names.\");\n            }\n            seenSubgraphs.add(subgraph);\n            mermaidGraph += `\\tsubgraph ${subgraph}\\n`;\n        }\n        for (const edge of edges){\n            const { source, target, data, conditional } = edge;\n            let edgeLabel = \"\";\n            if (data !== undefined) {\n                let edgeData = data;\n                const words = edgeData.split(\" \");\n                if (words.length > wrapLabelNWords) {\n                    edgeData = Array.from({\n                        length: Math.ceil(words.length / wrapLabelNWords)\n                    }, (_, i)=>words.slice(i * wrapLabelNWords, (i + 1) * wrapLabelNWords).join(\" \")).join(\"&nbsp;<br>&nbsp;\");\n                }\n                edgeLabel = conditional ? ` -. &nbsp;${edgeData}&nbsp; .-> ` : ` -- &nbsp;${edgeData}&nbsp; --> `;\n            } else {\n                edgeLabel = conditional ? \" -.-> \" : \" --> \";\n            }\n            mermaidGraph += `\\t${_escapeNodeLabel(source)}${edgeLabel}${_escapeNodeLabel(target)};\\n`;\n        }\n        // Recursively add nested subgraphs\n        for(const nestedPrefix in edgeGroups){\n            if (nestedPrefix.startsWith(`${prefix}:`) && nestedPrefix !== prefix) {\n                addSubgraph(edgeGroups[nestedPrefix], nestedPrefix);\n            }\n        }\n        if (prefix && !selfLoop) {\n            mermaidGraph += \"\tend\\n\";\n        }\n    }\n    // Start with the top-level edges (no common prefix)\n    addSubgraph(edgeGroups[\"\"] ?? [], \"\");\n    // Add remaining subgraphs\n    for(const prefix in edgeGroups){\n        if (!prefix.includes(\":\") && prefix !== \"\") {\n            addSubgraph(edgeGroups[prefix], prefix);\n        }\n    }\n    // Add custom styles for nodes\n    if (withStyles) {\n        mermaidGraph += _generateMermaidGraphStyles(nodeColors ?? {});\n    }\n    return mermaidGraph;\n}\n/**\n * Renders Mermaid graph using the Mermaid.INK API.\n */ async function drawMermaidPng(mermaidSyntax, config) {\n    let { backgroundColor = \"white\" } = config ?? {};\n    // Use btoa for compatibility, assume ASCII\n    const mermaidSyntaxEncoded = btoa(mermaidSyntax);\n    // Check if the background color is a hexadecimal color code using regex\n    if (backgroundColor !== undefined) {\n        const hexColorPattern = /^#(?:[0-9a-fA-F]{3}){1,2}$/;\n        if (!hexColorPattern.test(backgroundColor)) {\n            backgroundColor = `!${backgroundColor}`;\n        }\n    }\n    const imageUrl = `https://mermaid.ink/img/${mermaidSyntaxEncoded}?bgColor=${backgroundColor}`;\n    const res = await fetch(imageUrl);\n    if (!res.ok) {\n        throw new Error([\n            `Failed to render the graph using the Mermaid.INK API.`,\n            `Status code: ${res.status}`,\n            `Status text: ${res.statusText}`\n        ].join(\"\\n\"));\n    }\n    const content = await res.blob();\n    return content;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2dyYXBoX21lcm1haWQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxTQUFTQSxpQkFBaUJDLFNBQVM7SUFDL0IsNkNBQTZDO0lBQzdDLE9BQU9BLFVBQVVDLE9BQU8sQ0FBQyxtQkFBbUI7QUFDaEQ7QUFDQSxNQUFNQyx5QkFBeUI7SUFBQztJQUFLO0lBQUs7Q0FBSTtBQUM5QyxTQUFTQyw0QkFBNEJDLFVBQVU7SUFDM0MsSUFBSUMsU0FBUztJQUNiLEtBQUssTUFBTSxDQUFDQyxXQUFXQyxNQUFNLElBQUlDLE9BQU9DLE9BQU8sQ0FBQ0wsWUFBYTtRQUN6REMsVUFBVSxDQUFDLFdBQVcsRUFBRUMsVUFBVSxDQUFDLEVBQUVDLE1BQU0sR0FBRyxDQUFDO0lBQ25EO0lBQ0EsT0FBT0Y7QUFDWDtBQUNBOztDQUVDLEdBQ00sU0FBU0ssWUFBWUMsS0FBSyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDNUMsTUFBTSxFQUFFQyxTQUFTLEVBQUVDLFFBQVEsRUFBRVgsVUFBVSxFQUFFWSxhQUFhLElBQUksRUFBRUMsYUFBYSxRQUFRLEVBQUVDLGtCQUFrQixDQUFDLEVBQUcsR0FBR0wsVUFBVSxDQUFDO0lBQ3ZILHlDQUF5QztJQUN6QyxJQUFJTSxlQUFlSCxhQUNiLENBQUMsa0NBQWtDLEVBQUVDLFdBQVcsbUJBQW1CLENBQUMsR0FDcEU7SUFDTixJQUFJRCxZQUFZO1FBQ1osNEJBQTRCO1FBQzVCLE1BQU1JLG9CQUFvQjtRQUMxQixNQUFNQyxhQUFhO1lBQ2YsQ0FBQ0Qsa0JBQWtCLEVBQUU7UUFDekI7UUFDQSxJQUFJTixjQUFjUSxXQUFXO1lBQ3pCRCxVQUFVLENBQUNQLFVBQVUsR0FBRztRQUM1QjtRQUNBLElBQUlDLGFBQWFPLFdBQVc7WUFDeEJELFVBQVUsQ0FBQ04sU0FBUyxHQUFHO1FBQzNCO1FBQ0EseUJBQXlCO1FBQ3pCLEtBQUssTUFBTSxDQUFDUSxLQUFLQyxLQUFLLElBQUloQixPQUFPQyxPQUFPLENBQUNFLE9BQVE7WUFDN0MsTUFBTWMsV0FBV0QsS0FBS0UsSUFBSSxDQUFDQyxLQUFLLENBQUMsS0FBS0MsR0FBRyxNQUFNO1lBQy9DLE1BQU1DLFFBQVEzQix1QkFBdUI0QixJQUFJLENBQUMsQ0FBQ0MsT0FBU04sU0FBU08sVUFBVSxDQUFDRCxTQUFTTixTQUFTUSxRQUFRLENBQUNGLFNBQzdGLENBQUMsR0FBRyxFQUFFTixTQUFTLElBQUksQ0FBQyxHQUNwQkE7WUFDTixJQUFJUyxhQUFhTDtZQUNqQixJQUFJckIsT0FBTzJCLElBQUksQ0FBQ1gsS0FBS1ksUUFBUSxJQUFJLENBQUMsR0FBR0MsTUFBTSxFQUFFO2dCQUN6Q0gsY0FBYyxDQUFDLGdCQUFnQixFQUFFMUIsT0FBT0MsT0FBTyxDQUFDZSxLQUFLWSxRQUFRLElBQUksQ0FBQyxHQUM3REUsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsR0FBR0MsRUFBRSxHQUFLLENBQUMsRUFBRUQsRUFBRSxHQUFHLEVBQUVDLEVBQUUsQ0FBQyxFQUM3QkMsSUFBSSxDQUFDLE1BQU0sYUFBYSxDQUFDO1lBQ2xDO1lBQ0EsTUFBTXpDLFlBQVksQ0FBQ3FCLFVBQVUsQ0FBQ0UsSUFBSSxJQUFJRixVQUFVLENBQUNELGtCQUFrQixFQUM5RG5CLE9BQU8sQ0FBQyxPQUFPRixpQkFBaUJ3QixNQUNoQ3RCLE9BQU8sQ0FBQyxPQUFPaUM7WUFDcEJmLGdCQUFnQixDQUFDLEVBQUUsRUFBRW5CLFVBQVUsRUFBRSxDQUFDO1FBQ3RDO0lBQ0o7SUFDQSx1Q0FBdUM7SUFDdkMsTUFBTTBDLGFBQWEsQ0FBQztJQUNwQixLQUFLLE1BQU1DLFFBQVEvQixNQUFPO1FBQ3RCLE1BQU1nQyxXQUFXRCxLQUFLRSxNQUFNLENBQUNsQixLQUFLLENBQUM7UUFDbkMsTUFBTW1CLFdBQVdILEtBQUtJLE1BQU0sQ0FBQ3BCLEtBQUssQ0FBQztRQUNuQyxNQUFNcUIsZUFBZUosU0FDaEJLLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQyxJQUFNRCxRQUFRSixRQUFRLENBQUNLLEVBQUUsRUFDdENWLElBQUksQ0FBQztRQUNWLElBQUksQ0FBQ0MsVUFBVSxDQUFDTSxhQUFhLEVBQUU7WUFDM0JOLFVBQVUsQ0FBQ00sYUFBYSxHQUFHLEVBQUU7UUFDakM7UUFDQU4sVUFBVSxDQUFDTSxhQUFhLENBQUNJLElBQUksQ0FBQ1Q7SUFDbEM7SUFDQSxNQUFNVSxnQkFBZ0IsSUFBSUM7SUFDMUIsU0FBU0MsWUFBWTNDLEtBQUssRUFBRTRDLE1BQU07UUFDOUIsTUFBTUMsV0FBVzdDLE1BQU15QixNQUFNLEtBQUssS0FBS3pCLEtBQUssQ0FBQyxFQUFFLENBQUNpQyxNQUFNLEtBQUtqQyxLQUFLLENBQUMsRUFBRSxDQUFDbUMsTUFBTTtRQUMxRSxJQUFJUyxVQUFVLENBQUNDLFVBQVU7WUFDckIsTUFBTUMsV0FBV0YsT0FBTzdCLEtBQUssQ0FBQyxLQUFLQyxHQUFHO1lBQ3RDLElBQUl5QixjQUFjTSxHQUFHLENBQUNELFdBQVc7Z0JBQzdCLE1BQU0sSUFBSUUsTUFBTSxDQUFDLDBCQUEwQixFQUFFRixTQUFTLDRCQUE0QixDQUFDLEdBQy9FLHdEQUNBO1lBQ1I7WUFDQUwsY0FBY1EsR0FBRyxDQUFDSDtZQUNsQnZDLGdCQUFnQixDQUFDLFdBQVcsRUFBRXVDLFNBQVMsRUFBRSxDQUFDO1FBQzlDO1FBQ0EsS0FBSyxNQUFNZixRQUFRL0IsTUFBTztZQUN0QixNQUFNLEVBQUVpQyxNQUFNLEVBQUVFLE1BQU0sRUFBRWUsSUFBSSxFQUFFQyxXQUFXLEVBQUUsR0FBR3BCO1lBQzlDLElBQUlxQixZQUFZO1lBQ2hCLElBQUlGLFNBQVN4QyxXQUFXO2dCQUNwQixJQUFJMkMsV0FBV0g7Z0JBQ2YsTUFBTUksUUFBUUQsU0FBU3RDLEtBQUssQ0FBQztnQkFDN0IsSUFBSXVDLE1BQU03QixNQUFNLEdBQUduQixpQkFBaUI7b0JBQ2hDK0MsV0FBV0UsTUFBTUMsSUFBSSxDQUFDO3dCQUFFL0IsUUFBUWdDLEtBQUtDLElBQUksQ0FBQ0osTUFBTTdCLE1BQU0sR0FBR25CO29CQUFpQixHQUFHLENBQUNxRCxHQUFHcEIsSUFBTWUsTUFDbEZNLEtBQUssQ0FBQ3JCLElBQUlqQyxpQkFBaUIsQ0FBQ2lDLElBQUksS0FBS2pDLGlCQUNyQ3VCLElBQUksQ0FBQyxNQUFNQSxJQUFJLENBQUM7Z0JBQ3pCO2dCQUNBdUIsWUFBWUQsY0FDTixDQUFDLFVBQVUsRUFBRUUsU0FBUyxXQUFXLENBQUMsR0FDbEMsQ0FBQyxVQUFVLEVBQUVBLFNBQVMsV0FBVyxDQUFDO1lBQzVDLE9BQ0s7Z0JBQ0RELFlBQVlELGNBQWMsV0FBVztZQUN6QztZQUNBNUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFcEIsaUJBQWlCOEMsUUFBUSxFQUFFbUIsVUFBVSxFQUFFakUsaUJBQWlCZ0QsUUFBUSxHQUFHLENBQUM7UUFDN0Y7UUFDQSxtQ0FBbUM7UUFDbkMsSUFBSyxNQUFNMEIsZ0JBQWdCL0IsV0FBWTtZQUNuQyxJQUFJK0IsYUFBYXpDLFVBQVUsQ0FBQyxDQUFDLEVBQUV3QixPQUFPLENBQUMsQ0FBQyxLQUFLaUIsaUJBQWlCakIsUUFBUTtnQkFDbEVELFlBQVliLFVBQVUsQ0FBQytCLGFBQWEsRUFBRUE7WUFDMUM7UUFDSjtRQUNBLElBQUlqQixVQUFVLENBQUNDLFVBQVU7WUFDckJ0QyxnQkFBZ0I7UUFDcEI7SUFDSjtJQUNBLG9EQUFvRDtJQUNwRG9DLFlBQVliLFVBQVUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFO0lBQ2xDLDBCQUEwQjtJQUMxQixJQUFLLE1BQU1jLFVBQVVkLFdBQVk7UUFDN0IsSUFBSSxDQUFDYyxPQUFPa0IsUUFBUSxDQUFDLFFBQVFsQixXQUFXLElBQUk7WUFDeENELFlBQVliLFVBQVUsQ0FBQ2MsT0FBTyxFQUFFQTtRQUNwQztJQUNKO0lBQ0EsOEJBQThCO0lBQzlCLElBQUl4QyxZQUFZO1FBQ1pHLGdCQUFnQmhCLDRCQUE0QkMsY0FBYyxDQUFDO0lBQy9EO0lBQ0EsT0FBT2U7QUFDWDtBQUNBOztDQUVDLEdBQ00sZUFBZXdELGVBQWVDLGFBQWEsRUFBRS9ELE1BQU07SUFDdEQsSUFBSSxFQUFFZ0Usa0JBQWtCLE9BQU8sRUFBRSxHQUFHaEUsVUFBVSxDQUFDO0lBQy9DLDJDQUEyQztJQUMzQyxNQUFNaUUsdUJBQXVCQyxLQUFLSDtJQUNsQyx3RUFBd0U7SUFDeEUsSUFBSUMsb0JBQW9CdkQsV0FBVztRQUMvQixNQUFNMEQsa0JBQWtCO1FBQ3hCLElBQUksQ0FBQ0EsZ0JBQWdCQyxJQUFJLENBQUNKLGtCQUFrQjtZQUN4Q0Esa0JBQWtCLENBQUMsQ0FBQyxFQUFFQSxnQkFBZ0IsQ0FBQztRQUMzQztJQUNKO0lBQ0EsTUFBTUssV0FBVyxDQUFDLHdCQUF3QixFQUFFSixxQkFBcUIsU0FBUyxFQUFFRCxnQkFBZ0IsQ0FBQztJQUM3RixNQUFNTSxNQUFNLE1BQU1DLE1BQU1GO0lBQ3hCLElBQUksQ0FBQ0MsSUFBSUUsRUFBRSxFQUFFO1FBQ1QsTUFBTSxJQUFJekIsTUFBTTtZQUNaLENBQUMscURBQXFELENBQUM7WUFDdkQsQ0FBQyxhQUFhLEVBQUV1QixJQUFJRyxNQUFNLENBQUMsQ0FBQztZQUM1QixDQUFDLGFBQWEsRUFBRUgsSUFBSUksVUFBVSxDQUFDLENBQUM7U0FDbkMsQ0FBQzlDLElBQUksQ0FBQztJQUNYO0lBQ0EsTUFBTStDLFVBQVUsTUFBTUwsSUFBSU0sSUFBSTtJQUM5QixPQUFPRDtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2dyYXBoX21lcm1haWQuanM/NzEwZSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfZXNjYXBlTm9kZUxhYmVsKG5vZGVMYWJlbCkge1xuICAgIC8vIEVzY2FwZXMgdGhlIG5vZGUgbGFiZWwgZm9yIE1lcm1haWQgc3ludGF4LlxuICAgIHJldHVybiBub2RlTGFiZWwucmVwbGFjZSgvW15hLXpBLVotXzAtOV0vZywgXCJfXCIpO1xufVxuY29uc3QgTUFSS0RPV05fU1BFQ0lBTF9DSEFSUyA9IFtcIipcIiwgXCJfXCIsIFwiYFwiXTtcbmZ1bmN0aW9uIF9nZW5lcmF0ZU1lcm1haWRHcmFwaFN0eWxlcyhub2RlQ29sb3JzKSB7XG4gICAgbGV0IHN0eWxlcyA9IFwiXCI7XG4gICAgZm9yIChjb25zdCBbY2xhc3NOYW1lLCBjb2xvcl0gb2YgT2JqZWN0LmVudHJpZXMobm9kZUNvbG9ycykpIHtcbiAgICAgICAgc3R5bGVzICs9IGBcXHRjbGFzc0RlZiAke2NsYXNzTmFtZX0gJHtjb2xvcn07XFxuYDtcbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlcztcbn1cbi8qKlxuICogRHJhd3MgYSBNZXJtYWlkIGdyYXBoIHVzaW5nIHRoZSBwcm92aWRlZCBncmFwaCBkYXRhXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkcmF3TWVybWFpZChub2RlcywgZWRnZXMsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgZmlyc3ROb2RlLCBsYXN0Tm9kZSwgbm9kZUNvbG9ycywgd2l0aFN0eWxlcyA9IHRydWUsIGN1cnZlU3R5bGUgPSBcImxpbmVhclwiLCB3cmFwTGFiZWxOV29yZHMgPSA5LCB9ID0gY29uZmlnID8/IHt9O1xuICAgIC8vIEluaXRpYWxpemUgTWVybWFpZCBncmFwaCBjb25maWd1cmF0aW9uXG4gICAgbGV0IG1lcm1haWRHcmFwaCA9IHdpdGhTdHlsZXNcbiAgICAgICAgPyBgJSV7aW5pdDogeydmbG93Y2hhcnQnOiB7J2N1cnZlJzogJyR7Y3VydmVTdHlsZX0nfX19JSVcXG5ncmFwaCBURDtcXG5gXG4gICAgICAgIDogXCJncmFwaCBURDtcXG5cIjtcbiAgICBpZiAod2l0aFN0eWxlcykge1xuICAgICAgICAvLyBOb2RlIGZvcm1hdHRpbmcgdGVtcGxhdGVzXG4gICAgICAgIGNvbnN0IGRlZmF1bHRDbGFzc0xhYmVsID0gXCJkZWZhdWx0XCI7XG4gICAgICAgIGNvbnN0IGZvcm1hdERpY3QgPSB7XG4gICAgICAgICAgICBbZGVmYXVsdENsYXNzTGFiZWxdOiBcInswfSh7MX0pXCIsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChmaXJzdE5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9ybWF0RGljdFtmaXJzdE5vZGVdID0gXCJ7MH0oW3sxfV0pOjo6Zmlyc3RcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdE5vZGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9ybWF0RGljdFtsYXN0Tm9kZV0gPSBcInswfShbezF9XSk6OjpsYXN0XCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIG5vZGVzIHRvIHRoZSBncmFwaFxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIG5vZGVdIG9mIE9iamVjdC5lbnRyaWVzKG5vZGVzKSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZU5hbWUgPSBub2RlLm5hbWUuc3BsaXQoXCI6XCIpLnBvcCgpID8/IFwiXCI7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IE1BUktET1dOX1NQRUNJQUxfQ0hBUlMuc29tZSgoY2hhcikgPT4gbm9kZU5hbWUuc3RhcnRzV2l0aChjaGFyKSAmJiBub2RlTmFtZS5lbmRzV2l0aChjaGFyKSlcbiAgICAgICAgICAgICAgICA/IGA8cD4ke25vZGVOYW1lfTwvcD5gXG4gICAgICAgICAgICAgICAgOiBub2RlTmFtZTtcbiAgICAgICAgICAgIGxldCBmaW5hbExhYmVsID0gbGFiZWw7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobm9kZS5tZXRhZGF0YSA/PyB7fSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmluYWxMYWJlbCArPSBgPGhyLz48c21hbGw+PGVtPiR7T2JqZWN0LmVudHJpZXMobm9kZS5tZXRhZGF0YSA/PyB7fSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoW2ssIHZdKSA9PiBgJHtrfSA9ICR7dn1gKVxuICAgICAgICAgICAgICAgICAgICAuam9pbihcIlxcblwiKX08L2VtPjwvc21hbGw+YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vZGVMYWJlbCA9IChmb3JtYXREaWN0W2tleV0gPz8gZm9ybWF0RGljdFtkZWZhdWx0Q2xhc3NMYWJlbF0pXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ7MH1cIiwgX2VzY2FwZU5vZGVMYWJlbChrZXkpKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwiezF9XCIsIGZpbmFsTGFiZWwpO1xuICAgICAgICAgICAgbWVybWFpZEdyYXBoICs9IGBcXHQke25vZGVMYWJlbH1cXG5gO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEdyb3VwIGVkZ2VzIGJ5IHRoZWlyIGNvbW1vbiBwcmVmaXhlc1xuICAgIGNvbnN0IGVkZ2VHcm91cHMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGVkZ2Ugb2YgZWRnZXMpIHtcbiAgICAgICAgY29uc3Qgc3JjUGFydHMgPSBlZGdlLnNvdXJjZS5zcGxpdChcIjpcIik7XG4gICAgICAgIGNvbnN0IHRndFBhcnRzID0gZWRnZS50YXJnZXQuc3BsaXQoXCI6XCIpO1xuICAgICAgICBjb25zdCBjb21tb25QcmVmaXggPSBzcmNQYXJ0c1xuICAgICAgICAgICAgLmZpbHRlcigoc3JjLCBpKSA9PiBzcmMgPT09IHRndFBhcnRzW2ldKVxuICAgICAgICAgICAgLmpvaW4oXCI6XCIpO1xuICAgICAgICBpZiAoIWVkZ2VHcm91cHNbY29tbW9uUHJlZml4XSkge1xuICAgICAgICAgICAgZWRnZUdyb3Vwc1tjb21tb25QcmVmaXhdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZWRnZUdyb3Vwc1tjb21tb25QcmVmaXhdLnB1c2goZWRnZSk7XG4gICAgfVxuICAgIGNvbnN0IHNlZW5TdWJncmFwaHMgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gYWRkU3ViZ3JhcGgoZWRnZXMsIHByZWZpeCkge1xuICAgICAgICBjb25zdCBzZWxmTG9vcCA9IGVkZ2VzLmxlbmd0aCA9PT0gMSAmJiBlZGdlc1swXS5zb3VyY2UgPT09IGVkZ2VzWzBdLnRhcmdldDtcbiAgICAgICAgaWYgKHByZWZpeCAmJiAhc2VsZkxvb3ApIHtcbiAgICAgICAgICAgIGNvbnN0IHN1YmdyYXBoID0gcHJlZml4LnNwbGl0KFwiOlwiKS5wb3AoKTtcbiAgICAgICAgICAgIGlmIChzZWVuU3ViZ3JhcGhzLmhhcyhzdWJncmFwaCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZvdW5kIGR1cGxpY2F0ZSBzdWJncmFwaCAnJHtzdWJncmFwaH0nIC0tIHRoaXMgbGlrZWx5IG1lYW5zIHRoYXQgYCArXG4gICAgICAgICAgICAgICAgICAgIFwieW91J3JlIHJldXNpbmcgYSBzdWJncmFwaCBub2RlIHdpdGggdGhlIHNhbWUgbmFtZS4gXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIlBsZWFzZSBhZGp1c3QgeW91ciBncmFwaCB0byBoYXZlIHN1YmdyYXBoIG5vZGVzIHdpdGggdW5pcXVlIG5hbWVzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlZW5TdWJncmFwaHMuYWRkKHN1YmdyYXBoKTtcbiAgICAgICAgICAgIG1lcm1haWRHcmFwaCArPSBgXFx0c3ViZ3JhcGggJHtzdWJncmFwaH1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZWRnZSBvZiBlZGdlcykge1xuICAgICAgICAgICAgY29uc3QgeyBzb3VyY2UsIHRhcmdldCwgZGF0YSwgY29uZGl0aW9uYWwgfSA9IGVkZ2U7XG4gICAgICAgICAgICBsZXQgZWRnZUxhYmVsID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsZXQgZWRnZURhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdvcmRzID0gZWRnZURhdGEuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgICAgIGlmICh3b3Jkcy5sZW5ndGggPiB3cmFwTGFiZWxOV29yZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRnZURhdGEgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiBNYXRoLmNlaWwod29yZHMubGVuZ3RoIC8gd3JhcExhYmVsTldvcmRzKSB9LCAoXywgaSkgPT4gd29yZHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpICogd3JhcExhYmVsTldvcmRzLCAoaSArIDEpICogd3JhcExhYmVsTldvcmRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oXCIgXCIpKS5qb2luKFwiJm5ic3A7PGJyPiZuYnNwO1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWRnZUxhYmVsID0gY29uZGl0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgPyBgIC0uICZuYnNwOyR7ZWRnZURhdGF9Jm5ic3A7IC4tPiBgXG4gICAgICAgICAgICAgICAgICAgIDogYCAtLSAmbmJzcDske2VkZ2VEYXRhfSZuYnNwOyAtLT4gYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVkZ2VMYWJlbCA9IGNvbmRpdGlvbmFsID8gXCIgLS4tPiBcIiA6IFwiIC0tPiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lcm1haWRHcmFwaCArPSBgXFx0JHtfZXNjYXBlTm9kZUxhYmVsKHNvdXJjZSl9JHtlZGdlTGFiZWx9JHtfZXNjYXBlTm9kZUxhYmVsKHRhcmdldCl9O1xcbmA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgYWRkIG5lc3RlZCBzdWJncmFwaHNcbiAgICAgICAgZm9yIChjb25zdCBuZXN0ZWRQcmVmaXggaW4gZWRnZUdyb3Vwcykge1xuICAgICAgICAgICAgaWYgKG5lc3RlZFByZWZpeC5zdGFydHNXaXRoKGAke3ByZWZpeH06YCkgJiYgbmVzdGVkUHJlZml4ICE9PSBwcmVmaXgpIHtcbiAgICAgICAgICAgICAgICBhZGRTdWJncmFwaChlZGdlR3JvdXBzW25lc3RlZFByZWZpeF0sIG5lc3RlZFByZWZpeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZWZpeCAmJiAhc2VsZkxvb3ApIHtcbiAgICAgICAgICAgIG1lcm1haWRHcmFwaCArPSBcIlxcdGVuZFxcblwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFN0YXJ0IHdpdGggdGhlIHRvcC1sZXZlbCBlZGdlcyAobm8gY29tbW9uIHByZWZpeClcbiAgICBhZGRTdWJncmFwaChlZGdlR3JvdXBzW1wiXCJdID8/IFtdLCBcIlwiKTtcbiAgICAvLyBBZGQgcmVtYWluaW5nIHN1YmdyYXBoc1xuICAgIGZvciAoY29uc3QgcHJlZml4IGluIGVkZ2VHcm91cHMpIHtcbiAgICAgICAgaWYgKCFwcmVmaXguaW5jbHVkZXMoXCI6XCIpICYmIHByZWZpeCAhPT0gXCJcIikge1xuICAgICAgICAgICAgYWRkU3ViZ3JhcGgoZWRnZUdyb3Vwc1twcmVmaXhdLCBwcmVmaXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFkZCBjdXN0b20gc3R5bGVzIGZvciBub2Rlc1xuICAgIGlmICh3aXRoU3R5bGVzKSB7XG4gICAgICAgIG1lcm1haWRHcmFwaCArPSBfZ2VuZXJhdGVNZXJtYWlkR3JhcGhTdHlsZXMobm9kZUNvbG9ycyA/PyB7fSk7XG4gICAgfVxuICAgIHJldHVybiBtZXJtYWlkR3JhcGg7XG59XG4vKipcbiAqIFJlbmRlcnMgTWVybWFpZCBncmFwaCB1c2luZyB0aGUgTWVybWFpZC5JTksgQVBJLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZHJhd01lcm1haWRQbmcobWVybWFpZFN5bnRheCwgY29uZmlnKSB7XG4gICAgbGV0IHsgYmFja2dyb3VuZENvbG9yID0gXCJ3aGl0ZVwiIH0gPSBjb25maWcgPz8ge307XG4gICAgLy8gVXNlIGJ0b2EgZm9yIGNvbXBhdGliaWxpdHksIGFzc3VtZSBBU0NJSVxuICAgIGNvbnN0IG1lcm1haWRTeW50YXhFbmNvZGVkID0gYnRvYShtZXJtYWlkU3ludGF4KTtcbiAgICAvLyBDaGVjayBpZiB0aGUgYmFja2dyb3VuZCBjb2xvciBpcyBhIGhleGFkZWNpbWFsIGNvbG9yIGNvZGUgdXNpbmcgcmVnZXhcbiAgICBpZiAoYmFja2dyb3VuZENvbG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgaGV4Q29sb3JQYXR0ZXJuID0gL14jKD86WzAtOWEtZkEtRl17M30pezEsMn0kLztcbiAgICAgICAgaWYgKCFoZXhDb2xvclBhdHRlcm4udGVzdChiYWNrZ3JvdW5kQ29sb3IpKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBgISR7YmFja2dyb3VuZENvbG9yfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaW1hZ2VVcmwgPSBgaHR0cHM6Ly9tZXJtYWlkLmluay9pbWcvJHttZXJtYWlkU3ludGF4RW5jb2RlZH0/YmdDb2xvcj0ke2JhY2tncm91bmRDb2xvcn1gO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGltYWdlVXJsKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoW1xuICAgICAgICAgICAgYEZhaWxlZCB0byByZW5kZXIgdGhlIGdyYXBoIHVzaW5nIHRoZSBNZXJtYWlkLklOSyBBUEkuYCxcbiAgICAgICAgICAgIGBTdGF0dXMgY29kZTogJHtyZXMuc3RhdHVzfWAsXG4gICAgICAgICAgICBgU3RhdHVzIHRleHQ6ICR7cmVzLnN0YXR1c1RleHR9YCxcbiAgICAgICAgXS5qb2luKFwiXFxuXCIpKTtcbiAgICB9XG4gICAgY29uc3QgY29udGVudCA9IGF3YWl0IHJlcy5ibG9iKCk7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG59XG4iXSwibmFtZXMiOlsiX2VzY2FwZU5vZGVMYWJlbCIsIm5vZGVMYWJlbCIsInJlcGxhY2UiLCJNQVJLRE9XTl9TUEVDSUFMX0NIQVJTIiwiX2dlbmVyYXRlTWVybWFpZEdyYXBoU3R5bGVzIiwibm9kZUNvbG9ycyIsInN0eWxlcyIsImNsYXNzTmFtZSIsImNvbG9yIiwiT2JqZWN0IiwiZW50cmllcyIsImRyYXdNZXJtYWlkIiwibm9kZXMiLCJlZGdlcyIsImNvbmZpZyIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwid2l0aFN0eWxlcyIsImN1cnZlU3R5bGUiLCJ3cmFwTGFiZWxOV29yZHMiLCJtZXJtYWlkR3JhcGgiLCJkZWZhdWx0Q2xhc3NMYWJlbCIsImZvcm1hdERpY3QiLCJ1bmRlZmluZWQiLCJrZXkiLCJub2RlIiwibm9kZU5hbWUiLCJuYW1lIiwic3BsaXQiLCJwb3AiLCJsYWJlbCIsInNvbWUiLCJjaGFyIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwiZmluYWxMYWJlbCIsImtleXMiLCJtZXRhZGF0YSIsImxlbmd0aCIsIm1hcCIsImsiLCJ2Iiwiam9pbiIsImVkZ2VHcm91cHMiLCJlZGdlIiwic3JjUGFydHMiLCJzb3VyY2UiLCJ0Z3RQYXJ0cyIsInRhcmdldCIsImNvbW1vblByZWZpeCIsImZpbHRlciIsInNyYyIsImkiLCJwdXNoIiwic2VlblN1YmdyYXBocyIsIlNldCIsImFkZFN1YmdyYXBoIiwicHJlZml4Iiwic2VsZkxvb3AiLCJzdWJncmFwaCIsImhhcyIsIkVycm9yIiwiYWRkIiwiZGF0YSIsImNvbmRpdGlvbmFsIiwiZWRnZUxhYmVsIiwiZWRnZURhdGEiLCJ3b3JkcyIsIkFycmF5IiwiZnJvbSIsIk1hdGgiLCJjZWlsIiwiXyIsInNsaWNlIiwibmVzdGVkUHJlZml4IiwiaW5jbHVkZXMiLCJkcmF3TWVybWFpZFBuZyIsIm1lcm1haWRTeW50YXgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtZXJtYWlkU3ludGF4RW5jb2RlZCIsImJ0b2EiLCJoZXhDb2xvclBhdHRlcm4iLCJ0ZXN0IiwiaW1hZ2VVcmwiLCJyZXMiLCJmZXRjaCIsIm9rIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImNvbnRlbnQiLCJibG9iIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/graph_mermaid.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/history.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/history.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnableWithMessageHistory: () => (/* binding */ RunnableWithMessageHistory)\n/* harmony export */ });\n/* harmony import */ var _messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n\n\n\n/**\n * Wraps a LCEL chain and manages history. It appends input messages\n * and chain outputs as history, and adds the current history messages to\n * the chain input.\n * @example\n * ```typescript\n * // yarn add @langchain/anthropic @langchain/community @upstash/redis\n *\n * import {\n *   ChatPromptTemplate,\n *   MessagesPlaceholder,\n * } from \"@langchain/core/prompts\";\n * import { ChatAnthropic } from \"@langchain/anthropic\";\n * import { UpstashRedisChatMessageHistory } from \"@langchain/community/stores/message/upstash_redis\";\n * // For demos, you can also use an in-memory store:\n * // import { ChatMessageHistory } from \"langchain/stores/message/in_memory\";\n *\n * const prompt = ChatPromptTemplate.fromMessages([\n *   [\"system\", \"You're an assistant who's good at {ability}\"],\n *   new MessagesPlaceholder(\"history\"),\n *   [\"human\", \"{question}\"],\n * ]);\n *\n * const chain = prompt.pipe(new ChatAnthropic({}));\n *\n * const chainWithHistory = new RunnableWithMessageHistory({\n *   runnable: chain,\n *   getMessageHistory: (sessionId) =>\n *     new UpstashRedisChatMessageHistory({\n *       sessionId,\n *       config: {\n *         url: process.env.UPSTASH_REDIS_REST_URL!,\n *         token: process.env.UPSTASH_REDIS_REST_TOKEN!,\n *       },\n *     }),\n *   inputMessagesKey: \"question\",\n *   historyMessagesKey: \"history\",\n * });\n *\n * const result = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What does cosine mean?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n *\n * const result2 = await chainWithHistory.invoke(\n *   {\n *     ability: \"math\",\n *     question: \"What's its inverse?\",\n *   },\n *   {\n *     configurable: {\n *       sessionId: \"some_string_identifying_a_user\",\n *     },\n *   }\n * );\n * ```\n */ class RunnableWithMessageHistory extends _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableBinding {\n    constructor(fields){\n        let historyChain = _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableLambda.from((input, options)=>this._enterHistory(input, options ?? {})).withConfig({\n            runName: \"loadHistory\"\n        });\n        const messagesKey = fields.historyMessagesKey ?? fields.inputMessagesKey;\n        if (messagesKey) {\n            historyChain = _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough.assign({\n                [messagesKey]: historyChain\n            }).withConfig({\n                runName: \"insertHistory\"\n            });\n        }\n        const bound = historyChain.pipe(fields.runnable.withListeners({\n            onEnd: (run, config)=>this._exitHistory(run, config ?? {})\n        })).withConfig({\n            runName: \"RunnableWithMessageHistory\"\n        });\n        const config = fields.config ?? {};\n        super({\n            ...fields,\n            config,\n            bound\n        });\n        Object.defineProperty(this, \"runnable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"historyMessagesKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"getMessageHistory\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnable = fields.runnable;\n        this.getMessageHistory = fields.getMessageHistory;\n        this.inputMessagesKey = fields.inputMessagesKey;\n        this.outputMessagesKey = fields.outputMessagesKey;\n        this.historyMessagesKey = fields.historyMessagesKey;\n    }\n    _getInputMessages(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    inputValue) {\n        let parsedInputValue;\n        if (typeof inputValue === \"object\" && !Array.isArray(inputValue) && !(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(inputValue)) {\n            let key;\n            if (this.inputMessagesKey) {\n                key = this.inputMessagesKey;\n            } else if (Object.keys(inputValue).length === 1) {\n                key = Object.keys(inputValue)[0];\n            } else {\n                key = \"input\";\n            }\n            if (Array.isArray(inputValue[key]) && Array.isArray(inputValue[key][0])) {\n                parsedInputValue = inputValue[key][0];\n            } else {\n                parsedInputValue = inputValue[key];\n            }\n        } else {\n            parsedInputValue = inputValue;\n        }\n        if (typeof parsedInputValue === \"string\") {\n            return [\n                new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage(parsedInputValue)\n            ];\n        } else if (Array.isArray(parsedInputValue)) {\n            return parsedInputValue;\n        } else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(parsedInputValue)) {\n            return [\n                parsedInputValue\n            ];\n        } else {\n            throw new Error(`Expected a string, BaseMessage, or array of BaseMessages.\\nGot ${JSON.stringify(parsedInputValue, null, 2)}`);\n        }\n    }\n    _getOutputMessages(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    outputValue) {\n        let parsedOutputValue;\n        if (!Array.isArray(outputValue) && !(0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(outputValue) && typeof outputValue !== \"string\") {\n            let key;\n            if (this.outputMessagesKey !== undefined) {\n                key = this.outputMessagesKey;\n            } else if (Object.keys(outputValue).length === 1) {\n                key = Object.keys(outputValue)[0];\n            } else {\n                key = \"output\";\n            }\n            // If you are wrapping a chat model directly\n            // The output is actually this weird generations object\n            if (outputValue.generations !== undefined) {\n                parsedOutputValue = outputValue.generations[0][0].message;\n            } else {\n                parsedOutputValue = outputValue[key];\n            }\n        } else {\n            parsedOutputValue = outputValue;\n        }\n        if (typeof parsedOutputValue === \"string\") {\n            return [\n                new _messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage(parsedOutputValue)\n            ];\n        } else if (Array.isArray(parsedOutputValue)) {\n            return parsedOutputValue;\n        } else if ((0,_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage)(parsedOutputValue)) {\n            return [\n                parsedOutputValue\n            ];\n        } else {\n            throw new Error(`Expected a string, BaseMessage, or array of BaseMessages. Received: ${JSON.stringify(parsedOutputValue, null, 2)}`);\n        }\n    }\n    async _enterHistory(// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    input, kwargs) {\n        const history = kwargs?.configurable?.messageHistory;\n        const messages = await history.getMessages();\n        if (this.historyMessagesKey === undefined) {\n            return messages.concat(this._getInputMessages(input));\n        }\n        return messages;\n    }\n    async _exitHistory(run, config) {\n        const history = config.configurable?.messageHistory;\n        // Get input messages\n        let inputs;\n        // Chat model inputs are nested arrays\n        if (Array.isArray(run.inputs) && Array.isArray(run.inputs[0])) {\n            inputs = run.inputs[0];\n        } else {\n            inputs = run.inputs;\n        }\n        let inputMessages = this._getInputMessages(inputs);\n        // If historic messages were prepended to the input messages, remove them to\n        // avoid adding duplicate messages to history.\n        if (this.historyMessagesKey === undefined) {\n            const existingMessages = await history.getMessages();\n            inputMessages = inputMessages.slice(existingMessages.length);\n        }\n        // Get output messages\n        const outputValue = run.outputs;\n        if (!outputValue) {\n            throw new Error(`Output values from 'Run' undefined. Run: ${JSON.stringify(run, null, 2)}`);\n        }\n        const outputMessages = this._getOutputMessages(outputValue);\n        await history.addMessages([\n            ...inputMessages,\n            ...outputMessages\n        ]);\n    }\n    async _mergeConfig(...configs) {\n        const config = await super._mergeConfig(...configs);\n        // Extract sessionId\n        if (!config.configurable || !config.configurable.sessionId) {\n            const exampleInput = {\n                [this.inputMessagesKey ?? \"input\"]: \"foo\"\n            };\n            const exampleConfig = {\n                configurable: {\n                    sessionId: \"123\"\n                }\n            };\n            throw new Error(`sessionId is required. Pass it in as part of the config argument to .invoke() or .stream()\\n` + `eg. chain.invoke(${JSON.stringify(exampleInput)}, ${JSON.stringify(exampleConfig)})`);\n        }\n        // attach messageHistory\n        const { sessionId } = config.configurable;\n        config.configurable.messageHistory = await this.getMessageHistory(sessionId);\n        return config;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/history.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_3__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableAssign: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _branch_js__WEBPACK_IMPORTED_MODULE_4__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _passthrough_js__WEBPACK_IMPORTED_MODULE_2__.RunnablePassthrough),\n/* harmony export */   RunnablePick: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableToolLike: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableToolLike),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks),\n/* harmony export */   RunnableWithMessageHistory: () => (/* reexport safe */ _history_js__WEBPACK_IMPORTED_MODULE_5__.RunnableWithMessageHistory),\n/* harmony export */   _coerceToRunnable: () => (/* reexport safe */ _base_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable),\n/* harmony export */   ensureConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.mergeConfigs),\n/* harmony export */   patchConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.patchConfig),\n/* harmony export */   pickRunnableConfigKeys: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.pickRunnableConfigKeys)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _passthrough_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./passthrough.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./router.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/router.js\");\n/* harmony import */ var _branch_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./branch.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/branch.js\");\n/* harmony import */ var _history_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./history.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/history.js\");\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK087QUFDbkg7QUFDckU7QUFDVjtBQUNBO0FBQ2MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9ydW5uYWJsZXMvaW5kZXguanM/NTU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBSdW5uYWJsZSwgUnVubmFibGVCaW5kaW5nLCBSdW5uYWJsZUVhY2gsIFJ1bm5hYmxlUmV0cnksIFJ1bm5hYmxlU2VxdWVuY2UsIFJ1bm5hYmxlTWFwLCBSdW5uYWJsZVBhcmFsbGVsLCBSdW5uYWJsZUxhbWJkYSwgUnVubmFibGVXaXRoRmFsbGJhY2tzLCBSdW5uYWJsZUFzc2lnbiwgUnVubmFibGVQaWNrLCBfY29lcmNlVG9SdW5uYWJsZSwgUnVubmFibGVUb29sTGlrZSwgfSBmcm9tIFwiLi9iYXNlLmpzXCI7XG5leHBvcnQgeyBnZXRDYWxsYmFja01hbmFnZXJGb3JDb25maWcsIHBhdGNoQ29uZmlnLCBlbnN1cmVDb25maWcsIG1lcmdlQ29uZmlncywgcGlja1J1bm5hYmxlQ29uZmlnS2V5cywgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcbmV4cG9ydCB7IFJ1bm5hYmxlUGFzc3Rocm91Z2ggfSBmcm9tIFwiLi9wYXNzdGhyb3VnaC5qc1wiO1xuZXhwb3J0IHsgUm91dGVyUnVubmFibGUgfSBmcm9tIFwiLi9yb3V0ZXIuanNcIjtcbmV4cG9ydCB7IFJ1bm5hYmxlQnJhbmNoIH0gZnJvbSBcIi4vYnJhbmNoLmpzXCI7XG5leHBvcnQgeyBSdW5uYWJsZVdpdGhNZXNzYWdlSGlzdG9yeSwgfSBmcm9tIFwiLi9oaXN0b3J5LmpzXCI7XG4iXSwibmFtZXMiOlsiUnVubmFibGUiLCJSdW5uYWJsZUJpbmRpbmciLCJSdW5uYWJsZUVhY2giLCJSdW5uYWJsZVJldHJ5IiwiUnVubmFibGVTZXF1ZW5jZSIsIlJ1bm5hYmxlTWFwIiwiUnVubmFibGVQYXJhbGxlbCIsIlJ1bm5hYmxlTGFtYmRhIiwiUnVubmFibGVXaXRoRmFsbGJhY2tzIiwiUnVubmFibGVBc3NpZ24iLCJSdW5uYWJsZVBpY2siLCJfY29lcmNlVG9SdW5uYWJsZSIsIlJ1bm5hYmxlVG9vbExpa2UiLCJnZXRDYWxsYmFja01hbmFnZXJGb3JDb25maWciLCJwYXRjaENvbmZpZyIsImVuc3VyZUNvbmZpZyIsIm1lcmdlQ29uZmlncyIsInBpY2tSdW5uYWJsZUNvbmZpZ0tleXMiLCJSdW5uYWJsZVBhc3N0aHJvdWdoIiwiUm91dGVyUnVubmFibGUiLCJSdW5uYWJsZUJyYW5jaCIsIlJ1bm5hYmxlV2l0aE1lc3NhZ2VIaXN0b3J5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/iter.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/iter.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   consumeAsyncIterableInContext: () => (/* binding */ consumeAsyncIterableInContext),\n/* harmony export */   consumeIteratorInContext: () => (/* binding */ consumeIteratorInContext),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isIterableIterator: () => (/* binding */ isIterableIterator),\n/* harmony export */   isIterator: () => (/* binding */ isIterator)\n/* harmony export */ });\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\nfunction isIterableIterator(thing) {\n    return typeof thing === \"object\" && thing !== null && typeof thing[Symbol.iterator] === \"function\" && // avoid detecting array/set as iterator\n    typeof thing.next === \"function\";\n}\nconst isIterator = (x)=>x != null && typeof x === \"object\" && \"next\" in x && typeof x.next === \"function\";\nfunction isAsyncIterable(thing) {\n    return typeof thing === \"object\" && thing !== null && typeof thing[Symbol.asyncIterator] === \"function\";\n}\nfunction* consumeIteratorInContext(context, iter) {\n    while(true){\n        const { value, done } = _singletons_index_js__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_1__.pickRunnableConfigKeys)(context), iter.next.bind(iter), true);\n        if (done) {\n            break;\n        } else {\n            yield value;\n        }\n    }\n}\nasync function* consumeAsyncIterableInContext(context, iter) {\n    const iterator = iter[Symbol.asyncIterator]();\n    while(true){\n        const { value, done } = await _singletons_index_js__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_config_js__WEBPACK_IMPORTED_MODULE_1__.pickRunnableConfigKeys)(context), iterator.next.bind(iter), true);\n        if (done) {\n            break;\n        } else {\n            yield value;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL2l0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE0RTtBQUN2QjtBQUM5QyxTQUFTRSxtQkFBbUJDLEtBQUs7SUFDcEMsT0FBUSxPQUFPQSxVQUFVLFlBQ3JCQSxVQUFVLFFBQ1YsT0FBT0EsS0FBSyxDQUFDQyxPQUFPQyxRQUFRLENBQUMsS0FBSyxjQUNsQyx3Q0FBd0M7SUFDeEMsT0FBT0YsTUFBTUcsSUFBSSxLQUFLO0FBQzlCO0FBQ08sTUFBTUMsYUFBYSxDQUFDQyxJQUFNQSxLQUFLLFFBQ2xDLE9BQU9BLE1BQU0sWUFDYixVQUFVQSxLQUNWLE9BQU9BLEVBQUVGLElBQUksS0FBSyxXQUFXO0FBQzFCLFNBQVNHLGdCQUFnQk4sS0FBSztJQUNqQyxPQUFRLE9BQU9BLFVBQVUsWUFDckJBLFVBQVUsUUFDVixPQUFPQSxLQUFLLENBQUNDLE9BQU9NLGFBQWEsQ0FBQyxLQUM5QjtBQUNaO0FBQ08sVUFBVUMseUJBQXlCQyxPQUFPLEVBQUVDLElBQUk7SUFDbkQsTUFBTyxLQUFNO1FBQ1QsTUFBTSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHZixvRkFBa0NBLENBQUNnQixhQUFhLENBQUNmLGtFQUFzQkEsQ0FBQ1csVUFBVUMsS0FBS1AsSUFBSSxDQUFDVyxJQUFJLENBQUNKLE9BQU87UUFDaEksSUFBSUUsTUFBTTtZQUNOO1FBQ0osT0FDSztZQUNELE1BQU1EO1FBQ1Y7SUFDSjtBQUNKO0FBQ08sZ0JBQWdCSSw4QkFBOEJOLE9BQU8sRUFBRUMsSUFBSTtJQUM5RCxNQUFNUixXQUFXUSxJQUFJLENBQUNULE9BQU9NLGFBQWEsQ0FBQztJQUMzQyxNQUFPLEtBQU07UUFDVCxNQUFNLEVBQUVJLEtBQUssRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTWYsb0ZBQWtDQSxDQUFDZ0IsYUFBYSxDQUFDZixrRUFBc0JBLENBQUNXLFVBQVVQLFNBQVNDLElBQUksQ0FBQ1csSUFBSSxDQUFDSixPQUFPO1FBQzFJLElBQUlFLE1BQU07WUFDTjtRQUNKLE9BQ0s7WUFDRCxNQUFNRDtRQUNWO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3J1bm5hYmxlcy9pdGVyLmpzP2VhNWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiB9IGZyb20gXCIuLi9zaW5nbGV0b25zL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwaWNrUnVubmFibGVDb25maWdLZXlzIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZUl0ZXJhdG9yKHRoaW5nKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdGhpbmcgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgdGhpbmcgIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIHRoaW5nW1N5bWJvbC5pdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAvLyBhdm9pZCBkZXRlY3RpbmcgYXJyYXkvc2V0IGFzIGl0ZXJhdG9yXG4gICAgICAgIHR5cGVvZiB0aGluZy5uZXh0ID09PSBcImZ1bmN0aW9uXCIpO1xufVxuZXhwb3J0IGNvbnN0IGlzSXRlcmF0b3IgPSAoeCkgPT4geCAhPSBudWxsICYmXG4gICAgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICBcIm5leHRcIiBpbiB4ICYmXG4gICAgdHlwZW9mIHgubmV4dCA9PT0gXCJmdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZSh0aGluZykge1xuICAgIHJldHVybiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIHRoaW5nICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiB0aGluZ1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT09XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uKiBjb25zdW1lSXRlcmF0b3JJbkNvbnRleHQoY29udGV4dCwgaXRlcikge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24ucnVuV2l0aENvbmZpZyhwaWNrUnVubmFibGVDb25maWdLZXlzKGNvbnRleHQpLCBpdGVyLm5leHQuYmluZChpdGVyKSwgdHJ1ZSk7XG4gICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiBjb25zdW1lQXN5bmNJdGVyYWJsZUluQ29udGV4dChjb250ZXh0LCBpdGVyKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSBpdGVyW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24ucnVuV2l0aENvbmZpZyhwaWNrUnVubmFibGVDb25maWdLZXlzKGNvbnRleHQpLCBpdGVyYXRvci5uZXh0LmJpbmQoaXRlciksIHRydWUpO1xuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIiwicGlja1J1bm5hYmxlQ29uZmlnS2V5cyIsImlzSXRlcmFibGVJdGVyYXRvciIsInRoaW5nIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiaXNJdGVyYXRvciIsIngiLCJpc0FzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhdG9yIiwiY29uc3VtZUl0ZXJhdG9ySW5Db250ZXh0IiwiY29udGV4dCIsIml0ZXIiLCJ2YWx1ZSIsImRvbmUiLCJydW5XaXRoQ29uZmlnIiwiYmluZCIsImNvbnN1bWVBc3luY0l0ZXJhYmxlSW5Db250ZXh0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/iter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/passthrough.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RunnablePassthrough: () => (/* binding */ RunnablePassthrough)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n\n/**\n * A runnable to passthrough inputs unchanged or with additional keys.\n *\n * This runnable behaves almost like the identity function, except that it\n * can be configured to add additional keys to the output, if the input is\n * an object.\n *\n * The example below demonstrates how to use `RunnablePassthrough to\n * passthrough the input from the `.invoke()`\n *\n * @example\n * ```typescript\n * const chain = RunnableSequence.from([\n *   {\n *     question: new RunnablePassthrough(),\n *     context: async () => loadContextFromStore(),\n *   },\n *   prompt,\n *   llm,\n *   outputParser,\n * ]);\n * const response = await chain.invoke(\n *   \"I can pass a single string instead of an object since I'm using `RunnablePassthrough`.\"\n * );\n * ```\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nclass RunnablePassthrough extends _base_js__WEBPACK_IMPORTED_MODULE_1__.Runnable {\n    static lc_name() {\n        return \"RunnablePassthrough\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (fields) {\n            this.func = fields.func;\n        }\n    }\n    async invoke(input, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        if (this.func) {\n            await this.func(input, config);\n        }\n        return this._callWithConfig((input)=>Promise.resolve(input), input, config);\n    }\n    async *transform(generator, options) {\n        const config = (0,_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(options);\n        let finalOutput;\n        let finalOutputSupported = true;\n        for await (const chunk of this._transformStreamWithConfig(generator, (input)=>input, config)){\n            yield chunk;\n            if (finalOutputSupported) {\n                if (finalOutput === undefined) {\n                    finalOutput = chunk;\n                } else {\n                    try {\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        finalOutput = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.concat)(finalOutput, chunk);\n                    } catch  {\n                        finalOutput = undefined;\n                        finalOutputSupported = false;\n                    }\n                }\n            }\n        }\n        if (this.func && finalOutput !== undefined) {\n            await this.func(finalOutput, config);\n        }\n    }\n    /**\n     * A runnable that assigns key-value pairs to the input.\n     *\n     * The example below shows how you could use it with an inline function.\n     *\n     * @example\n     * ```typescript\n     * const prompt =\n     *   PromptTemplate.fromTemplate(`Write a SQL query to answer the question using the following schema: {schema}\n     * Question: {question}\n     * SQL Query:`);\n     *\n     * // The `RunnablePassthrough.assign()` is used here to passthrough the input from the `.invoke()`\n     * // call (in this example it's the question), along with any inputs passed to the `.assign()` method.\n     * // In this case, we're passing the schema.\n     * const sqlQueryGeneratorChain = RunnableSequence.from([\n     *   RunnablePassthrough.assign({\n     *     schema: async () => db.getTableInfo(),\n     *   }),\n     *   prompt,\n     *   new ChatOpenAI({}).bind({ stop: [\"\\nSQLResult:\"] }),\n     *   new StringOutputParser(),\n     * ]);\n     * const result = await sqlQueryGeneratorChain.invoke({\n     *   question: \"How many employees are there?\",\n     * });\n     * ```\n     */ static assign(mapping) {\n        return new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableAssign(new _base_js__WEBPACK_IMPORTED_MODULE_1__.RunnableMap({\n            steps: mapping\n        }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/passthrough.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/router.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/router.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* binding */ RouterRunnable)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n\n\n/**\n * A runnable that routes to a set of runnables based on Input['key'].\n * Returns the output of the selected runnable.\n * @example\n * ```typescript\n * import { RouterRunnable, RunnableLambda } from \"@langchain/core/runnables\";\n *\n * const router = new RouterRunnable({\n *   runnables: {\n *     toUpperCase: RunnableLambda.from((text: string) => text.toUpperCase()),\n *     reverseText: RunnableLambda.from((text: string) =>\n *       text.split(\"\").reverse().join(\"\")\n *     ),\n *   },\n * });\n *\n * // Invoke the 'reverseText' runnable\n * const result1 = router.invoke({ key: \"reverseText\", input: \"Hello World\" });\n *\n * // \"dlroW olleH\"\n *\n * // Invoke the 'toUpperCase' runnable\n * const result2 = router.invoke({ key: \"toUpperCase\", input: \"Hello World\" });\n *\n * // \"HELLO WORLD\"\n * ```\n */ class RouterRunnable extends _base_js__WEBPACK_IMPORTED_MODULE_0__.Runnable {\n    static lc_name() {\n        return \"RouterRunnable\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\n                \"langchain_core\",\n                \"runnables\"\n            ]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"runnables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.runnables = fields.runnables;\n    }\n    async invoke(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.invoke(actualInput, (0,_config_js__WEBPACK_IMPORTED_MODULE_1__.ensureConfig)(options));\n    }\n    async batch(inputs, options, batchOptions) {\n        const keys = inputs.map((input)=>input.key);\n        const actualInputs = inputs.map((input)=>input.input);\n        const missingKey = keys.find((key)=>this.runnables[key] === undefined);\n        if (missingKey !== undefined) {\n            throw new Error(`One or more keys do not have a corresponding runnable.`);\n        }\n        const runnables = keys.map((key)=>this.runnables[key]);\n        const optionsList = this._getOptionsList(options ?? {}, inputs.length);\n        const maxConcurrency = optionsList[0]?.maxConcurrency ?? batchOptions?.maxConcurrency;\n        const batchSize = maxConcurrency && maxConcurrency > 0 ? maxConcurrency : inputs.length;\n        const batchResults = [];\n        for(let i = 0; i < actualInputs.length; i += batchSize){\n            const batchPromises = actualInputs.slice(i, i + batchSize).map((actualInput, i)=>runnables[i].invoke(actualInput, optionsList[i]));\n            const batchResult = await Promise.all(batchPromises);\n            batchResults.push(batchResult);\n        }\n        return batchResults.flat();\n    }\n    async stream(input, options) {\n        const { key, input: actualInput } = input;\n        const runnable = this.runnables[key];\n        if (runnable === undefined) {\n            throw new Error(`No runnable associated with key \"${key}\".`);\n        }\n        return runnable.stream(actualInput, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/router.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _RootEventFilter: () => (/* binding */ _RootEventFilter),\n/* harmony export */   isRunnableInterface: () => (/* binding */ isRunnableInterface)\n/* harmony export */ });\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isRunnableInterface(thing) {\n    return thing ? thing.lc_runnable : false;\n}\n/**\n * Utility to filter the root event in the streamEvents implementation.\n * This is simply binding the arguments to the namespace to make save on\n * a bit of typing in the streamEvents implementation.\n *\n * TODO: Refactor and remove.\n */ class _RootEventFilter {\n    constructor(fields){\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.includeNames = fields.includeNames;\n        this.includeTypes = fields.includeTypes;\n        this.includeTags = fields.includeTags;\n        this.excludeNames = fields.excludeNames;\n        this.excludeTypes = fields.excludeTypes;\n        this.excludeTags = fields.excludeTags;\n    }\n    includeEvent(event, rootType) {\n        let include = this.includeNames === undefined && this.includeTypes === undefined && this.includeTags === undefined;\n        const eventTags = event.tags ?? [];\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(event.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(rootType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || eventTags.some((tag)=>this.includeTags?.includes(tag));\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(event.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(rootType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && eventTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsOERBQThEO0FBQ3ZELFNBQVNBLG9CQUFvQkMsS0FBSztJQUNyQyxPQUFPQSxRQUFRQSxNQUFNQyxXQUFXLEdBQUc7QUFDdkM7QUFDQTs7Ozs7O0NBTUMsR0FDTSxNQUFNQztJQUNUQyxZQUFZQyxNQUFNLENBQUU7UUFDaEJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQSxJQUFJLENBQUNDLFlBQVksR0FBR1AsT0FBT08sWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1IsT0FBT1EsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1QsT0FBT1MsV0FBVztRQUNyQyxJQUFJLENBQUNDLFlBQVksR0FBR1YsT0FBT1UsWUFBWTtRQUN2QyxJQUFJLENBQUNDLFlBQVksR0FBR1gsT0FBT1csWUFBWTtRQUN2QyxJQUFJLENBQUNDLFdBQVcsR0FBR1osT0FBT1ksV0FBVztJQUN6QztJQUNBQyxhQUFhQyxLQUFLLEVBQUVDLFFBQVEsRUFBRTtRQUMxQixJQUFJQyxVQUFVLElBQUksQ0FBQ1QsWUFBWSxLQUFLVSxhQUNoQyxJQUFJLENBQUNULFlBQVksS0FBS1MsYUFDdEIsSUFBSSxDQUFDUixXQUFXLEtBQUtRO1FBQ3pCLE1BQU1DLFlBQVlKLE1BQU1LLElBQUksSUFBSSxFQUFFO1FBQ2xDLElBQUksSUFBSSxDQUFDWixZQUFZLEtBQUtVLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDVCxZQUFZLENBQUNhLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUM5RDtRQUNBLElBQUksSUFBSSxDQUFDYixZQUFZLEtBQUtTLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsSUFBSSxDQUFDUixZQUFZLENBQUNZLFFBQVEsQ0FBQ0w7UUFDcEQ7UUFDQSxJQUFJLElBQUksQ0FBQ04sV0FBVyxLQUFLUSxXQUFXO1lBQ2hDRCxVQUNJQSxXQUFXRSxVQUFVSSxJQUFJLENBQUMsQ0FBQ0MsTUFBUSxJQUFJLENBQUNkLFdBQVcsRUFBRVcsU0FBU0c7UUFDdEU7UUFDQSxJQUFJLElBQUksQ0FBQ2IsWUFBWSxLQUFLTyxXQUFXO1lBQ2pDRCxVQUFVQSxXQUFXLENBQUMsSUFBSSxDQUFDTixZQUFZLENBQUNVLFFBQVEsQ0FBQ04sTUFBTU8sSUFBSTtRQUMvRDtRQUNBLElBQUksSUFBSSxDQUFDVixZQUFZLEtBQUtNLFdBQVc7WUFDakNELFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNMLFlBQVksQ0FBQ1MsUUFBUSxDQUFDTDtRQUNyRDtRQUNBLElBQUksSUFBSSxDQUFDSCxXQUFXLEtBQUtLLFdBQVc7WUFDaENELFVBQ0lBLFdBQVdFLFVBQVVNLEtBQUssQ0FBQyxDQUFDRCxNQUFRLENBQUMsSUFBSSxDQUFDWCxXQUFXLEVBQUVRLFNBQVNHO1FBQ3hFO1FBQ0EsT0FBT1A7SUFDWDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3V0aWxzLmpzPzgxZmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBpc1J1bm5hYmxlSW50ZXJmYWNlKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nID8gdGhpbmcubGNfcnVubmFibGUgOiBmYWxzZTtcbn1cbi8qKlxuICogVXRpbGl0eSB0byBmaWx0ZXIgdGhlIHJvb3QgZXZlbnQgaW4gdGhlIHN0cmVhbUV2ZW50cyBpbXBsZW1lbnRhdGlvbi5cbiAqIFRoaXMgaXMgc2ltcGx5IGJpbmRpbmcgdGhlIGFyZ3VtZW50cyB0byB0aGUgbmFtZXNwYWNlIHRvIG1ha2Ugc2F2ZSBvblxuICogYSBiaXQgb2YgdHlwaW5nIGluIHRoZSBzdHJlYW1FdmVudHMgaW1wbGVtZW50YXRpb24uXG4gKlxuICogVE9ETzogUmVmYWN0b3IgYW5kIHJlbW92ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIF9Sb290RXZlbnRGaWx0ZXIge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcykge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlTmFtZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZVR5cGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVUYWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVOYW1lc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlVHlwZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZVRhZ3NcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pbmNsdWRlTmFtZXMgPSBmaWVsZHMuaW5jbHVkZU5hbWVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUeXBlcyA9IGZpZWxkcy5pbmNsdWRlVHlwZXM7XG4gICAgICAgIHRoaXMuaW5jbHVkZVRhZ3MgPSBmaWVsZHMuaW5jbHVkZVRhZ3M7XG4gICAgICAgIHRoaXMuZXhjbHVkZU5hbWVzID0gZmllbGRzLmV4Y2x1ZGVOYW1lcztcbiAgICAgICAgdGhpcy5leGNsdWRlVHlwZXMgPSBmaWVsZHMuZXhjbHVkZVR5cGVzO1xuICAgICAgICB0aGlzLmV4Y2x1ZGVUYWdzID0gZmllbGRzLmV4Y2x1ZGVUYWdzO1xuICAgIH1cbiAgICBpbmNsdWRlRXZlbnQoZXZlbnQsIHJvb3RUeXBlKSB7XG4gICAgICAgIGxldCBpbmNsdWRlID0gdGhpcy5pbmNsdWRlTmFtZXMgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlVHlwZXMgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlVGFncyA9PT0gdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBldmVudFRhZ3MgPSBldmVudC50YWdzID8/IFtdO1xuICAgICAgICBpZiAodGhpcy5pbmNsdWRlTmFtZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgfHwgdGhpcy5pbmNsdWRlTmFtZXMuaW5jbHVkZXMoZXZlbnQubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZVR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlIHx8IHRoaXMuaW5jbHVkZVR5cGVzLmluY2x1ZGVzKHJvb3RUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmNsdWRlVGFncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID1cbiAgICAgICAgICAgICAgICBpbmNsdWRlIHx8IGV2ZW50VGFncy5zb21lKCh0YWcpID0+IHRoaXMuaW5jbHVkZVRhZ3M/LmluY2x1ZGVzKHRhZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVOYW1lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlTmFtZXMuaW5jbHVkZXMoZXZlbnQubmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZVR5cGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlICYmICF0aGlzLmV4Y2x1ZGVUeXBlcy5pbmNsdWRlcyhyb290VHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXhjbHVkZVRhZ3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9XG4gICAgICAgICAgICAgICAgaW5jbHVkZSAmJiBldmVudFRhZ3MuZXZlcnkoKHRhZykgPT4gIXRoaXMuZXhjbHVkZVRhZ3M/LmluY2x1ZGVzKHRhZykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmNsdWRlO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJpc1J1bm5hYmxlSW50ZXJmYWNlIiwidGhpbmciLCJsY19ydW5uYWJsZSIsIl9Sb290RXZlbnRGaWx0ZXIiLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJpbmNsdWRlTmFtZXMiLCJpbmNsdWRlVHlwZXMiLCJpbmNsdWRlVGFncyIsImV4Y2x1ZGVOYW1lcyIsImV4Y2x1ZGVUeXBlcyIsImV4Y2x1ZGVUYWdzIiwiaW5jbHVkZUV2ZW50IiwiZXZlbnQiLCJyb290VHlwZSIsImluY2x1ZGUiLCJ1bmRlZmluZWQiLCJldmVudFRhZ3MiLCJ0YWdzIiwiaW5jbHVkZXMiLCJuYW1lIiwic29tZSIsInRhZyIsImV2ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/runnables/wrappers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToHttpEventStream: () => (/* binding */ convertToHttpEventStream)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n\nfunction convertToHttpEventStream(stream) {\n    const encoder = new TextEncoder();\n    const finalStream = new ReadableStream({\n        async start (controller) {\n            for await (const chunk of stream){\n                controller.enqueue(encoder.encode(`event: data\\ndata: ${JSON.stringify(chunk)}\\n\\n`));\n            }\n            controller.enqueue(encoder.encode(\"event: end\\n\\n\"));\n            controller.close();\n        }\n    });\n    return _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.IterableReadableStream.fromReadableStream(finalStream);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3dyYXBwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTREO0FBQ3JELFNBQVNDLHlCQUF5QkMsTUFBTTtJQUMzQyxNQUFNQyxVQUFVLElBQUlDO0lBQ3BCLE1BQU1DLGNBQWMsSUFBSUMsZUFBZTtRQUNuQyxNQUFNQyxPQUFNQyxVQUFVO1lBQ2xCLFdBQVcsTUFBTUMsU0FBU1AsT0FBUTtnQkFDOUJNLFdBQVdFLE9BQU8sQ0FBQ1AsUUFBUVEsTUFBTSxDQUFDLENBQUMsbUJBQW1CLEVBQUVDLEtBQUtDLFNBQVMsQ0FBQ0osT0FBTyxJQUFJLENBQUM7WUFDdkY7WUFDQUQsV0FBV0UsT0FBTyxDQUFDUCxRQUFRUSxNQUFNLENBQUM7WUFDbENILFdBQVdNLEtBQUs7UUFDcEI7SUFDSjtJQUNBLE9BQU9kLG9FQUFzQkEsQ0FBQ2Usa0JBQWtCLENBQUNWO0FBQ3JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvcnVubmFibGVzL3dyYXBwZXJzLmpzPzA1OWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSB9IGZyb20gXCIuLi91dGlscy9zdHJlYW0uanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9IdHRwRXZlbnRTdHJlYW0oc3RyZWFtKSB7XG4gICAgY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIGNvbnN0IGZpbmFsU3RyZWFtID0gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgYXN5bmMgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUoYGV2ZW50OiBkYXRhXFxuZGF0YTogJHtKU09OLnN0cmluZ2lmeShjaHVuayl9XFxuXFxuYCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGVuY29kZXIuZW5jb2RlKFwiZXZlbnQ6IGVuZFxcblxcblwiKSk7XG4gICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIEl0ZXJhYmxlUmVhZGFibGVTdHJlYW0uZnJvbVJlYWRhYmxlU3RyZWFtKGZpbmFsU3RyZWFtKTtcbn1cbiJdLCJuYW1lcyI6WyJJdGVyYWJsZVJlYWRhYmxlU3RyZWFtIiwiY29udmVydFRvSHR0cEV2ZW50U3RyZWFtIiwic3RyZWFtIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiZmluYWxTdHJlYW0iLCJSZWFkYWJsZVN0cmVhbSIsInN0YXJ0IiwiY29udHJvbGxlciIsImNodW5rIiwiZW5xdWV1ZSIsImVuY29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjbG9zZSIsImZyb21SZWFkYWJsZVN0cmVhbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/runnables/wrappers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _getConfigureHooks: () => (/* binding */ _getConfigureHooks),\n/* harmony export */   getContextVariable: () => (/* binding */ getContextVariable),\n/* harmony export */   registerConfigureHook: () => (/* binding */ registerConfigureHook),\n/* harmony export */   setContextVariable: () => (/* binding */ setContextVariable)\n/* harmony export */ });\n/* harmony import */ var langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n\n\n/**\n * Set a context variable. Context variables are scoped to any\n * child runnables called by the current runnable, or globally if set outside\n * of any runnable.\n *\n * @remarks\n * This function is only supported in environments that support AsyncLocalStorage,\n * including Node.js, Deno, and Cloudflare Workers.\n *\n * @example\n * ```ts\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n * import {\n *   getContextVariable,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const nested = RunnableLambda.from(() => {\n *   // \"bar\" because it was set by a parent\n *   console.log(getContextVariable(\"foo\"));\n *\n *   // Override to \"baz\", but only for child runnables\n *   setContextVariable(\"foo\", \"baz\");\n *\n *   // Now \"baz\", but only for child runnables\n *   return getContextVariable(\"foo\");\n * });\n *\n * const runnable = RunnableLambda.from(async () => {\n *   // Set a context variable named \"foo\"\n *   setContextVariable(\"foo\", \"bar\");\n *\n *   const res = await nested.invoke({});\n *\n *   // Still \"bar\" since child changes do not affect parents\n *   console.log(getContextVariable(\"foo\"));\n *\n *   return res;\n * });\n *\n * // undefined, because context variable has not been set yet\n * console.log(getContextVariable(\"foo\"));\n *\n * // Final return value is \"baz\"\n * const result = await runnable.invoke({});\n * ```\n *\n * @param name The name of the context variable.\n * @param value The value to set.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction setContextVariable(name, value) {\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n    if (asyncLocalStorageInstance === undefined) {\n        throw new Error(`Internal error: Global shared async local storage instance has not been initialized.`);\n    }\n    const runTree = asyncLocalStorageInstance.getStore();\n    const contextVars = {\n        ...runTree?.[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY]\n    };\n    contextVars[name] = value;\n    let newValue = {};\n    if ((0,langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.isRunTree)(runTree)) {\n        newValue = new langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.RunTree(runTree);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newValue[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY] = contextVars;\n    asyncLocalStorageInstance.enterWith(newValue);\n}\n/**\n * Get the value of a previously set context variable. Context variables\n * are scoped to any child runnables called by the current runnable,\n * or globally if set outside of any runnable.\n *\n * @remarks\n * This function is only supported in environments that support AsyncLocalStorage,\n * including Node.js, Deno, and Cloudflare Workers.\n *\n * @example\n * ```ts\n * import { RunnableLambda } from \"@langchain/core/runnables\";\n * import {\n *   getContextVariable,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const nested = RunnableLambda.from(() => {\n *   // \"bar\" because it was set by a parent\n *   console.log(getContextVariable(\"foo\"));\n *\n *   // Override to \"baz\", but only for child runnables\n *   setContextVariable(\"foo\", \"baz\");\n *\n *   // Now \"baz\", but only for child runnables\n *   return getContextVariable(\"foo\");\n * });\n *\n * const runnable = RunnableLambda.from(async () => {\n *   // Set a context variable named \"foo\"\n *   setContextVariable(\"foo\", \"bar\");\n *\n *   const res = await nested.invoke({});\n *\n *   // Still \"bar\" since child changes do not affect parents\n *   console.log(getContextVariable(\"foo\"));\n *\n *   return res;\n * });\n *\n * // undefined, because context variable has not been set yet\n * console.log(getContextVariable(\"foo\"));\n *\n * // Final return value is \"baz\"\n * const result = await runnable.invoke({});\n * ```\n *\n * @param name The name of the context variable.\n */ // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getContextVariable(name) {\n    // Avoid using global singleton due to circuluar dependency issues\n    const asyncLocalStorageInstance = (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n    if (asyncLocalStorageInstance === undefined) {\n        return undefined;\n    }\n    const runTree = asyncLocalStorageInstance.getStore();\n    return runTree?.[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY]?.[name];\n}\nconst LC_CONFIGURE_HOOKS_KEY = Symbol(\"lc:configure_hooks\");\nconst _getConfigureHooks = ()=>getContextVariable(LC_CONFIGURE_HOOKS_KEY) || [];\n/**\n * Register a callback configure hook to automatically add callback handlers to all runs.\n *\n * There are two ways to use this:\n *\n * 1. Using a context variable:\n *    - Set `contextVar` to specify the variable name\n *    - Use `setContextVariable()` to store your handler instance\n *\n * 2. Using an environment variable:\n *    - Set both `envVar` and `handlerClass`\n *    - The handler will be instantiated when the env var is set to \"true\".\n *\n * @example\n * ```typescript\n * // Method 1: Using context variable\n * import {\n *   registerConfigureHook,\n *   setContextVariable\n * } from \"@langchain/core/context\";\n *\n * const tracer = new MyCallbackHandler();\n * registerConfigureHook({\n *   contextVar: \"my_tracer\",\n * });\n * setContextVariable(\"my_tracer\", tracer);\n *\n * // ...run code here\n *\n * // Method 2: Using environment variable\n * registerConfigureHook({\n *   handlerClass: MyCallbackHandler,\n *   envVar: \"MY_TRACER_ENABLED\",\n * });\n * process.env.MY_TRACER_ENABLED = \"true\";\n *\n * // ...run code here\n * ```\n *\n * @param config Configuration object for the hook\n * @param config.contextVar Name of the context variable containing the handler instance\n * @param config.inheritable Whether child runs should inherit this handler\n * @param config.handlerClass Optional callback handler class (required if using envVar)\n * @param config.envVar Optional environment variable name to control handler activation\n */ const registerConfigureHook = (config)=>{\n    if (config.envVar && !config.handlerClass) {\n        throw new Error(\"If envVar is set, handlerClass must also be set to a non-None value.\");\n    }\n    setContextVariable(LC_CONFIGURE_HOOKS_KEY, [\n        ..._getConfigureHooks(),\n        config\n    ]);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRACING_ALS_KEY: () => (/* binding */ TRACING_ALS_KEY),\n/* harmony export */   _CONTEXT_VARIABLES_KEY: () => (/* binding */ _CONTEXT_VARIABLES_KEY),\n/* harmony export */   getGlobalAsyncLocalStorageInstance: () => (/* binding */ getGlobalAsyncLocalStorageInstance),\n/* harmony export */   setGlobalAsyncLocalStorageInstance: () => (/* binding */ setGlobalAsyncLocalStorageInstance)\n/* harmony export */ });\nconst TRACING_ALS_KEY = Symbol.for(\"ls:tracing_async_local_storage\");\nconst _CONTEXT_VARIABLES_KEY = Symbol.for(\"lc:context_variables\");\nconst setGlobalAsyncLocalStorageInstance = (instance)=>{\n    globalThis[TRACING_ALS_KEY] = instance;\n};\nconst getGlobalAsyncLocalStorageInstance = ()=>{\n    return globalThis[TRACING_ALS_KEY];\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2dsb2JhbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLE1BQU1BLGtCQUFrQkMsT0FBT0MsR0FBRyxDQUFDLGtDQUFrQztBQUNyRSxNQUFNQyx5QkFBeUJGLE9BQU9DLEdBQUcsQ0FBQyx3QkFBd0I7QUFDbEUsTUFBTUUscUNBQXFDLENBQUNDO0lBQy9DQyxVQUFVLENBQUNOLGdCQUFnQixHQUFHSztBQUNsQyxFQUFFO0FBQ0ssTUFBTUUscUNBQXFDO0lBQzlDLE9BQU9ELFVBQVUsQ0FBQ04sZ0JBQWdCO0FBQ3RDLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL2FzeW5jX2xvY2FsX3N0b3JhZ2UvZ2xvYmFscy5qcz8yZTczIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBUUkFDSU5HX0FMU19LRVkgPSBTeW1ib2wuZm9yKFwibHM6dHJhY2luZ19hc3luY19sb2NhbF9zdG9yYWdlXCIpO1xuZXhwb3J0IGNvbnN0IF9DT05URVhUX1ZBUklBQkxFU19LRVkgPSBTeW1ib2wuZm9yKFwibGM6Y29udGV4dF92YXJpYWJsZXNcIik7XG5leHBvcnQgY29uc3Qgc2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IChpbnN0YW5jZSkgPT4ge1xuICAgIGdsb2JhbFRoaXNbVFJBQ0lOR19BTFNfS0VZXSA9IGluc3RhbmNlO1xufTtcbmV4cG9ydCBjb25zdCBnZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlID0gKCkgPT4ge1xuICAgIHJldHVybiBnbG9iYWxUaGlzW1RSQUNJTkdfQUxTX0tFWV07XG59O1xuIl0sIm5hbWVzIjpbIlRSQUNJTkdfQUxTX0tFWSIsIlN5bWJvbCIsImZvciIsIl9DT05URVhUX1ZBUklBQkxFU19LRVkiLCJzZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlIiwiaW5zdGFuY2UiLCJnbG9iYWxUaGlzIiwiZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* binding */ AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* binding */ MockAsyncLocalStorage)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \n\n\nclass MockAsyncLocalStorage {\n    getStore() {\n        return undefined;\n    }\n    run(_store, callback) {\n        return callback();\n    }\n    enterWith(_store) {\n        return undefined;\n    }\n}\nconst mockAsyncLocalStorage = new MockAsyncLocalStorage();\nconst LC_CHILD_KEY = Symbol.for(\"lc:child_config\");\nclass AsyncLocalStorageProvider {\n    getInstance() {\n        return (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)() ?? mockAsyncLocalStorage;\n    }\n    getRunnableConfig() {\n        const storage = this.getInstance();\n        // this has the runnable config\n        // which means that we should also have an instance of a LangChainTracer\n        // with the run map prepopulated\n        return storage.getStore()?.extra?.[LC_CHILD_KEY];\n    }\n    runWithConfig(config, callback, avoidCreatingRootRunTree) {\n        const callbackManager = _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_2__.CallbackManager._configureSync(config?.callbacks, undefined, config?.tags, undefined, config?.metadata);\n        const storage = this.getInstance();\n        const previousValue = storage.getStore();\n        const parentRunId = callbackManager?.getParentRunId();\n        const langChainTracer = callbackManager?.handlers?.find((handler)=>handler?.name === \"langchain_tracer\");\n        let runTree;\n        if (langChainTracer && parentRunId) {\n            runTree = langChainTracer.convertToRunTree(parentRunId);\n        } else if (!avoidCreatingRootRunTree) {\n            runTree = new langsmith__WEBPACK_IMPORTED_MODULE_0__.RunTree({\n                name: \"<runnable_lambda>\",\n                tracingEnabled: false\n            });\n        }\n        if (runTree) {\n            runTree.extra = {\n                ...runTree.extra,\n                [LC_CHILD_KEY]: config\n            };\n        }\n        if (previousValue !== undefined && previousValue[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY] !== undefined) {\n            runTree[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY] = previousValue[_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY];\n        }\n        return storage.run(runTree, callback);\n    }\n    initializeGlobalInstance(instance) {\n        if ((0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)() === undefined) {\n            (0,_globals_js__WEBPACK_IMPORTED_MODULE_1__.setGlobalAsyncLocalStorageInstance)(instance);\n        }\n    }\n}\nconst AsyncLocalStorageProviderSingleton = new AsyncLocalStorageProvider();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9hc3luY19sb2NhbF9zdG9yYWdlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscURBQXFELEdBQ2pCO0FBQzJGO0FBQ2xFO0FBQ3RELE1BQU1LO0lBQ1RDLFdBQVc7UUFDUCxPQUFPQztJQUNYO0lBQ0FDLElBQUlDLE1BQU0sRUFBRUMsUUFBUSxFQUFFO1FBQ2xCLE9BQU9BO0lBQ1g7SUFDQUMsVUFBVUYsTUFBTSxFQUFFO1FBQ2QsT0FBT0Y7SUFDWDtBQUNKO0FBQ0EsTUFBTUssd0JBQXdCLElBQUlQO0FBQ2xDLE1BQU1RLGVBQWVDLE9BQU9DLEdBQUcsQ0FBQztBQUNoQyxNQUFNQztJQUNGQyxjQUFjO1FBQ1YsT0FBT2hCLCtFQUFrQ0EsTUFBTVc7SUFDbkQ7SUFDQU0sb0JBQW9CO1FBQ2hCLE1BQU1DLFVBQVUsSUFBSSxDQUFDRixXQUFXO1FBQ2hDLCtCQUErQjtRQUMvQix3RUFBd0U7UUFDeEUsZ0NBQWdDO1FBQ2hDLE9BQU9FLFFBQVFiLFFBQVEsSUFBSWMsT0FBTyxDQUFDUCxhQUFhO0lBQ3BEO0lBQ0FRLGNBQWNDLE1BQU0sRUFBRVosUUFBUSxFQUFFYSx3QkFBd0IsRUFBRTtRQUN0RCxNQUFNQyxrQkFBa0JwQixrRUFBZUEsQ0FBQ3FCLGNBQWMsQ0FBQ0gsUUFBUUksV0FBV25CLFdBQVdlLFFBQVFLLE1BQU1wQixXQUFXZSxRQUFRTTtRQUN0SCxNQUFNVCxVQUFVLElBQUksQ0FBQ0YsV0FBVztRQUNoQyxNQUFNWSxnQkFBZ0JWLFFBQVFiLFFBQVE7UUFDdEMsTUFBTXdCLGNBQWNOLGlCQUFpQk87UUFDckMsTUFBTUMsa0JBQWtCUixpQkFBaUJTLFVBQVVDLEtBQUssQ0FBQ0MsVUFBWUEsU0FBU0MsU0FBUztRQUN2RixJQUFJQztRQUNKLElBQUlMLG1CQUFtQkYsYUFBYTtZQUNoQ08sVUFBVUwsZ0JBQWdCTSxnQkFBZ0IsQ0FBQ1I7UUFDL0MsT0FDSyxJQUFJLENBQUNQLDBCQUEwQjtZQUNoQ2MsVUFBVSxJQUFJckMsOENBQU9BLENBQUM7Z0JBQ2xCb0MsTUFBTTtnQkFDTkcsZ0JBQWdCO1lBQ3BCO1FBQ0o7UUFDQSxJQUFJRixTQUFTO1lBQ1RBLFFBQVFqQixLQUFLLEdBQUc7Z0JBQUUsR0FBR2lCLFFBQVFqQixLQUFLO2dCQUFFLENBQUNQLGFBQWEsRUFBRVM7WUFBTztRQUMvRDtRQUNBLElBQUlPLGtCQUFrQnRCLGFBQ2xCc0IsYUFBYSxDQUFDMUIsK0RBQXNCQSxDQUFDLEtBQUtJLFdBQVc7WUFDckQ4QixPQUFPLENBQUNsQywrREFBc0JBLENBQUMsR0FDM0IwQixhQUFhLENBQUMxQiwrREFBc0JBLENBQUM7UUFDN0M7UUFDQSxPQUFPZ0IsUUFBUVgsR0FBRyxDQUFDNkIsU0FBUzNCO0lBQ2hDO0lBQ0E4Qix5QkFBeUJDLFFBQVEsRUFBRTtRQUMvQixJQUFJeEMsK0VBQWtDQSxPQUFPTSxXQUFXO1lBQ3BETCwrRUFBa0NBLENBQUN1QztRQUN2QztJQUNKO0FBQ0o7QUFDQSxNQUFNQyxxQ0FBcUMsSUFBSTFCO0FBQ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL2FzeW5jX2xvY2FsX3N0b3JhZ2UvaW5kZXguanM/MmMyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5pbXBvcnQgeyBSdW5UcmVlIH0gZnJvbSBcImxhbmdzbWl0aFwiO1xuaW1wb3J0IHsgZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSwgc2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSwgX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSwgfSBmcm9tIFwiLi9nbG9iYWxzLmpzXCI7XG5pbXBvcnQgeyBDYWxsYmFja01hbmFnZXIgfSBmcm9tIFwiLi4vLi4vY2FsbGJhY2tzL21hbmFnZXIuanNcIjtcbmV4cG9ydCBjbGFzcyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2Uge1xuICAgIGdldFN0b3JlKCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBydW4oX3N0b3JlLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9XG4gICAgZW50ZXJXaXRoKF9zdG9yZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmNvbnN0IG1vY2tBc3luY0xvY2FsU3RvcmFnZSA9IG5ldyBNb2NrQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbmNvbnN0IExDX0NISUxEX0tFWSA9IFN5bWJvbC5mb3IoXCJsYzpjaGlsZF9jb25maWdcIik7XG5jbGFzcyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIHtcbiAgICBnZXRJbnN0YW5jZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UoKSA/PyBtb2NrQXN5bmNMb2NhbFN0b3JhZ2U7XG4gICAgfVxuICAgIGdldFJ1bm5hYmxlQ29uZmlnKCkge1xuICAgICAgICBjb25zdCBzdG9yYWdlID0gdGhpcy5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAvLyB0aGlzIGhhcyB0aGUgcnVubmFibGUgY29uZmlnXG4gICAgICAgIC8vIHdoaWNoIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIGFsc28gaGF2ZSBhbiBpbnN0YW5jZSBvZiBhIExhbmdDaGFpblRyYWNlclxuICAgICAgICAvLyB3aXRoIHRoZSBydW4gbWFwIHByZXBvcHVsYXRlZFxuICAgICAgICByZXR1cm4gc3RvcmFnZS5nZXRTdG9yZSgpPy5leHRyYT8uW0xDX0NISUxEX0tFWV07XG4gICAgfVxuICAgIHJ1bldpdGhDb25maWcoY29uZmlnLCBjYWxsYmFjaywgYXZvaWRDcmVhdGluZ1Jvb3RSdW5UcmVlKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrTWFuYWdlciA9IENhbGxiYWNrTWFuYWdlci5fY29uZmlndXJlU3luYyhjb25maWc/LmNhbGxiYWNrcywgdW5kZWZpbmVkLCBjb25maWc/LnRhZ3MsIHVuZGVmaW5lZCwgY29uZmlnPy5tZXRhZGF0YSk7XG4gICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0aGlzLmdldEluc3RhbmNlKCk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSBzdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgICAgIGNvbnN0IHBhcmVudFJ1bklkID0gY2FsbGJhY2tNYW5hZ2VyPy5nZXRQYXJlbnRSdW5JZCgpO1xuICAgICAgICBjb25zdCBsYW5nQ2hhaW5UcmFjZXIgPSBjYWxsYmFja01hbmFnZXI/LmhhbmRsZXJzPy5maW5kKChoYW5kbGVyKSA9PiBoYW5kbGVyPy5uYW1lID09PSBcImxhbmdjaGFpbl90cmFjZXJcIik7XG4gICAgICAgIGxldCBydW5UcmVlO1xuICAgICAgICBpZiAobGFuZ0NoYWluVHJhY2VyICYmIHBhcmVudFJ1bklkKSB7XG4gICAgICAgICAgICBydW5UcmVlID0gbGFuZ0NoYWluVHJhY2VyLmNvbnZlcnRUb1J1blRyZWUocGFyZW50UnVuSWQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFhdm9pZENyZWF0aW5nUm9vdFJ1blRyZWUpIHtcbiAgICAgICAgICAgIHJ1blRyZWUgPSBuZXcgUnVuVHJlZSh7XG4gICAgICAgICAgICAgICAgbmFtZTogXCI8cnVubmFibGVfbGFtYmRhPlwiLFxuICAgICAgICAgICAgICAgIHRyYWNpbmdFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5UcmVlKSB7XG4gICAgICAgICAgICBydW5UcmVlLmV4dHJhID0geyAuLi5ydW5UcmVlLmV4dHJhLCBbTENfQ0hJTERfS0VZXTogY29uZmlnIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgcHJldmlvdXNWYWx1ZVtfQ09OVEVYVF9WQVJJQUJMRVNfS0VZXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBydW5UcmVlW19DT05URVhUX1ZBUklBQkxFU19LRVldID1cbiAgICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlW19DT05URVhUX1ZBUklBQkxFU19LRVldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdG9yYWdlLnJ1bihydW5UcmVlLCBjYWxsYmFjayk7XG4gICAgfVxuICAgIGluaXRpYWxpemVHbG9iYWxJbnN0YW5jZShpbnN0YW5jZSkge1xuICAgICAgICBpZiAoZ2V0R2xvYmFsQXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSgpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuY29uc3QgQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiA9IG5ldyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyKCk7XG5leHBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIH07XG4iXSwibmFtZXMiOlsiUnVuVHJlZSIsImdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UiLCJzZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlIiwiX0NPTlRFWFRfVkFSSUFCTEVTX0tFWSIsIkNhbGxiYWNrTWFuYWdlciIsIk1vY2tBc3luY0xvY2FsU3RvcmFnZSIsImdldFN0b3JlIiwidW5kZWZpbmVkIiwicnVuIiwiX3N0b3JlIiwiY2FsbGJhY2siLCJlbnRlcldpdGgiLCJtb2NrQXN5bmNMb2NhbFN0b3JhZ2UiLCJMQ19DSElMRF9LRVkiLCJTeW1ib2wiLCJmb3IiLCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyIiwiZ2V0SW5zdGFuY2UiLCJnZXRSdW5uYWJsZUNvbmZpZyIsInN0b3JhZ2UiLCJleHRyYSIsInJ1bldpdGhDb25maWciLCJjb25maWciLCJhdm9pZENyZWF0aW5nUm9vdFJ1blRyZWUiLCJjYWxsYmFja01hbmFnZXIiLCJfY29uZmlndXJlU3luYyIsImNhbGxiYWNrcyIsInRhZ3MiLCJtZXRhZGF0YSIsInByZXZpb3VzVmFsdWUiLCJwYXJlbnRSdW5JZCIsImdldFBhcmVudFJ1bklkIiwibGFuZ0NoYWluVHJhY2VyIiwiaGFuZGxlcnMiLCJmaW5kIiwiaGFuZGxlciIsIm5hbWUiLCJydW5UcmVlIiwiY29udmVydFRvUnVuVHJlZSIsInRyYWNpbmdFbmFibGVkIiwiaW5pdGlhbGl6ZUdsb2JhbEluc3RhbmNlIiwiaW5zdGFuY2UiLCJBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/callbacks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   awaitAllCallbacks: () => (/* binding */ awaitAllCallbacks),\n/* harmony export */   consumeCallback: () => (/* binding */ consumeCallback),\n/* harmony export */   getQueue: () => (/* binding */ getQueue)\n/* harmony export */ });\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n/* harmony import */ var _async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_local_storage/globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n/* eslint-disable @typescript-eslint/no-explicit-any */ \n\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */ function createQueue() {\n    const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_0__;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1\n    });\n}\nfunction getQueue() {\n    if (typeof queue === \"undefined\") {\n        queue = createQueue();\n    }\n    return queue;\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promiseFn Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */ async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        // Clear config since callbacks are not part of the root run\n        // Avoid using global singleton due to circuluar dependency issues\n        const asyncLocalStorageInstance = (0,_async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n        if (asyncLocalStorageInstance !== undefined) {\n            await asyncLocalStorageInstance.run(undefined, async ()=>promiseFn());\n        } else {\n            await promiseFn();\n        }\n    } else {\n        queue = getQueue();\n        void queue.add(async ()=>{\n            const asyncLocalStorageInstance = (0,_async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalAsyncLocalStorageInstance)();\n            if (asyncLocalStorageInstance !== undefined) {\n                await asyncLocalStorageInstance.run(undefined, async ()=>promiseFn());\n            } else {\n                await promiseFn();\n            }\n        });\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */ function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9jYWxsYmFja3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxxREFBcUQsR0FDckI7QUFDc0Q7QUFDdEYsSUFBSUU7QUFDSjs7OztDQUlDLEdBQ0QsU0FBU0M7SUFDTCxNQUFNQyxTQUFTLEtBQXNCSixHQUFHQSwrQ0FBaUIsR0FBR0Esb0NBQVNBO0lBQ3JFLE9BQU8sSUFBSUksT0FBTztRQUNkRSxXQUFXO1FBQ1hDLGFBQWE7SUFDakI7QUFDSjtBQUNPLFNBQVNDO0lBQ1osSUFBSSxPQUFPTixVQUFVLGFBQWE7UUFDOUJBLFFBQVFDO0lBQ1o7SUFDQSxPQUFPRDtBQUNYO0FBQ0E7Ozs7Q0FJQyxHQUNNLGVBQWVPLGdCQUFnQkMsU0FBUyxFQUFFQyxJQUFJO0lBQ2pELElBQUlBLFNBQVMsTUFBTTtRQUNmLDREQUE0RDtRQUM1RCxrRUFBa0U7UUFDbEUsTUFBTUMsNEJBQTRCWCxtR0FBa0NBO1FBQ3BFLElBQUlXLDhCQUE4QkMsV0FBVztZQUN6QyxNQUFNRCwwQkFBMEJFLEdBQUcsQ0FBQ0QsV0FBVyxVQUFZSDtRQUMvRCxPQUNLO1lBQ0QsTUFBTUE7UUFDVjtJQUNKLE9BQ0s7UUFDRFIsUUFBUU07UUFDUixLQUFLTixNQUFNYSxHQUFHLENBQUM7WUFDWCxNQUFNSCw0QkFBNEJYLG1HQUFrQ0E7WUFDcEUsSUFBSVcsOEJBQThCQyxXQUFXO2dCQUN6QyxNQUFNRCwwQkFBMEJFLEdBQUcsQ0FBQ0QsV0FBVyxVQUFZSDtZQUMvRCxPQUNLO2dCQUNELE1BQU1BO1lBQ1Y7UUFDSjtJQUNKO0FBQ0o7QUFDQTs7O0NBR0MsR0FDTSxTQUFTTTtJQUNaLE9BQU8sT0FBT2QsVUFBVSxjQUFjQSxNQUFNZSxNQUFNLEtBQUtDLFFBQVFDLE9BQU87QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC9zaW5nbGV0b25zL2NhbGxiYWNrcy5qcz83YTY4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmltcG9ydCBQUXVldWVNb2QgZnJvbSBcInAtcXVldWVcIjtcbmltcG9ydCB7IGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgfSBmcm9tIFwiLi9hc3luY19sb2NhbF9zdG9yYWdlL2dsb2JhbHMuanNcIjtcbmxldCBxdWV1ZTtcbi8qKlxuICogQ3JlYXRlcyBhIHF1ZXVlIHVzaW5nIHRoZSBwLXF1ZXVlIGxpYnJhcnkuIFRoZSBxdWV1ZSBpcyBjb25maWd1cmVkIHRvXG4gKiBhdXRvLXN0YXJ0IGFuZCBoYXMgYSBjb25jdXJyZW5jeSBvZiAxLCBtZWFuaW5nIGl0IHdpbGwgcHJvY2VzcyB0YXNrc1xuICogb25lIGF0IGEgdGltZS5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUXVldWUoKSB7XG4gICAgY29uc3QgUFF1ZXVlID0gXCJkZWZhdWx0XCIgaW4gUFF1ZXVlTW9kID8gUFF1ZXVlTW9kLmRlZmF1bHQgOiBQUXVldWVNb2Q7XG4gICAgcmV0dXJuIG5ldyBQUXVldWUoe1xuICAgICAgICBhdXRvU3RhcnQ6IHRydWUsXG4gICAgICAgIGNvbmN1cnJlbmN5OiAxLFxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXVlKCkge1xuICAgIGlmICh0eXBlb2YgcXVldWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcXVldWUgPSBjcmVhdGVRdWV1ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcXVldWU7XG59XG4vKipcbiAqIENvbnN1bWUgYSBwcm9taXNlLCBlaXRoZXIgYWRkaW5nIGl0IHRvIHRoZSBxdWV1ZSBvciB3YWl0aW5nIGZvciBpdCB0byByZXNvbHZlXG4gKiBAcGFyYW0gcHJvbWlzZUZuIFByb21pc2UgdG8gY29uc3VtZVxuICogQHBhcmFtIHdhaXQgV2hldGhlciB0byB3YWl0IGZvciB0aGUgcHJvbWlzZSB0byByZXNvbHZlIG9yIHJlc29sdmUgaW1tZWRpYXRlbHlcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbnN1bWVDYWxsYmFjayhwcm9taXNlRm4sIHdhaXQpIHtcbiAgICBpZiAod2FpdCA9PT0gdHJ1ZSkge1xuICAgICAgICAvLyBDbGVhciBjb25maWcgc2luY2UgY2FsbGJhY2tzIGFyZSBub3QgcGFydCBvZiB0aGUgcm9vdCBydW5cbiAgICAgICAgLy8gQXZvaWQgdXNpbmcgZ2xvYmFsIHNpbmdsZXRvbiBkdWUgdG8gY2lyY3VsdWFyIGRlcGVuZGVuY3kgaXNzdWVzXG4gICAgICAgIGNvbnN0IGFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UgPSBnZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlKCk7XG4gICAgICAgIGlmIChhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IGFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UucnVuKHVuZGVmaW5lZCwgYXN5bmMgKCkgPT4gcHJvbWlzZUZuKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgcHJvbWlzZUZuKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHF1ZXVlID0gZ2V0UXVldWUoKTtcbiAgICAgICAgdm9pZCBxdWV1ZS5hZGQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXN5bmNMb2NhbFN0b3JhZ2VJbnN0YW5jZSA9IGdldEdsb2JhbEFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIGlmIChhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBhc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlLnJ1bih1bmRlZmluZWQsIGFzeW5jICgpID0+IHByb21pc2VGbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGF3YWl0IHByb21pc2VGbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4vKipcbiAqIFdhaXRzIGZvciBhbGwgcHJvbWlzZXMgaW4gdGhlIHF1ZXVlIHRvIHJlc29sdmUuIElmIHRoZSBxdWV1ZSBpc1xuICogdW5kZWZpbmVkLCBpdCBpbW1lZGlhdGVseSByZXNvbHZlcyBhIHByb21pc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhd2FpdEFsbENhbGxiYWNrcygpIHtcbiAgICByZXR1cm4gdHlwZW9mIHF1ZXVlICE9PSBcInVuZGVmaW5lZFwiID8gcXVldWUub25JZGxlKCkgOiBQcm9taXNlLnJlc29sdmUoKTtcbn1cbiJdLCJuYW1lcyI6WyJQUXVldWVNb2QiLCJnZXRHbG9iYWxBc3luY0xvY2FsU3RvcmFnZUluc3RhbmNlIiwicXVldWUiLCJjcmVhdGVRdWV1ZSIsIlBRdWV1ZSIsImRlZmF1bHQiLCJhdXRvU3RhcnQiLCJjb25jdXJyZW5jeSIsImdldFF1ZXVlIiwiY29uc3VtZUNhbGxiYWNrIiwicHJvbWlzZUZuIiwid2FpdCIsImFzeW5jTG9jYWxTdG9yYWdlSW5zdGFuY2UiLCJ1bmRlZmluZWQiLCJydW4iLCJhZGQiLCJhd2FpdEFsbENhbGxiYWNrcyIsIm9uSWRsZSIsIlByb21pc2UiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncLocalStorageProviderSingleton: () => (/* reexport safe */ _async_local_storage_index_js__WEBPACK_IMPORTED_MODULE_0__.AsyncLocalStorageProviderSingleton),\n/* harmony export */   MockAsyncLocalStorage: () => (/* reexport safe */ _async_local_storage_index_js__WEBPACK_IMPORTED_MODULE_0__.MockAsyncLocalStorage),\n/* harmony export */   _CONTEXT_VARIABLES_KEY: () => (/* reexport safe */ _async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__._CONTEXT_VARIABLES_KEY)\n/* harmony export */ });\n/* harmony import */ var _async_local_storage_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./async_local_storage/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/index.js\");\n/* harmony import */ var _async_local_storage_globals_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_local_storage/globals.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/async_local_storage/globals.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RztBQUNsQztBQUNKO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy9pbmRleC5qcz82NGQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jTG9jYWxTdG9yYWdlUHJvdmlkZXJTaW5nbGV0b24sIE1vY2tBc3luY0xvY2FsU3RvcmFnZSwgfSBmcm9tIFwiLi9hc3luY19sb2NhbF9zdG9yYWdlL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBfQ09OVEVYVF9WQVJJQUJMRVNfS0VZIH0gZnJvbSBcIi4vYXN5bmNfbG9jYWxfc3RvcmFnZS9nbG9iYWxzLmpzXCI7XG5leHBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZVByb3ZpZGVyU2luZ2xldG9uLCBNb2NrQXN5bmNMb2NhbFN0b3JhZ2UsIH07XG5leHBvcnQgeyBfQ09OVEVYVF9WQVJJQUJMRVNfS0VZIH07XG4iXSwibmFtZXMiOlsiQXN5bmNMb2NhbFN0b3JhZ2VQcm92aWRlclNpbmdsZXRvbiIsIk1vY2tBc3luY0xvY2FsU3RvcmFnZSIsIl9DT05URVhUX1ZBUklBQkxFU19LRVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/singletons/tracer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getDefaultLangChainClientSingleton: () => (/* binding */ getDefaultLangChainClientSingleton),\n/* harmony export */   setDefaultLangChainClientSingleton: () => (/* binding */ setDefaultLangChainClientSingleton)\n/* harmony export */ });\n/* harmony import */ var langsmith__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith */ \"(rsc)/./node_modules/langsmith/index.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n\nlet client;\nconst getDefaultLangChainClientSingleton = ()=>{\n    if (client === undefined) {\n        const clientParams = (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"LANGCHAIN_CALLBACKS_BACKGROUND\") === \"false\" ? {\n            // LangSmith has its own backgrounding system\n            blockOnRootRunFinalization: true\n        } : {};\n        client = new langsmith__WEBPACK_IMPORTED_MODULE_0__.Client(clientParams);\n    }\n    return client;\n};\nconst setDefaultLangChainClientSingleton = (newClient)=>{\n    client = newClient;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3Qvc2luZ2xldG9ucy90cmFjZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtQztBQUNzQjtBQUN6RCxJQUFJRTtBQUNHLE1BQU1DLHFDQUFxQztJQUM5QyxJQUFJRCxXQUFXRSxXQUFXO1FBQ3RCLE1BQU1DLGVBQWVKLHFFQUFzQkEsQ0FBQyxzQ0FBc0MsVUFDNUU7WUFDRSw2Q0FBNkM7WUFDN0NLLDRCQUE0QjtRQUNoQyxJQUNFLENBQUM7UUFDUEosU0FBUyxJQUFJRiw2Q0FBTUEsQ0FBQ0s7SUFDeEI7SUFDQSxPQUFPSDtBQUNYLEVBQUU7QUFDSyxNQUFNSyxxQ0FBcUMsQ0FBQ0M7SUFDL0NOLFNBQVNNO0FBQ2IsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3NpbmdsZXRvbnMvdHJhY2VyLmpzPzQxYzEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSBcImxhbmdzbWl0aFwiO1xuaW1wb3J0IHsgZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSB9IGZyb20gXCIuLi91dGlscy9lbnYuanNcIjtcbmxldCBjbGllbnQ7XG5leHBvcnQgY29uc3QgZ2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiA9ICgpID0+IHtcbiAgICBpZiAoY2xpZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgY2xpZW50UGFyYW1zID0gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShcIkxBTkdDSEFJTl9DQUxMQkFDS1NfQkFDS0dST1VORFwiKSA9PT0gXCJmYWxzZVwiXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAvLyBMYW5nU21pdGggaGFzIGl0cyBvd24gYmFja2dyb3VuZGluZyBzeXN0ZW1cbiAgICAgICAgICAgICAgICBibG9ja09uUm9vdFJ1bkZpbmFsaXphdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge307XG4gICAgICAgIGNsaWVudCA9IG5ldyBDbGllbnQoY2xpZW50UGFyYW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIGNsaWVudDtcbn07XG5leHBvcnQgY29uc3Qgc2V0RGVmYXVsdExhbmdDaGFpbkNsaWVudFNpbmdsZXRvbiA9IChuZXdDbGllbnQpID0+IHtcbiAgICBjbGllbnQgPSBuZXdDbGllbnQ7XG59O1xuIl0sIm5hbWVzIjpbIkNsaWVudCIsImdldEVudmlyb25tZW50VmFyaWFibGUiLCJjbGllbnQiLCJnZXREZWZhdWx0TGFuZ0NoYWluQ2xpZW50U2luZ2xldG9uIiwidW5kZWZpbmVkIiwiY2xpZW50UGFyYW1zIiwiYmxvY2tPblJvb3RSdW5GaW5hbGl6YXRpb24iLCJzZXREZWZhdWx0TGFuZ0NoYWluQ2xpZW50U2luZ2xldG9uIiwibmV3Q2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseToolkit: () => (/* binding */ BaseToolkit),\n/* harmony export */   DynamicStructuredTool: () => (/* binding */ DynamicStructuredTool),\n/* harmony export */   DynamicTool: () => (/* binding */ DynamicTool),\n/* harmony export */   StructuredTool: () => (/* binding */ StructuredTool),\n/* harmony export */   Tool: () => (/* binding */ Tool),\n/* harmony export */   ToolInputParsingException: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_5__.ToolInputParsingException),\n/* harmony export */   tool: () => (/* binding */ tool)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/manager.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/manager.js\");\n/* harmony import */ var _language_models_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../language_models/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n/* harmony import */ var _runnables_config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../runnables/config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _messages_tool_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/tool.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/tool.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\");\n/* harmony import */ var _utils_types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/types/is_zod_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/is_zod_schema.js\");\n\n\n\n\n\n\n\n\n\n/**\n * Base class for Tools that accept input of any shape defined by a Zod schema.\n */ class StructuredTool extends _language_models_base_js__WEBPACK_IMPORTED_MODULE_1__.BaseLangChain {\n    get lc_namespace() {\n        return [\n            \"langchain\",\n            \"tools\"\n        ];\n    }\n    constructor(fields){\n        super(fields ?? {});\n        Object.defineProperty(this, \"returnDirect\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        // TODO: Make default in 0.3\n        Object.defineProperty(this, \"verboseParsingErrors\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        /**\n         * The tool response format.\n         *\n         * If \"content\" then the output of the tool is interpreted as the contents of a\n         * ToolMessage. If \"content_and_artifact\" then the output is expected to be a\n         * two-tuple corresponding to the (content, artifact) of a ToolMessage.\n         *\n         * @default \"content\"\n         */ Object.defineProperty(this, \"responseFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"content\"\n        });\n        this.verboseParsingErrors = fields?.verboseParsingErrors ?? this.verboseParsingErrors;\n        this.responseFormat = fields?.responseFormat ?? this.responseFormat;\n    }\n    /**\n     * Invokes the tool with the provided input and configuration.\n     * @param input The input for the tool.\n     * @param config Optional configuration for the tool.\n     * @returns A Promise that resolves with a string.\n     */ async invoke(input, config) {\n        let tool_call_id;\n        let toolInput;\n        let enrichedConfig = (0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.ensureConfig)(config);\n        if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_5__._isToolCall)(input)) {\n            tool_call_id = input.id;\n            toolInput = input.args;\n            enrichedConfig = {\n                ...enrichedConfig,\n                toolCall: input,\n                configurable: {\n                    ...enrichedConfig.configurable,\n                    tool_call_id\n                }\n            };\n        } else {\n            toolInput = input;\n        }\n        return this.call(toolInput, enrichedConfig);\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     *\n     * Calls the tool with the provided argument, configuration, and tags. It\n     * parses the input according to the schema, handles any errors, and\n     * manages callbacks.\n     * @param arg The input argument for the tool.\n     * @param configArg Optional configuration or callbacks for the tool.\n     * @param tags Optional tags for the tool.\n     * @returns A Promise that resolves with a string.\n     */ async call(arg, configArg, /** @deprecated */ tags) {\n        let parsed;\n        try {\n            parsed = await this.schema.parseAsync(arg);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (e) {\n            let message = `Received tool input did not match expected schema`;\n            if (this.verboseParsingErrors) {\n                message = `${message}\\nDetails: ${e.message}`;\n            }\n            throw new _utils_js__WEBPACK_IMPORTED_MODULE_5__.ToolInputParsingException(message, JSON.stringify(arg));\n        }\n        const config = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(configArg);\n        const callbackManager_ = _callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.CallbackManager.configure(config.callbacks, this.callbacks, config.tags || tags, this.tags, config.metadata, this.metadata, {\n            verbose: this.verbose\n        });\n        const runManager = await callbackManager_?.handleToolStart(this.toJSON(), typeof parsed === \"string\" ? parsed : JSON.stringify(parsed), config.runId, undefined, undefined, undefined, config.runName);\n        delete config.runId;\n        let result;\n        try {\n            result = await this._call(parsed, runManager, config);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        } catch (e) {\n            await runManager?.handleToolError(e);\n            throw e;\n        }\n        let content;\n        let artifact;\n        if (this.responseFormat === \"content_and_artifact\") {\n            if (Array.isArray(result) && result.length === 2) {\n                [content, artifact] = result;\n            } else {\n                throw new Error(`Tool response format is \"content_and_artifact\" but the output was not a two-tuple.\\nResult: ${JSON.stringify(result)}`);\n            }\n        } else {\n            content = result;\n        }\n        let toolCallId;\n        if (config && \"configurable\" in config) {\n            toolCallId = config.configurable.tool_call_id;\n        }\n        const formattedOutput = _formatToolOutput({\n            content,\n            artifact,\n            toolCallId,\n            name: this.name\n        });\n        await runManager?.handleToolEnd(formattedOutput);\n        return formattedOutput;\n    }\n}\n/**\n * Base class for Tools that accept input as a string.\n */ class Tool extends StructuredTool {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: zod__WEBPACK_IMPORTED_MODULE_7__.z.object({\n                input: zod__WEBPACK_IMPORTED_MODULE_7__.z.string().optional()\n            }).transform((obj)=>obj.input)\n        });\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     *\n     * Calls the tool with the provided argument and callbacks. It handles\n     * string inputs specifically.\n     * @param arg The input argument for the tool, which can be a string, undefined, or an input of the tool's schema.\n     * @param callbacks Optional callbacks for the tool.\n     * @returns A Promise that resolves with a string.\n     */ call(arg, callbacks) {\n        return super.call(typeof arg === \"string\" || !arg ? {\n            input: arg\n        } : arg, callbacks);\n    }\n}\n/**\n * A tool that can be created dynamically from a function, name, and description.\n */ class DynamicTool extends Tool {\n    static lc_name() {\n        return \"DynamicTool\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.func = fields.func;\n        this.returnDirect = fields.returnDirect ?? this.returnDirect;\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     */ async call(arg, configArg) {\n        const config = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(configArg);\n        if (config.runName === undefined) {\n            config.runName = this.name;\n        }\n        return super.call(arg, config);\n    }\n    /** @ignore */ async _call(input, runManager, parentConfig) {\n        return this.func(input, runManager, parentConfig);\n    }\n}\n/**\n * A tool that can be created dynamically from a function, name, and\n * description, designed to work with structured data. It extends the\n * StructuredTool class and overrides the _call method to execute the\n * provided function when the tool is called.\n *\n * Schema can be passed as Zod or JSON schema. The tool will not validate\n * input if JSON schema is passed.\n */ class DynamicStructuredTool extends StructuredTool {\n    static lc_name() {\n        return \"DynamicStructuredTool\";\n    }\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"func\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"schema\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.description = fields.description;\n        this.func = fields.func;\n        this.returnDirect = fields.returnDirect ?? this.returnDirect;\n        this.schema = (0,_utils_types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_6__.isZodSchema)(fields.schema) ? fields.schema : zod__WEBPACK_IMPORTED_MODULE_7__.z.object({}).passthrough();\n    }\n    /**\n     * @deprecated Use .invoke() instead. Will be removed in 0.3.0.\n     */ async call(arg, configArg, /** @deprecated */ tags) {\n        const config = (0,_callbacks_manager_js__WEBPACK_IMPORTED_MODULE_0__.parseCallbackConfigArg)(configArg);\n        if (config.runName === undefined) {\n            config.runName = this.name;\n        }\n        return super.call(arg, config, tags);\n    }\n    _call(arg, runManager, parentConfig) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.func(arg, runManager, parentConfig);\n    }\n}\n/**\n * Abstract base class for toolkits in LangChain. Toolkits are collections\n * of tools that agents can use. Subclasses must implement the `tools`\n * property to provide the specific tools for the toolkit.\n */ class BaseToolkit {\n    getTools() {\n        return this.tools;\n    }\n}\nfunction tool(func, fields) {\n    // If the schema is not provided, or it's a string schema, create a DynamicTool\n    if (!fields.schema || (0,_utils_types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_6__.isZodSchema)(fields.schema) && (!(\"shape\" in fields.schema) || !fields.schema.shape)) {\n        return new DynamicTool({\n            ...fields,\n            description: fields.description ?? fields.schema?.description ?? `${fields.name} tool`,\n            func: async (input, runManager, config)=>{\n                return new Promise((resolve, reject)=>{\n                    const childConfig = (0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.patchConfig)(config, {\n                        callbacks: runManager?.getChild()\n                    });\n                    void _singletons_index_js__WEBPACK_IMPORTED_MODULE_4__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.pickRunnableConfigKeys)(childConfig), async ()=>{\n                        try {\n                            // TS doesn't restrict the type here based on the guard above\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            resolve(func(input, childConfig));\n                        } catch (e) {\n                            reject(e);\n                        }\n                    });\n                });\n            }\n        });\n    }\n    const description = fields.description ?? fields.schema.description ?? `${fields.name} tool`;\n    return new DynamicStructuredTool({\n        ...fields,\n        description,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        schema: fields.schema,\n        // TODO: Consider moving into DynamicStructuredTool constructor\n        func: async (input, runManager, config)=>{\n            return new Promise((resolve, reject)=>{\n                const childConfig = (0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.patchConfig)(config, {\n                    callbacks: runManager?.getChild()\n                });\n                void _singletons_index_js__WEBPACK_IMPORTED_MODULE_4__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_2__.pickRunnableConfigKeys)(childConfig), async ()=>{\n                    try {\n                        // TS doesn't restrict the type here based on the guard above\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        resolve(func(input, childConfig));\n                    } catch (e) {\n                        reject(e);\n                    }\n                });\n            });\n        }\n    });\n}\nfunction _formatToolOutput(params) {\n    const { content, artifact, toolCallId } = params;\n    if (toolCallId && !(0,_messages_tool_js__WEBPACK_IMPORTED_MODULE_3__.isDirectToolOutput)(content)) {\n        if (typeof content === \"string\" || Array.isArray(content) && content.every((item)=>typeof item === \"object\")) {\n            return new _messages_tool_js__WEBPACK_IMPORTED_MODULE_3__.ToolMessage({\n                content,\n                artifact,\n                tool_call_id: toolCallId,\n                name: params.name\n            });\n        } else {\n            return new _messages_tool_js__WEBPACK_IMPORTED_MODULE_3__.ToolMessage({\n                content: _stringify(content),\n                artifact,\n                tool_call_id: toolCallId,\n                name: params.name\n            });\n        }\n    } else {\n        return content;\n    }\n}\nfunction _stringify(content) {\n    try {\n        return JSON.stringify(content, null, 2);\n    } catch (_noOp) {\n        return `${content}`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tools/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tools/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ToolInputParsingException: () => (/* binding */ ToolInputParsingException),\n/* harmony export */   _isToolCall: () => (/* binding */ _isToolCall)\n/* harmony export */ });\nfunction _isToolCall(toolCall) {\n    return !!(toolCall && typeof toolCall === \"object\" && \"type\" in toolCall && toolCall.type === \"tool_call\");\n}\n/**\n * Custom error class used to handle exceptions related to tool input parsing.\n * It extends the built-in `Error` class and adds an optional `output`\n * property that can hold the output that caused the exception.\n */ class ToolInputParsingException extends Error {\n    constructor(message, output){\n        super(message);\n        Object.defineProperty(this, \"output\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.output = output;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQSxZQUFZQyxRQUFRO0lBQ2hDLE9BQU8sQ0FBQyxDQUFFQSxDQUFBQSxZQUNOLE9BQU9BLGFBQWEsWUFDcEIsVUFBVUEsWUFDVkEsU0FBU0MsSUFBSSxLQUFLLFdBQVU7QUFDcEM7QUFDQTs7OztDQUlDLEdBQ00sTUFBTUMsa0NBQWtDQztJQUMzQ0MsWUFBWUMsT0FBTyxFQUFFQyxNQUFNLENBQUU7UUFDekIsS0FBSyxDQUFDRDtRQUNORSxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ04sTUFBTSxHQUFHQTtJQUNsQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdG9vbHMvdXRpbHMuanM/ZTk0OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gX2lzVG9vbENhbGwodG9vbENhbGwpIHtcbiAgICByZXR1cm4gISEodG9vbENhbGwgJiZcbiAgICAgICAgdHlwZW9mIHRvb2xDYWxsID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgIFwidHlwZVwiIGluIHRvb2xDYWxsICYmXG4gICAgICAgIHRvb2xDYWxsLnR5cGUgPT09IFwidG9vbF9jYWxsXCIpO1xufVxuLyoqXG4gKiBDdXN0b20gZXJyb3IgY2xhc3MgdXNlZCB0byBoYW5kbGUgZXhjZXB0aW9ucyByZWxhdGVkIHRvIHRvb2wgaW5wdXQgcGFyc2luZy5cbiAqIEl0IGV4dGVuZHMgdGhlIGJ1aWx0LWluIGBFcnJvcmAgY2xhc3MgYW5kIGFkZHMgYW4gb3B0aW9uYWwgYG91dHB1dGBcbiAqIHByb3BlcnR5IHRoYXQgY2FuIGhvbGQgdGhlIG91dHB1dCB0aGF0IGNhdXNlZCB0aGUgZXhjZXB0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgVG9vbElucHV0UGFyc2luZ0V4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvdXRwdXQpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm91dHB1dFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm91dHB1dCA9IG91dHB1dDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiX2lzVG9vbENhbGwiLCJ0b29sQ2FsbCIsInR5cGUiLCJUb29sSW5wdXRQYXJzaW5nRXhjZXB0aW9uIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIm1lc3NhZ2UiLCJvdXRwdXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tools/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/base.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/base.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseTracer: () => (/* binding */ BaseTracer),\n/* harmony export */   isBaseTracer: () => (/* binding */ isBaseTracer)\n/* harmony export */ });\n/* harmony import */ var _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../callbacks/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/callbacks/base.js\");\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _coerceToDict(value, defaultKey) {\n    return value && !Array.isArray(value) && typeof value === \"object\" ? value : {\n        [defaultKey]: value\n    };\n}\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nfunction convertToDottedOrderFormat(epoch, runId, executionOrder) {\n    const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n    return stripNonAlphanumeric(`${new Date(epoch).toISOString().slice(0, -1)}${paddedOrder}Z`) + runId;\n}\nfunction isBaseTracer(x) {\n    return typeof x._addRunToRunMap === \"function\";\n}\nclass BaseTracer extends _callbacks_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseCallbackHandler {\n    constructor(_fields){\n        super(...arguments);\n        Object.defineProperty(this, \"runMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    copy() {\n        return this;\n    }\n    stringifyError(error) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof Error) {\n            return error.message + (error?.stack ? `\\n\\n${error.stack}` : \"\");\n        }\n        if (typeof error === \"string\") {\n            return error;\n        }\n        return `${error}`;\n    }\n    _addChildRun(parentRun, childRun) {\n        parentRun.child_runs.push(childRun);\n    }\n    _addRunToRunMap(run) {\n        const currentDottedOrder = convertToDottedOrderFormat(run.start_time, run.id, run.execution_order);\n        const storedRun = {\n            ...run\n        };\n        if (storedRun.parent_run_id !== undefined) {\n            const parentRun = this.runMap.get(storedRun.parent_run_id);\n            if (parentRun) {\n                this._addChildRun(parentRun, storedRun);\n                parentRun.child_execution_order = Math.max(parentRun.child_execution_order, storedRun.child_execution_order);\n                storedRun.trace_id = parentRun.trace_id;\n                if (parentRun.dotted_order !== undefined) {\n                    storedRun.dotted_order = [\n                        parentRun.dotted_order,\n                        currentDottedOrder\n                    ].join(\".\");\n                } else {\n                // This can happen naturally for callbacks added within a run\n                // console.debug(`Parent run with UUID ${storedRun.parent_run_id} has no dotted order.`);\n                }\n            } else {\n            // This can happen naturally for callbacks added within a run\n            // console.debug(\n            //   `Parent run with UUID ${storedRun.parent_run_id} not found.`\n            // );\n            }\n        } else {\n            storedRun.trace_id = storedRun.id;\n            storedRun.dotted_order = currentDottedOrder;\n        }\n        this.runMap.set(storedRun.id, storedRun);\n        return storedRun;\n    }\n    async _endTrace(run) {\n        const parentRun = run.parent_run_id !== undefined && this.runMap.get(run.parent_run_id);\n        if (parentRun) {\n            parentRun.child_execution_order = Math.max(parentRun.child_execution_order, run.child_execution_order);\n        } else {\n            await this.persistRun(run);\n        }\n        this.runMap.delete(run.id);\n        await this.onRunUpdate?.(run);\n    }\n    _getExecutionOrder(parentRunId) {\n        const parentRun = parentRunId !== undefined && this.runMap.get(parentRunId);\n        // If a run has no parent then execution order is 1\n        if (!parentRun) {\n            return 1;\n        }\n        return parentRun.child_execution_order + 1;\n    }\n    /**\n     * Create and add a run to the run map for LLM start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                prompts\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.runMap.get(runId) ?? this._createRunForLLMStart(llm, prompts, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chat model start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const finalExtraParams = metadata ? {\n            ...extraParams,\n            metadata\n        } : extraParams;\n        const run = {\n            id: runId,\n            name: name ?? llm.id[llm.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: llm,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                messages\n            },\n            execution_order,\n            child_runs: [],\n            child_execution_order: execution_order,\n            run_type: \"llm\",\n            extra: finalExtraParams ?? {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name) {\n        const run = this.runMap.get(runId) ?? this._createRunForChatModelStart(llm, messages, runId, parentRunId, extraParams, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onLLMStart?.(run);\n        return run;\n    }\n    async handleLLMEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = output;\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleLLMError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(\"No LLM run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onLLMError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for chain start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? chain.id[chain.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: chain,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs,\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: runType ?? \"chain\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name) {\n        const run = this.runMap.get(runId) ?? this._createRunForChainStart(chain, inputs, runId, parentRunId, tags, metadata, runType, name);\n        await this.onRunCreate?.(run);\n        await this.onChainStart?.(run);\n        return run;\n    }\n    async handleChainEnd(outputs, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.outputs = _coerceToDict(outputs, \"output\");\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleChainError(error, runId, _parentRunId, _tags, kwargs) {\n        const run = this.runMap.get(runId);\n        if (!run) {\n            throw new Error(\"No chain run to end.\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        if (kwargs?.inputs !== undefined) {\n            run.inputs = _coerceToDict(kwargs.inputs, \"input\");\n        }\n        await this.onChainError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    /**\n     * Create and add a run to the run map for tool start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? tool.id[tool.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: tool,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                input\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"tool\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleToolStart(tool, input, runId, parentRunId, tags, metadata, name) {\n        const run = this.runMap.get(runId) ?? this._createRunForToolStart(tool, input, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onToolStart?.(run);\n        return run;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleToolEnd(output, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            output\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleToolError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"tool\") {\n            throw new Error(\"No tool run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onToolError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleAgentAction(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        const agentRun = run;\n        agentRun.actions = agentRun.actions || [];\n        agentRun.actions.push(action);\n        agentRun.events.push({\n            name: \"agent_action\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentAction?.(run);\n    }\n    async handleAgentEnd(action, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"agent_end\",\n            time: new Date().toISOString(),\n            kwargs: {\n                action\n            }\n        });\n        await this.onAgentEnd?.(run);\n    }\n    /**\n     * Create and add a run to the run map for retriever start events.\n     * This must sometimes be done synchronously to avoid race conditions\n     * when callbacks are backgrounded, so we expose it as a separate method here.\n     */ _createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const execution_order = this._getExecutionOrder(parentRunId);\n        const start_time = Date.now();\n        const run = {\n            id: runId,\n            name: name ?? retriever.id[retriever.id.length - 1],\n            parent_run_id: parentRunId,\n            start_time,\n            serialized: retriever,\n            events: [\n                {\n                    name: \"start\",\n                    time: new Date(start_time).toISOString()\n                }\n            ],\n            inputs: {\n                query\n            },\n            execution_order,\n            child_execution_order: execution_order,\n            run_type: \"retriever\",\n            child_runs: [],\n            extra: metadata ? {\n                metadata\n            } : {},\n            tags: tags || []\n        };\n        return this._addRunToRunMap(run);\n    }\n    async handleRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name) {\n        const run = this.runMap.get(runId) ?? this._createRunForRetrieverStart(retriever, query, runId, parentRunId, tags, metadata, name);\n        await this.onRunCreate?.(run);\n        await this.onRetrieverStart?.(run);\n        return run;\n    }\n    async handleRetrieverEnd(documents, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.outputs = {\n            documents\n        };\n        run.events.push({\n            name: \"end\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverEnd?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleRetrieverError(error, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"retriever\") {\n            throw new Error(\"No retriever run to end\");\n        }\n        run.end_time = Date.now();\n        run.error = this.stringifyError(error);\n        run.events.push({\n            name: \"error\",\n            time: new Date(run.end_time).toISOString()\n        });\n        await this.onRetrieverError?.(run);\n        await this._endTrace(run);\n        return run;\n    }\n    async handleText(text, runId) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"chain\") {\n            return;\n        }\n        run.events.push({\n            name: \"text\",\n            time: new Date().toISOString(),\n            kwargs: {\n                text\n            }\n        });\n        await this.onText?.(run);\n    }\n    async handleLLMNewToken(token, idx, runId, _parentRunId, _tags, fields) {\n        const run = this.runMap.get(runId);\n        if (!run || run?.run_type !== \"llm\") {\n            throw new Error(`Invalid \"runId\" provided to \"handleLLMNewToken\" callback.`);\n        }\n        run.events.push({\n            name: \"new_token\",\n            time: new Date().toISOString(),\n            kwargs: {\n                token,\n                idx,\n                chunk: fields?.chunk\n            }\n        });\n        await this.onLLMNewToken?.(run, token, {\n            chunk: fields?.chunk\n        });\n        return run;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/console.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/console.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConsoleCallbackHandler: () => (/* binding */ ConsoleCallbackHandler)\n/* harmony export */ });\n/* harmony import */ var ansi_styles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ansi-styles */ \"(rsc)/./node_modules/@langchain/core/node_modules/ansi-styles/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\n\nfunction wrap(style, text) {\n    return `${style.open}${text}${style.close}`;\n}\nfunction tryJsonStringify(obj, fallback) {\n    try {\n        return JSON.stringify(obj, null, 2);\n    } catch (err) {\n        return fallback;\n    }\n}\nfunction formatKVMapItem(value) {\n    if (typeof value === \"string\") {\n        return value.trim();\n    }\n    if (value === null || value === undefined) {\n        return value;\n    }\n    return tryJsonStringify(value, value.toString());\n}\nfunction elapsed(run) {\n    if (!run.end_time) return \"\";\n    const elapsed = run.end_time - run.start_time;\n    if (elapsed < 1000) {\n        return `${elapsed}ms`;\n    }\n    return `${(elapsed / 1000).toFixed(2)}s`;\n}\nconst { color } = ansi_styles__WEBPACK_IMPORTED_MODULE_0__;\n/**\n * A tracer that logs all events to the console. It extends from the\n * `BaseTracer` class and overrides its methods to provide custom logging\n * functionality.\n * @example\n * ```typescript\n *\n * const llm = new ChatAnthropic({\n *   temperature: 0,\n *   tags: [\"example\", \"callbacks\", \"constructor\"],\n *   callbacks: [new ConsoleCallbackHandler()],\n * });\n *\n * ```\n */ class ConsoleCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"console_callback_handler\"\n        });\n    }\n    /**\n     * Method used to persist the run. In this case, it simply returns a\n     * resolved promise as there's no persistence logic.\n     * @param _run The run to persist.\n     * @returns A resolved promise.\n     */ persistRun(_run) {\n        return Promise.resolve();\n    }\n    // utility methods\n    /**\n     * Method used to get all the parent runs of a given run.\n     * @param run The run whose parents are to be retrieved.\n     * @returns An array of parent runs.\n     */ getParents(run) {\n        const parents = [];\n        let currentRun = run;\n        while(currentRun.parent_run_id){\n            const parent = this.runMap.get(currentRun.parent_run_id);\n            if (parent) {\n                parents.push(parent);\n                currentRun = parent;\n            } else {\n                break;\n            }\n        }\n        return parents;\n    }\n    /**\n     * Method used to get a string representation of the run's lineage, which\n     * is used in logging.\n     * @param run The run whose lineage is to be retrieved.\n     * @returns A string representation of the run's lineage.\n     */ getBreadcrumbs(run) {\n        const parents = this.getParents(run).reverse();\n        const string = [\n            ...parents,\n            run\n        ].map((parent, i, arr)=>{\n            const name = `${parent.execution_order}:${parent.run_type}:${parent.name}`;\n            return i === arr.length - 1 ? wrap(ansi_styles__WEBPACK_IMPORTED_MODULE_0__.bold, name) : name;\n        }).join(\" > \");\n        return wrap(color.grey, string);\n    }\n    // logging methods\n    /**\n     * Method used to log the start of a chain run.\n     * @param run The chain run that has started.\n     * @returns void\n     */ onChainStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[chain/start]\")} [${crumbs}] Entering Chain run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a chain run.\n     * @param run The chain run that has ended.\n     * @returns void\n     */ onChainEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[chain/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Chain run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a chain run.\n     * @param run The chain run that has errored.\n     * @returns void\n     */ onChainError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[chain/error]\")} [${crumbs}] [${elapsed(run)}] Chain run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of an LLM run.\n     * @param run The LLM run that has started.\n     * @returns void\n     */ onLLMStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        const inputs = \"prompts\" in run.inputs ? {\n            prompts: run.inputs.prompts.map((p)=>p.trim())\n        } : run.inputs;\n        console.log(`${wrap(color.green, \"[llm/start]\")} [${crumbs}] Entering LLM run with input: ${tryJsonStringify(inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of an LLM run.\n     * @param run The LLM run that has ended.\n     * @returns void\n     */ onLLMEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[llm/end]\")} [${crumbs}] [${elapsed(run)}] Exiting LLM run with output: ${tryJsonStringify(run.outputs, \"[response]\")}`);\n    }\n    /**\n     * Method used to log any errors of an LLM run.\n     * @param run The LLM run that has errored.\n     * @returns void\n     */ onLLMError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[llm/error]\")} [${crumbs}] [${elapsed(run)}] LLM run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a tool run.\n     * @param run The tool run that has started.\n     * @returns void\n     */ onToolStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[tool/start]\")} [${crumbs}] Entering Tool run with input: \"${formatKVMapItem(run.inputs.input)}\"`);\n    }\n    /**\n     * Method used to log the end of a tool run.\n     * @param run The tool run that has ended.\n     * @returns void\n     */ onToolEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[tool/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Tool run with output: \"${formatKVMapItem(run.outputs?.output)}\"`);\n    }\n    /**\n     * Method used to log any errors of a tool run.\n     * @param run The tool run that has errored.\n     * @returns void\n     */ onToolError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[tool/error]\")} [${crumbs}] [${elapsed(run)}] Tool run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the start of a retriever run.\n     * @param run The retriever run that has started.\n     * @returns void\n     */ onRetrieverStart(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.green, \"[retriever/start]\")} [${crumbs}] Entering Retriever run with input: ${tryJsonStringify(run.inputs, \"[inputs]\")}`);\n    }\n    /**\n     * Method used to log the end of a retriever run.\n     * @param run The retriever run that has ended.\n     * @returns void\n     */ onRetrieverEnd(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.cyan, \"[retriever/end]\")} [${crumbs}] [${elapsed(run)}] Exiting Retriever run with output: ${tryJsonStringify(run.outputs, \"[outputs]\")}`);\n    }\n    /**\n     * Method used to log any errors of a retriever run.\n     * @param run The retriever run that has errored.\n     * @returns void\n     */ onRetrieverError(run) {\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.red, \"[retriever/error]\")} [${crumbs}] [${elapsed(run)}] Retriever run errored with error: ${tryJsonStringify(run.error, \"[error]\")}`);\n    }\n    /**\n     * Method used to log the action selected by the agent.\n     * @param run The run in which the agent action occurred.\n     * @returns void\n     */ onAgentAction(run) {\n        const agentRun = run;\n        const crumbs = this.getBreadcrumbs(run);\n        console.log(`${wrap(color.blue, \"[agent/action]\")} [${crumbs}] Agent selected action: ${tryJsonStringify(agentRun.actions[agentRun.actions.length - 1], \"[action]\")}`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/console.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/event_stream.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EventStreamCallbackHandler: () => (/* binding */ EventStreamCallbackHandler),\n/* harmony export */   isStreamEventsHandler: () => (/* binding */ isStreamEventsHandler)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_ai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../messages/ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n/* harmony import */ var _outputs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n\n\n\nfunction assignName({ name, serialized }) {\n    if (name !== undefined) {\n        return name;\n    }\n    if (serialized?.name !== undefined) {\n        return serialized.name;\n    } else if (serialized?.id !== undefined && Array.isArray(serialized?.id)) {\n        return serialized.id[serialized.id.length - 1];\n    }\n    return \"Unnamed\";\n}\nconst isStreamEventsHandler = (handler)=>handler.name === \"event_stream_tracer\";\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class EventStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"runInfoMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"tappedPromises\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"event_stream_tracer\"\n        });\n        Object.defineProperty(this, \"lc_prefer_streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.runType);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.runType);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, outputStream) {\n        const firstChunk = await outputStream.next();\n        if (firstChunk.done) {\n            return;\n        }\n        const runInfo = this.runInfoMap.get(runId);\n        // Run has finished, don't issue any stream events.\n        // An example of this is for runnables that use the default\n        // implementation of .stream(), which delegates to .invoke()\n        // and calls .onChainEnd() before passing it to the iterator.\n        if (runInfo === undefined) {\n            yield firstChunk.value;\n            return;\n        }\n        // Match format from handlers below\n        function _formatOutputChunk(eventType, data) {\n            if (eventType === \"llm\" && typeof data === \"string\") {\n                return new _outputs_js__WEBPACK_IMPORTED_MODULE_3__.GenerationChunk({\n                    text: data\n                });\n            }\n            return data;\n        }\n        let tappedPromise = this.tappedPromises.get(runId);\n        // if we are the first to tap, issue stream events\n        if (tappedPromise === undefined) {\n            let tappedPromiseResolver;\n            tappedPromise = new Promise((resolve)=>{\n                tappedPromiseResolver = resolve;\n            });\n            this.tappedPromises.set(runId, tappedPromise);\n            try {\n                const event = {\n                    event: `on_${runInfo.runType}_stream`,\n                    run_id: runId,\n                    name: runInfo.name,\n                    tags: runInfo.tags,\n                    metadata: runInfo.metadata,\n                    data: {}\n                };\n                await this.send({\n                    ...event,\n                    data: {\n                        chunk: _formatOutputChunk(runInfo.runType, firstChunk.value)\n                    }\n                }, runInfo);\n                yield firstChunk.value;\n                for await (const chunk of outputStream){\n                    // Don't yield tool and retriever stream events\n                    if (runInfo.runType !== \"tool\" && runInfo.runType !== \"retriever\") {\n                        await this.send({\n                            ...event,\n                            data: {\n                                chunk: _formatOutputChunk(runInfo.runType, chunk)\n                            }\n                        }, runInfo);\n                    }\n                    yield chunk;\n                }\n            } finally{\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                tappedPromiseResolver();\n            // Don't delete from the promises map to keep track of which runs have been tapped.\n            }\n        } else {\n            // otherwise just pass through\n            yield firstChunk.value;\n            for await (const chunk of outputStream){\n                yield chunk;\n            }\n        }\n    }\n    async send(payload, run) {\n        if (this._includeRun(run)) {\n            await this.writer.write(payload);\n        }\n    }\n    async sendEndEvent(payload, run) {\n        const tappedPromise = this.tappedPromises.get(payload.run_id);\n        if (tappedPromise !== undefined) {\n            void tappedPromise.then(()=>{\n                void this.send(payload, run);\n            });\n        } else {\n            await this.send(payload, run);\n        }\n    }\n    async onLLMStart(run) {\n        const runName = assignName(run);\n        const runType = run.inputs.messages !== undefined ? \"chat_model\" : \"llm\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType,\n            inputs: run.inputs\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        const eventName = `on_${runType}_start`;\n        await this.send({\n            event: eventName,\n            data: {\n                input: run.inputs\n            },\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onLLMNewToken(run, token, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    kwargs) {\n        const runInfo = this.runInfoMap.get(run.id);\n        let chunk;\n        let eventName;\n        if (runInfo === undefined) {\n            throw new Error(`onLLMNewToken: Run ID ${run.id} not found in run map.`);\n        }\n        // Top-level streaming events are covered by tapOutputIterable\n        if (this.runInfoMap.size === 1) {\n            return;\n        }\n        if (runInfo.runType === \"chat_model\") {\n            eventName = \"on_chat_model_stream\";\n            if (kwargs?.chunk === undefined) {\n                chunk = new _messages_ai_js__WEBPACK_IMPORTED_MODULE_2__.AIMessageChunk({\n                    content: token,\n                    id: `run-${run.id}`\n                });\n            } else {\n                chunk = kwargs.chunk.message;\n            }\n        } else if (runInfo.runType === \"llm\") {\n            eventName = \"on_llm_stream\";\n            if (kwargs?.chunk === undefined) {\n                chunk = new _outputs_js__WEBPACK_IMPORTED_MODULE_3__.GenerationChunk({\n                    text: token\n                });\n            } else {\n                chunk = kwargs.chunk;\n            }\n        } else {\n            throw new Error(`Unexpected run type ${runInfo.runType}`);\n        }\n        await this.send({\n            event: eventName,\n            data: {\n                chunk\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    async onLLMEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        let eventName;\n        if (runInfo === undefined) {\n            throw new Error(`onLLMEnd: Run ID ${run.id} not found in run map.`);\n        }\n        const generations = run.outputs?.generations;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let output;\n        if (runInfo.runType === \"chat_model\") {\n            for (const generation of generations ?? []){\n                if (output !== undefined) {\n                    break;\n                }\n                output = generation[0]?.message;\n            }\n            eventName = \"on_chat_model_end\";\n        } else if (runInfo.runType === \"llm\") {\n            output = {\n                generations: generations?.map((generation)=>{\n                    return generation.map((chunk)=>{\n                        return {\n                            text: chunk.text,\n                            generationInfo: chunk.generationInfo\n                        };\n                    });\n                }),\n                llmOutput: run.outputs?.llmOutput ?? {}\n            };\n            eventName = \"on_llm_end\";\n        } else {\n            throw new Error(`onLLMEnd: Unexpected run type: ${runInfo.runType}`);\n        }\n        await this.sendEndEvent({\n            event: eventName,\n            data: {\n                output,\n                input: runInfo.inputs\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    async onChainStart(run) {\n        const runName = assignName(run);\n        const runType = run.run_type ?? \"chain\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType: run.run_type\n        };\n        let eventData = {};\n        // Workaround Runnable core code not sending input when transform streaming.\n        if (run.inputs.input === \"\" && Object.keys(run.inputs).length === 1) {\n            eventData = {};\n            runInfo.inputs = {};\n        } else if (run.inputs.input !== undefined) {\n            eventData.input = run.inputs.input;\n            runInfo.inputs = run.inputs.input;\n        } else {\n            eventData.input = run.inputs;\n            runInfo.inputs = run.inputs;\n        }\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: `on_${runType}_start`,\n            data: eventData,\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onChainEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onChainEnd: Run ID ${run.id} not found in run map.`);\n        }\n        const eventName = `on_${run.run_type}_end`;\n        const inputs = run.inputs ?? runInfo.inputs ?? {};\n        const outputs = run.outputs?.output ?? run.outputs;\n        const data = {\n            output: outputs,\n            input: inputs\n        };\n        if (inputs.input && Object.keys(inputs).length === 1) {\n            data.input = inputs.input;\n            runInfo.inputs = inputs.input;\n        }\n        await this.sendEndEvent({\n            event: eventName,\n            data,\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata ?? {}\n        }, runInfo);\n    }\n    async onToolStart(run) {\n        const runName = assignName(run);\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType: \"tool\",\n            inputs: run.inputs ?? {}\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: \"on_tool_start\",\n            data: {\n                input: run.inputs ?? {}\n            },\n            name: runName,\n            run_id: run.id,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onToolEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onToolEnd: Run ID ${run.id} not found in run map.`);\n        }\n        if (runInfo.inputs === undefined) {\n            throw new Error(`onToolEnd: Run ID ${run.id} is a tool call, and is expected to have traced inputs.`);\n        }\n        const output = run.outputs?.output === undefined ? run.outputs : run.outputs.output;\n        await this.sendEndEvent({\n            event: \"on_tool_end\",\n            data: {\n                output,\n                input: runInfo.inputs\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    async onRetrieverStart(run) {\n        const runName = assignName(run);\n        const runType = \"retriever\";\n        const runInfo = {\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            name: runName,\n            runType,\n            inputs: {\n                query: run.inputs.query\n            }\n        };\n        this.runInfoMap.set(run.id, runInfo);\n        await this.send({\n            event: \"on_retriever_start\",\n            data: {\n                input: {\n                    query: run.inputs.query\n                }\n            },\n            name: runName,\n            tags: run.tags ?? [],\n            run_id: run.id,\n            metadata: run.extra?.metadata ?? {}\n        }, runInfo);\n    }\n    async onRetrieverEnd(run) {\n        const runInfo = this.runInfoMap.get(run.id);\n        this.runInfoMap.delete(run.id);\n        if (runInfo === undefined) {\n            throw new Error(`onRetrieverEnd: Run ID ${run.id} not found in run map.`);\n        }\n        await this.sendEndEvent({\n            event: \"on_retriever_end\",\n            data: {\n                output: run.outputs?.documents ?? run.outputs,\n                input: runInfo.inputs\n            },\n            run_id: run.id,\n            name: runInfo.name,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata\n        }, runInfo);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async handleCustomEvent(eventName, data, runId) {\n        const runInfo = this.runInfoMap.get(runId);\n        if (runInfo === undefined) {\n            throw new Error(`handleCustomEvent: Run ID ${runId} not found in run map.`);\n        }\n        await this.send({\n            event: \"on_custom_event\",\n            run_id: runId,\n            name: eventName,\n            tags: runInfo.tags,\n            metadata: runInfo.metadata,\n            data\n        }, runInfo);\n    }\n    async finish() {\n        const pendingPromises = [\n            ...this.tappedPromises.values()\n        ];\n        void Promise.all(pendingPromises).finally(()=>{\n            void this.writer.close();\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/event_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/log_stream.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogStreamCallbackHandler: () => (/* binding */ LogStreamCallbackHandler),\n/* harmony export */   RunLog: () => (/* binding */ RunLog),\n/* harmony export */   RunLogPatch: () => (/* binding */ RunLogPatch),\n/* harmony export */   isLogStreamHandler: () => (/* binding */ isLogStreamHandler)\n/* harmony export */ });\n/* harmony import */ var _utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\");\n/* harmony import */ var _messages_ai_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../messages/ai.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/ai.js\");\n\n\n\n\n/**\n * List of jsonpatch JSONPatchOperations, which describe how to create the run state\n * from an empty dict. This is the minimal representation of the log, designed to\n * be serialized as JSON and sent over the wire to reconstruct the log on the other\n * side. Reconstruction of the state can be done with any jsonpatch-compliant library,\n * see https://jsonpatch.com for more information.\n */ class RunLogPatch {\n    constructor(fields){\n        Object.defineProperty(this, \"ops\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.ops = fields.ops ?? [];\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nclass RunLog extends RunLogPatch {\n    constructor(fields){\n        super(fields);\n        Object.defineProperty(this, \"state\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.state = fields.state;\n    }\n    concat(other) {\n        const ops = this.ops.concat(other.ops);\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)(this.state, other.ops);\n        return new RunLog({\n            ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n    static fromRunLogPatch(patch) {\n        const states = (0,_utils_fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch)({}, patch.ops);\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        return new RunLog({\n            ops: patch.ops,\n            state: states[states.length - 1].newDocument\n        });\n    }\n}\nconst isLogStreamHandler = (handler)=>handler.name === \"log_stream_tracer\";\n/**\n * Extract standardized inputs from a run.\n *\n * Standardizes the inputs based on the type of the runnable used.\n *\n * @param run - Run object\n * @param schemaFormat - The schema format to use.\n *\n * @returns Valid inputs are only dict. By conventions, inputs always represented\n * invocation using named arguments.\n * A null means that the input is not yet known!\n */ async function _getStandardizedInputs(run, schemaFormat) {\n    if (schemaFormat === \"original\") {\n        throw new Error(\"Do not assign inputs with original schema drop the key for now. \" + \"When inputs are added to streamLog they should be added with \" + \"standardized schema for streaming events.\");\n    }\n    const { inputs } = run;\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return inputs;\n    }\n    if (Object.keys(inputs).length === 1 && inputs?.input === \"\") {\n        return undefined;\n    }\n    // new style chains\n    // These nest an additional 'input' key inside the 'inputs' to make sure\n    // the input is always a dict. We need to unpack and user the inner value.\n    // We should try to fix this in Runnables and callbacks/tracers\n    // Runnables should be using a null type here not a placeholder\n    // dict.\n    return inputs.input;\n}\nasync function _getStandardizedOutputs(run, schemaFormat) {\n    const { outputs } = run;\n    if (schemaFormat === \"original\") {\n        // Return the old schema, without standardizing anything\n        return outputs;\n    }\n    if ([\n        \"retriever\",\n        \"llm\",\n        \"prompt\"\n    ].includes(run.run_type)) {\n        return outputs;\n    }\n    // TODO: Remove this hacky check\n    if (outputs !== undefined && Object.keys(outputs).length === 1 && outputs?.output !== undefined) {\n        return outputs.output;\n    }\n    return outputs;\n}\nfunction isChatGenerationChunk(x) {\n    return x !== undefined && x.message !== undefined;\n}\n/**\n * Class that extends the `BaseTracer` class from the\n * `langchain.callbacks.tracers.base` module. It represents a callback\n * handler that logs the execution of runs and emits `RunLog` instances to a\n * `RunLogStream`.\n */ class LogStreamCallbackHandler extends _base_js__WEBPACK_IMPORTED_MODULE_1__.BaseTracer {\n    constructor(fields){\n        super({\n            _awaitHandler: true,\n            ...fields\n        });\n        Object.defineProperty(this, \"autoClose\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"includeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"includeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeNames\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTypes\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"excludeTags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_schemaFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"original\"\n        });\n        Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"keyMapByRunId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"counterMapByRunName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"transformStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"writer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"receiveStream\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"log_stream_tracer\"\n        });\n        Object.defineProperty(this, \"lc_prefer_streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.autoClose = fields?.autoClose ?? true;\n        this.includeNames = fields?.includeNames;\n        this.includeTypes = fields?.includeTypes;\n        this.includeTags = fields?.includeTags;\n        this.excludeNames = fields?.excludeNames;\n        this.excludeTypes = fields?.excludeTypes;\n        this.excludeTags = fields?.excludeTags;\n        this._schemaFormat = fields?._schemaFormat ?? this._schemaFormat;\n        this.transformStream = new TransformStream();\n        this.writer = this.transformStream.writable.getWriter();\n        this.receiveStream = _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.IterableReadableStream.fromReadableStream(this.transformStream.readable);\n    }\n    [Symbol.asyncIterator]() {\n        return this.receiveStream;\n    }\n    async persistRun(_run) {\n    // This is a legacy method only called once for an entire run tree\n    // and is therefore not useful here\n    }\n    _includeRun(run) {\n        if (run.id === this.rootId) {\n            return false;\n        }\n        const runTags = run.tags ?? [];\n        let include = this.includeNames === undefined && this.includeTags === undefined && this.includeTypes === undefined;\n        if (this.includeNames !== undefined) {\n            include = include || this.includeNames.includes(run.name);\n        }\n        if (this.includeTypes !== undefined) {\n            include = include || this.includeTypes.includes(run.run_type);\n        }\n        if (this.includeTags !== undefined) {\n            include = include || runTags.find((tag)=>this.includeTags?.includes(tag)) !== undefined;\n        }\n        if (this.excludeNames !== undefined) {\n            include = include && !this.excludeNames.includes(run.name);\n        }\n        if (this.excludeTypes !== undefined) {\n            include = include && !this.excludeTypes.includes(run.run_type);\n        }\n        if (this.excludeTags !== undefined) {\n            include = include && runTags.every((tag)=>!this.excludeTags?.includes(tag));\n        }\n        return include;\n    }\n    async *tapOutputIterable(runId, output) {\n        // Tap an output async iterator to stream its values to the log.\n        for await (const chunk of output){\n            // root run is handled in .streamLog()\n            if (runId !== this.rootId) {\n                // if we can't find the run silently ignore\n                // eg. because this run wasn't included in the log\n                const key = this.keyMapByRunId[runId];\n                if (key) {\n                    await this.writer.write(new RunLogPatch({\n                        ops: [\n                            {\n                                op: \"add\",\n                                path: `/logs/${key}/streamed_output/-`,\n                                value: chunk\n                            }\n                        ]\n                    }));\n                }\n            }\n            yield chunk;\n        }\n    }\n    async onRunCreate(run) {\n        if (this.rootId === undefined) {\n            this.rootId = run.id;\n            await this.writer.write(new RunLogPatch({\n                ops: [\n                    {\n                        op: \"replace\",\n                        path: \"\",\n                        value: {\n                            id: run.id,\n                            name: run.name,\n                            type: run.run_type,\n                            streamed_output: [],\n                            final_output: undefined,\n                            logs: {}\n                        }\n                    }\n                ]\n            }));\n        }\n        if (!this._includeRun(run)) {\n            return;\n        }\n        if (this.counterMapByRunName[run.name] === undefined) {\n            this.counterMapByRunName[run.name] = 0;\n        }\n        this.counterMapByRunName[run.name] += 1;\n        const count = this.counterMapByRunName[run.name];\n        this.keyMapByRunId[run.id] = count === 1 ? run.name : `${run.name}:${count}`;\n        const logEntry = {\n            id: run.id,\n            name: run.name,\n            type: run.run_type,\n            tags: run.tags ?? [],\n            metadata: run.extra?.metadata ?? {},\n            start_time: new Date(run.start_time).toISOString(),\n            streamed_output: [],\n            streamed_output_str: [],\n            final_output: undefined,\n            end_time: undefined\n        };\n        if (this._schemaFormat === \"streaming_events\") {\n            logEntry.inputs = await _getStandardizedInputs(run, this._schemaFormat);\n        }\n        await this.writer.write(new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${this.keyMapByRunId[run.id]}`,\n                    value: logEntry\n                }\n            ]\n        }));\n    }\n    async onRunUpdate(run) {\n        try {\n            const runName = this.keyMapByRunId[run.id];\n            if (runName === undefined) {\n                return;\n            }\n            const ops = [];\n            if (this._schemaFormat === \"streaming_events\") {\n                ops.push({\n                    op: \"replace\",\n                    path: `/logs/${runName}/inputs`,\n                    value: await _getStandardizedInputs(run, this._schemaFormat)\n                });\n            }\n            ops.push({\n                op: \"add\",\n                path: `/logs/${runName}/final_output`,\n                value: await _getStandardizedOutputs(run, this._schemaFormat)\n            });\n            if (run.end_time !== undefined) {\n                ops.push({\n                    op: \"add\",\n                    path: `/logs/${runName}/end_time`,\n                    value: new Date(run.end_time).toISOString()\n                });\n            }\n            const patch = new RunLogPatch({\n                ops\n            });\n            await this.writer.write(patch);\n        } finally{\n            if (run.id === this.rootId) {\n                const patch = new RunLogPatch({\n                    ops: [\n                        {\n                            op: \"replace\",\n                            path: \"/final_output\",\n                            value: await _getStandardizedOutputs(run, this._schemaFormat)\n                        }\n                    ]\n                });\n                await this.writer.write(patch);\n                if (this.autoClose) {\n                    await this.writer.close();\n                }\n            }\n        }\n    }\n    async onLLMNewToken(run, token, kwargs) {\n        const runName = this.keyMapByRunId[run.id];\n        if (runName === undefined) {\n            return;\n        }\n        // TODO: Remove hack\n        const isChatModel = run.inputs.messages !== undefined;\n        let streamedOutputValue;\n        if (isChatModel) {\n            if (isChatGenerationChunk(kwargs?.chunk)) {\n                streamedOutputValue = kwargs?.chunk;\n            } else {\n                streamedOutputValue = new _messages_ai_js__WEBPACK_IMPORTED_MODULE_3__.AIMessageChunk({\n                    id: `run-${run.id}`,\n                    content: token\n                });\n            }\n        } else {\n            streamedOutputValue = token;\n        }\n        const patch = new RunLogPatch({\n            ops: [\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output_str/-`,\n                    value: token\n                },\n                {\n                    op: \"add\",\n                    path: `/logs/${runName}/streamed_output/-`,\n                    value: streamedOutputValue\n                }\n            ]\n        });\n        await this.writer.write(patch);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9sb2dfc3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQWdFO0FBQ3pCO0FBQ3FCO0FBQ1Q7QUFDbkQ7Ozs7OztDQU1DLEdBQ00sTUFBTUk7SUFDVEMsWUFBWUMsTUFBTSxDQUFFO1FBQ2hCQyxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLE9BQU87WUFDL0JDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0MsR0FBRyxHQUFHUCxPQUFPTyxHQUFHLElBQUksRUFBRTtJQUMvQjtJQUNBQyxPQUFPQyxLQUFLLEVBQUU7UUFDVixNQUFNRixNQUFNLElBQUksQ0FBQ0EsR0FBRyxDQUFDQyxNQUFNLENBQUNDLE1BQU1GLEdBQUc7UUFDckMsTUFBTUcsU0FBU2hCLDJFQUFVQSxDQUFDLENBQUMsR0FBR2E7UUFDOUIsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSUksT0FBTztZQUNkSjtZQUNBSyxPQUFPRixNQUFNLENBQUNBLE9BQU9HLE1BQU0sR0FBRyxFQUFFLENBQUNDLFdBQVc7UUFDaEQ7SUFDSjtBQUNKO0FBQ08sTUFBTUgsZUFBZWI7SUFDeEJDLFlBQVlDLE1BQU0sQ0FBRTtRQUNoQixLQUFLLENBQUNBO1FBQ05DLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUztZQUNqQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDTSxLQUFLLEdBQUdaLE9BQU9ZLEtBQUs7SUFDN0I7SUFDQUosT0FBT0MsS0FBSyxFQUFFO1FBQ1YsTUFBTUYsTUFBTSxJQUFJLENBQUNBLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDQyxNQUFNRixHQUFHO1FBQ3JDLE1BQU1HLFNBQVNoQiwyRUFBVUEsQ0FBQyxJQUFJLENBQUNrQixLQUFLLEVBQUVILE1BQU1GLEdBQUc7UUFDL0MsT0FBTyxJQUFJSSxPQUFPO1lBQUVKO1lBQUtLLE9BQU9GLE1BQU0sQ0FBQ0EsT0FBT0csTUFBTSxHQUFHLEVBQUUsQ0FBQ0MsV0FBVztRQUFDO0lBQzFFO0lBQ0EsT0FBT0MsZ0JBQWdCQyxLQUFLLEVBQUU7UUFDMUIsTUFBTU4sU0FBU2hCLDJFQUFVQSxDQUFDLENBQUMsR0FBR3NCLE1BQU1ULEdBQUc7UUFDdkMsbUVBQW1FO1FBQ25FLE9BQU8sSUFBSUksT0FBTztZQUNkSixLQUFLUyxNQUFNVCxHQUFHO1lBQ2RLLE9BQU9GLE1BQU0sQ0FBQ0EsT0FBT0csTUFBTSxHQUFHLEVBQUUsQ0FBQ0MsV0FBVztRQUNoRDtJQUNKO0FBQ0o7QUFDTyxNQUFNRyxxQkFBcUIsQ0FBQ0MsVUFBWUEsUUFBUUMsSUFBSSxLQUFLLG9CQUFvQjtBQUNwRjs7Ozs7Ozs7Ozs7Q0FXQyxHQUNELGVBQWVDLHVCQUF1QkMsR0FBRyxFQUFFQyxZQUFZO0lBQ25ELElBQUlBLGlCQUFpQixZQUFZO1FBQzdCLE1BQU0sSUFBSUMsTUFBTSxxRUFDWixrRUFDQTtJQUNSO0lBQ0EsTUFBTSxFQUFFQyxNQUFNLEVBQUUsR0FBR0g7SUFDbkIsSUFBSTtRQUFDO1FBQWE7UUFBTztLQUFTLENBQUNJLFFBQVEsQ0FBQ0osSUFBSUssUUFBUSxHQUFHO1FBQ3ZELE9BQU9GO0lBQ1g7SUFDQSxJQUFJdkIsT0FBTzBCLElBQUksQ0FBQ0gsUUFBUVgsTUFBTSxLQUFLLEtBQUtXLFFBQVFJLFVBQVUsSUFBSTtRQUMxRCxPQUFPQztJQUNYO0lBQ0EsbUJBQW1CO0lBQ25CLHdFQUF3RTtJQUN4RSwwRUFBMEU7SUFDMUUsK0RBQStEO0lBQy9ELCtEQUErRDtJQUMvRCxRQUFRO0lBQ1IsT0FBT0wsT0FBT0ksS0FBSztBQUN2QjtBQUNBLGVBQWVFLHdCQUF3QlQsR0FBRyxFQUFFQyxZQUFZO0lBQ3BELE1BQU0sRUFBRVMsT0FBTyxFQUFFLEdBQUdWO0lBQ3BCLElBQUlDLGlCQUFpQixZQUFZO1FBQzdCLHdEQUF3RDtRQUN4RCxPQUFPUztJQUNYO0lBQ0EsSUFBSTtRQUFDO1FBQWE7UUFBTztLQUFTLENBQUNOLFFBQVEsQ0FBQ0osSUFBSUssUUFBUSxHQUFHO1FBQ3ZELE9BQU9LO0lBQ1g7SUFDQSxnQ0FBZ0M7SUFDaEMsSUFBSUEsWUFBWUYsYUFDWjVCLE9BQU8wQixJQUFJLENBQUNJLFNBQVNsQixNQUFNLEtBQUssS0FDaENrQixTQUFTQyxXQUFXSCxXQUFXO1FBQy9CLE9BQU9FLFFBQVFDLE1BQU07SUFDekI7SUFDQSxPQUFPRDtBQUNYO0FBQ0EsU0FBU0Usc0JBQXNCQyxDQUFDO0lBQzVCLE9BQU9BLE1BQU1MLGFBQWFLLEVBQUVDLE9BQU8sS0FBS047QUFDNUM7QUFDQTs7Ozs7Q0FLQyxHQUNNLE1BQU1PLGlDQUFpQ3pDLGdEQUFVQTtJQUNwREksWUFBWUMsTUFBTSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUFFcUMsZUFBZTtZQUFNLEdBQUdyQyxNQUFNO1FBQUM7UUFDdkNDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxnQkFBZ0I7WUFDeENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGVBQWU7WUFDdkNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGdCQUFnQjtZQUN4Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCO1lBQ3hDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxlQUFlO1lBQ3ZDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUI7WUFDekNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGlCQUFpQjtZQUN6Q0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxDQUFDO1FBQ1o7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSx1QkFBdUI7WUFDL0NDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sQ0FBQztRQUNaO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CO1lBQzNDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVO1lBQ2xDQyxZQUFZO1lBQ1pDLGNBQWM7WUFDZEMsVUFBVTtZQUNWQyxPQUFPLEtBQUs7UUFDaEI7UUFDQUwsT0FBT0MsY0FBYyxDQUFDLElBQUksRUFBRSxpQkFBaUI7WUFDekNDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVE7WUFDaENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU87UUFDWDtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLHVCQUF1QjtZQUMvQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsSUFBSSxDQUFDZ0MsU0FBUyxHQUFHdEMsUUFBUXNDLGFBQWE7UUFDdEMsSUFBSSxDQUFDQyxZQUFZLEdBQUd2QyxRQUFRdUM7UUFDNUIsSUFBSSxDQUFDQyxZQUFZLEdBQUd4QyxRQUFRd0M7UUFDNUIsSUFBSSxDQUFDQyxXQUFXLEdBQUd6QyxRQUFReUM7UUFDM0IsSUFBSSxDQUFDQyxZQUFZLEdBQUcxQyxRQUFRMEM7UUFDNUIsSUFBSSxDQUFDQyxZQUFZLEdBQUczQyxRQUFRMkM7UUFDNUIsSUFBSSxDQUFDQyxXQUFXLEdBQUc1QyxRQUFRNEM7UUFDM0IsSUFBSSxDQUFDQyxhQUFhLEdBQUc3QyxRQUFRNkMsaUJBQWlCLElBQUksQ0FBQ0EsYUFBYTtRQUNoRSxJQUFJLENBQUNDLGVBQWUsR0FBRyxJQUFJQztRQUMzQixJQUFJLENBQUNDLE1BQU0sR0FBRyxJQUFJLENBQUNGLGVBQWUsQ0FBQ3pDLFFBQVEsQ0FBQzRDLFNBQVM7UUFDckQsSUFBSSxDQUFDQyxhQUFhLEdBQUd0RCxvRUFBc0JBLENBQUN1RCxrQkFBa0IsQ0FBQyxJQUFJLENBQUNMLGVBQWUsQ0FBQ00sUUFBUTtJQUNoRztJQUNBLENBQUNDLE9BQU9DLGFBQWEsQ0FBQyxHQUFHO1FBQ3JCLE9BQU8sSUFBSSxDQUFDSixhQUFhO0lBQzdCO0lBQ0EsTUFBTUssV0FBV0MsSUFBSSxFQUFFO0lBQ25CLGtFQUFrRTtJQUNsRSxtQ0FBbUM7SUFDdkM7SUFDQUMsWUFBWXBDLEdBQUcsRUFBRTtRQUNiLElBQUlBLElBQUlxQyxFQUFFLEtBQUssSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDeEIsT0FBTztRQUNYO1FBQ0EsTUFBTUMsVUFBVXZDLElBQUl3QyxJQUFJLElBQUksRUFBRTtRQUM5QixJQUFJQyxVQUFVLElBQUksQ0FBQ3ZCLFlBQVksS0FBS1YsYUFDaEMsSUFBSSxDQUFDWSxXQUFXLEtBQUtaLGFBQ3JCLElBQUksQ0FBQ1csWUFBWSxLQUFLWDtRQUMxQixJQUFJLElBQUksQ0FBQ1UsWUFBWSxLQUFLVixXQUFXO1lBQ2pDaUMsVUFBVUEsV0FBVyxJQUFJLENBQUN2QixZQUFZLENBQUNkLFFBQVEsQ0FBQ0osSUFBSUYsSUFBSTtRQUM1RDtRQUNBLElBQUksSUFBSSxDQUFDcUIsWUFBWSxLQUFLWCxXQUFXO1lBQ2pDaUMsVUFBVUEsV0FBVyxJQUFJLENBQUN0QixZQUFZLENBQUNmLFFBQVEsQ0FBQ0osSUFBSUssUUFBUTtRQUNoRTtRQUNBLElBQUksSUFBSSxDQUFDZSxXQUFXLEtBQUtaLFdBQVc7WUFDaENpQyxVQUNJQSxXQUNJRixRQUFRRyxJQUFJLENBQUMsQ0FBQ0MsTUFBUSxJQUFJLENBQUN2QixXQUFXLEVBQUVoQixTQUFTdUMsVUFBVW5DO1FBQ3ZFO1FBQ0EsSUFBSSxJQUFJLENBQUNhLFlBQVksS0FBS2IsV0FBVztZQUNqQ2lDLFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNwQixZQUFZLENBQUNqQixRQUFRLENBQUNKLElBQUlGLElBQUk7UUFDN0Q7UUFDQSxJQUFJLElBQUksQ0FBQ3dCLFlBQVksS0FBS2QsV0FBVztZQUNqQ2lDLFVBQVVBLFdBQVcsQ0FBQyxJQUFJLENBQUNuQixZQUFZLENBQUNsQixRQUFRLENBQUNKLElBQUlLLFFBQVE7UUFDakU7UUFDQSxJQUFJLElBQUksQ0FBQ2tCLFdBQVcsS0FBS2YsV0FBVztZQUNoQ2lDLFVBQ0lBLFdBQVdGLFFBQVFLLEtBQUssQ0FBQyxDQUFDRCxNQUFRLENBQUMsSUFBSSxDQUFDcEIsV0FBVyxFQUFFbkIsU0FBU3VDO1FBQ3RFO1FBQ0EsT0FBT0Y7SUFDWDtJQUNBLE9BQU9JLGtCQUFrQkMsS0FBSyxFQUFFbkMsTUFBTSxFQUFFO1FBQ3BDLGdFQUFnRTtRQUNoRSxXQUFXLE1BQU1vQyxTQUFTcEMsT0FBUTtZQUM5QixzQ0FBc0M7WUFDdEMsSUFBSW1DLFVBQVUsSUFBSSxDQUFDUixNQUFNLEVBQUU7Z0JBQ3ZCLDJDQUEyQztnQkFDM0Msa0RBQWtEO2dCQUNsRCxNQUFNVSxNQUFNLElBQUksQ0FBQ0MsYUFBYSxDQUFDSCxNQUFNO2dCQUNyQyxJQUFJRSxLQUFLO29CQUNMLE1BQU0sSUFBSSxDQUFDckIsTUFBTSxDQUFDdUIsS0FBSyxDQUFDLElBQUl6RSxZQUFZO3dCQUNwQ1MsS0FBSzs0QkFDRDtnQ0FDSWlFLElBQUk7Z0NBQ0pDLE1BQU0sQ0FBQyxNQUFNLEVBQUVKLElBQUksa0JBQWtCLENBQUM7Z0NBQ3RDL0QsT0FBTzhEOzRCQUNYO3lCQUNIO29CQUNMO2dCQUNKO1lBQ0o7WUFDQSxNQUFNQTtRQUNWO0lBQ0o7SUFDQSxNQUFNTSxZQUFZckQsR0FBRyxFQUFFO1FBQ25CLElBQUksSUFBSSxDQUFDc0MsTUFBTSxLQUFLOUIsV0FBVztZQUMzQixJQUFJLENBQUM4QixNQUFNLEdBQUd0QyxJQUFJcUMsRUFBRTtZQUNwQixNQUFNLElBQUksQ0FBQ1YsTUFBTSxDQUFDdUIsS0FBSyxDQUFDLElBQUl6RSxZQUFZO2dCQUNwQ1MsS0FBSztvQkFDRDt3QkFDSWlFLElBQUk7d0JBQ0pDLE1BQU07d0JBQ05uRSxPQUFPOzRCQUNIb0QsSUFBSXJDLElBQUlxQyxFQUFFOzRCQUNWdkMsTUFBTUUsSUFBSUYsSUFBSTs0QkFDZHdELE1BQU10RCxJQUFJSyxRQUFROzRCQUNsQmtELGlCQUFpQixFQUFFOzRCQUNuQkMsY0FBY2hEOzRCQUNkaUQsTUFBTSxDQUFDO3dCQUNYO29CQUNKO2lCQUNIO1lBQ0w7UUFDSjtRQUNBLElBQUksQ0FBQyxJQUFJLENBQUNyQixXQUFXLENBQUNwQyxNQUFNO1lBQ3hCO1FBQ0o7UUFDQSxJQUFJLElBQUksQ0FBQzBELG1CQUFtQixDQUFDMUQsSUFBSUYsSUFBSSxDQUFDLEtBQUtVLFdBQVc7WUFDbEQsSUFBSSxDQUFDa0QsbUJBQW1CLENBQUMxRCxJQUFJRixJQUFJLENBQUMsR0FBRztRQUN6QztRQUNBLElBQUksQ0FBQzRELG1CQUFtQixDQUFDMUQsSUFBSUYsSUFBSSxDQUFDLElBQUk7UUFDdEMsTUFBTTZELFFBQVEsSUFBSSxDQUFDRCxtQkFBbUIsQ0FBQzFELElBQUlGLElBQUksQ0FBQztRQUNoRCxJQUFJLENBQUNtRCxhQUFhLENBQUNqRCxJQUFJcUMsRUFBRSxDQUFDLEdBQ3RCc0IsVUFBVSxJQUFJM0QsSUFBSUYsSUFBSSxHQUFHLENBQUMsRUFBRUUsSUFBSUYsSUFBSSxDQUFDLENBQUMsRUFBRTZELE1BQU0sQ0FBQztRQUNuRCxNQUFNQyxXQUFXO1lBQ2J2QixJQUFJckMsSUFBSXFDLEVBQUU7WUFDVnZDLE1BQU1FLElBQUlGLElBQUk7WUFDZHdELE1BQU10RCxJQUFJSyxRQUFRO1lBQ2xCbUMsTUFBTXhDLElBQUl3QyxJQUFJLElBQUksRUFBRTtZQUNwQnFCLFVBQVU3RCxJQUFJOEQsS0FBSyxFQUFFRCxZQUFZLENBQUM7WUFDbENFLFlBQVksSUFBSUMsS0FBS2hFLElBQUkrRCxVQUFVLEVBQUVFLFdBQVc7WUFDaERWLGlCQUFpQixFQUFFO1lBQ25CVyxxQkFBcUIsRUFBRTtZQUN2QlYsY0FBY2hEO1lBQ2QyRCxVQUFVM0Q7UUFDZDtRQUNBLElBQUksSUFBSSxDQUFDZ0IsYUFBYSxLQUFLLG9CQUFvQjtZQUMzQ29DLFNBQVN6RCxNQUFNLEdBQUcsTUFBTUosdUJBQXVCQyxLQUFLLElBQUksQ0FBQ3dCLGFBQWE7UUFDMUU7UUFDQSxNQUFNLElBQUksQ0FBQ0csTUFBTSxDQUFDdUIsS0FBSyxDQUFDLElBQUl6RSxZQUFZO1lBQ3BDUyxLQUFLO2dCQUNEO29CQUNJaUUsSUFBSTtvQkFDSkMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUNILGFBQWEsQ0FBQ2pELElBQUlxQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMzQ3BELE9BQU8yRTtnQkFDWDthQUNIO1FBQ0w7SUFDSjtJQUNBLE1BQU1RLFlBQVlwRSxHQUFHLEVBQUU7UUFDbkIsSUFBSTtZQUNBLE1BQU1xRSxVQUFVLElBQUksQ0FBQ3BCLGFBQWEsQ0FBQ2pELElBQUlxQyxFQUFFLENBQUM7WUFDMUMsSUFBSWdDLFlBQVk3RCxXQUFXO2dCQUN2QjtZQUNKO1lBQ0EsTUFBTXRCLE1BQU0sRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDc0MsYUFBYSxLQUFLLG9CQUFvQjtnQkFDM0N0QyxJQUFJb0YsSUFBSSxDQUFDO29CQUNMbkIsSUFBSTtvQkFDSkMsTUFBTSxDQUFDLE1BQU0sRUFBRWlCLFFBQVEsT0FBTyxDQUFDO29CQUMvQnBGLE9BQU8sTUFBTWMsdUJBQXVCQyxLQUFLLElBQUksQ0FBQ3dCLGFBQWE7Z0JBQy9EO1lBQ0o7WUFDQXRDLElBQUlvRixJQUFJLENBQUM7Z0JBQ0xuQixJQUFJO2dCQUNKQyxNQUFNLENBQUMsTUFBTSxFQUFFaUIsUUFBUSxhQUFhLENBQUM7Z0JBQ3JDcEYsT0FBTyxNQUFNd0Isd0JBQXdCVCxLQUFLLElBQUksQ0FBQ3dCLGFBQWE7WUFDaEU7WUFDQSxJQUFJeEIsSUFBSW1FLFFBQVEsS0FBSzNELFdBQVc7Z0JBQzVCdEIsSUFBSW9GLElBQUksQ0FBQztvQkFDTG5CLElBQUk7b0JBQ0pDLE1BQU0sQ0FBQyxNQUFNLEVBQUVpQixRQUFRLFNBQVMsQ0FBQztvQkFDakNwRixPQUFPLElBQUkrRSxLQUFLaEUsSUFBSW1FLFFBQVEsRUFBRUYsV0FBVztnQkFDN0M7WUFDSjtZQUNBLE1BQU10RSxRQUFRLElBQUlsQixZQUFZO2dCQUFFUztZQUFJO1lBQ3BDLE1BQU0sSUFBSSxDQUFDeUMsTUFBTSxDQUFDdUIsS0FBSyxDQUFDdkQ7UUFDNUIsU0FDUTtZQUNKLElBQUlLLElBQUlxQyxFQUFFLEtBQUssSUFBSSxDQUFDQyxNQUFNLEVBQUU7Z0JBQ3hCLE1BQU0zQyxRQUFRLElBQUlsQixZQUFZO29CQUMxQlMsS0FBSzt3QkFDRDs0QkFDSWlFLElBQUk7NEJBQ0pDLE1BQU07NEJBQ05uRSxPQUFPLE1BQU13Qix3QkFBd0JULEtBQUssSUFBSSxDQUFDd0IsYUFBYTt3QkFDaEU7cUJBQ0g7Z0JBQ0w7Z0JBQ0EsTUFBTSxJQUFJLENBQUNHLE1BQU0sQ0FBQ3VCLEtBQUssQ0FBQ3ZEO2dCQUN4QixJQUFJLElBQUksQ0FBQ3NCLFNBQVMsRUFBRTtvQkFDaEIsTUFBTSxJQUFJLENBQUNVLE1BQU0sQ0FBQzRDLEtBQUs7Z0JBQzNCO1lBQ0o7UUFDSjtJQUNKO0lBQ0EsTUFBTUMsY0FBY3hFLEdBQUcsRUFBRXlFLEtBQUssRUFBRUMsTUFBTSxFQUFFO1FBQ3BDLE1BQU1MLFVBQVUsSUFBSSxDQUFDcEIsYUFBYSxDQUFDakQsSUFBSXFDLEVBQUUsQ0FBQztRQUMxQyxJQUFJZ0MsWUFBWTdELFdBQVc7WUFDdkI7UUFDSjtRQUNBLG9CQUFvQjtRQUNwQixNQUFNbUUsY0FBYzNFLElBQUlHLE1BQU0sQ0FBQ3lFLFFBQVEsS0FBS3BFO1FBQzVDLElBQUlxRTtRQUNKLElBQUlGLGFBQWE7WUFDYixJQUFJL0Qsc0JBQXNCOEQsUUFBUTNCLFFBQVE7Z0JBQ3RDOEIsc0JBQXNCSCxRQUFRM0I7WUFDbEMsT0FDSztnQkFDRDhCLHNCQUFzQixJQUFJckcsMkRBQWNBLENBQUM7b0JBQ3JDNkQsSUFBSSxDQUFDLElBQUksRUFBRXJDLElBQUlxQyxFQUFFLENBQUMsQ0FBQztvQkFDbkJ5QyxTQUFTTDtnQkFDYjtZQUNKO1FBQ0osT0FDSztZQUNESSxzQkFBc0JKO1FBQzFCO1FBQ0EsTUFBTTlFLFFBQVEsSUFBSWxCLFlBQVk7WUFDMUJTLEtBQUs7Z0JBQ0Q7b0JBQ0lpRSxJQUFJO29CQUNKQyxNQUFNLENBQUMsTUFBTSxFQUFFaUIsUUFBUSxzQkFBc0IsQ0FBQztvQkFDOUNwRixPQUFPd0Y7Z0JBQ1g7Z0JBQ0E7b0JBQ0l0QixJQUFJO29CQUNKQyxNQUFNLENBQUMsTUFBTSxFQUFFaUIsUUFBUSxrQkFBa0IsQ0FBQztvQkFDMUNwRixPQUFPNEY7Z0JBQ1g7YUFDSDtRQUNMO1FBQ0EsTUFBTSxJQUFJLENBQUNsRCxNQUFNLENBQUN1QixLQUFLLENBQUN2RDtJQUM1QjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9sb2dfc3RyZWFtLmpzPzI5ZDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBwbHlQYXRjaCwgfSBmcm9tIFwiLi4vdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuaW1wb3J0IHsgSXRlcmFibGVSZWFkYWJsZVN0cmVhbSB9IGZyb20gXCIuLi91dGlscy9zdHJlYW0uanNcIjtcbmltcG9ydCB7IEFJTWVzc2FnZUNodW5rIH0gZnJvbSBcIi4uL21lc3NhZ2VzL2FpLmpzXCI7XG4vKipcbiAqIExpc3Qgb2YganNvbnBhdGNoIEpTT05QYXRjaE9wZXJhdGlvbnMsIHdoaWNoIGRlc2NyaWJlIGhvdyB0byBjcmVhdGUgdGhlIHJ1biBzdGF0ZVxuICogZnJvbSBhbiBlbXB0eSBkaWN0LiBUaGlzIGlzIHRoZSBtaW5pbWFsIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBsb2csIGRlc2lnbmVkIHRvXG4gKiBiZSBzZXJpYWxpemVkIGFzIEpTT04gYW5kIHNlbnQgb3ZlciB0aGUgd2lyZSB0byByZWNvbnN0cnVjdCB0aGUgbG9nIG9uIHRoZSBvdGhlclxuICogc2lkZS4gUmVjb25zdHJ1Y3Rpb24gb2YgdGhlIHN0YXRlIGNhbiBiZSBkb25lIHdpdGggYW55IGpzb25wYXRjaC1jb21wbGlhbnQgbGlicmFyeSxcbiAqIHNlZSBodHRwczovL2pzb25wYXRjaC5jb20gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBSdW5Mb2dQYXRjaCB7XG4gICAgY29uc3RydWN0b3IoZmllbGRzKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9wc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9wcyA9IGZpZWxkcy5vcHMgPz8gW107XG4gICAgfVxuICAgIGNvbmNhdChvdGhlcikge1xuICAgICAgICBjb25zdCBvcHMgPSB0aGlzLm9wcy5jb25jYXQob3RoZXIub3BzKTtcbiAgICAgICAgY29uc3Qgc3RhdGVzID0gYXBwbHlQYXRjaCh7fSwgb3BzKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgICAgICByZXR1cm4gbmV3IFJ1bkxvZyh7XG4gICAgICAgICAgICBvcHMsXG4gICAgICAgICAgICBzdGF0ZTogc3RhdGVzW3N0YXRlcy5sZW5ndGggLSAxXS5uZXdEb2N1bWVudCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFJ1bkxvZyBleHRlbmRzIFJ1bkxvZ1BhdGNoIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoZmllbGRzKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3RhdGVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IGZpZWxkcy5zdGF0ZTtcbiAgICB9XG4gICAgY29uY2F0KG90aGVyKSB7XG4gICAgICAgIGNvbnN0IG9wcyA9IHRoaXMub3BzLmNvbmNhdChvdGhlci5vcHMpO1xuICAgICAgICBjb25zdCBzdGF0ZXMgPSBhcHBseVBhdGNoKHRoaXMuc3RhdGUsIG90aGVyLm9wcyk7XG4gICAgICAgIHJldHVybiBuZXcgUnVuTG9nKHsgb3BzLCBzdGF0ZTogc3RhdGVzW3N0YXRlcy5sZW5ndGggLSAxXS5uZXdEb2N1bWVudCB9KTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21SdW5Mb2dQYXRjaChwYXRjaCkge1xuICAgICAgICBjb25zdCBzdGF0ZXMgPSBhcHBseVBhdGNoKHt9LCBwYXRjaC5vcHMpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIHJldHVybiBuZXcgUnVuTG9nKHtcbiAgICAgICAgICAgIG9wczogcGF0Y2gub3BzLFxuICAgICAgICAgICAgc3RhdGU6IHN0YXRlc1tzdGF0ZXMubGVuZ3RoIC0gMV0ubmV3RG9jdW1lbnQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBpc0xvZ1N0cmVhbUhhbmRsZXIgPSAoaGFuZGxlcikgPT4gaGFuZGxlci5uYW1lID09PSBcImxvZ19zdHJlYW1fdHJhY2VyXCI7XG4vKipcbiAqIEV4dHJhY3Qgc3RhbmRhcmRpemVkIGlucHV0cyBmcm9tIGEgcnVuLlxuICpcbiAqIFN0YW5kYXJkaXplcyB0aGUgaW5wdXRzIGJhc2VkIG9uIHRoZSB0eXBlIG9mIHRoZSBydW5uYWJsZSB1c2VkLlxuICpcbiAqIEBwYXJhbSBydW4gLSBSdW4gb2JqZWN0XG4gKiBAcGFyYW0gc2NoZW1hRm9ybWF0IC0gVGhlIHNjaGVtYSBmb3JtYXQgdG8gdXNlLlxuICpcbiAqIEByZXR1cm5zIFZhbGlkIGlucHV0cyBhcmUgb25seSBkaWN0LiBCeSBjb252ZW50aW9ucywgaW5wdXRzIGFsd2F5cyByZXByZXNlbnRlZFxuICogaW52b2NhdGlvbiB1c2luZyBuYW1lZCBhcmd1bWVudHMuXG4gKiBBIG51bGwgbWVhbnMgdGhhdCB0aGUgaW5wdXQgaXMgbm90IHlldCBrbm93biFcbiAqL1xuYXN5bmMgZnVuY3Rpb24gX2dldFN0YW5kYXJkaXplZElucHV0cyhydW4sIHNjaGVtYUZvcm1hdCkge1xuICAgIGlmIChzY2hlbWFGb3JtYXQgPT09IFwib3JpZ2luYWxcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJEbyBub3QgYXNzaWduIGlucHV0cyB3aXRoIG9yaWdpbmFsIHNjaGVtYSBkcm9wIHRoZSBrZXkgZm9yIG5vdy4gXCIgK1xuICAgICAgICAgICAgXCJXaGVuIGlucHV0cyBhcmUgYWRkZWQgdG8gc3RyZWFtTG9nIHRoZXkgc2hvdWxkIGJlIGFkZGVkIHdpdGggXCIgK1xuICAgICAgICAgICAgXCJzdGFuZGFyZGl6ZWQgc2NoZW1hIGZvciBzdHJlYW1pbmcgZXZlbnRzLlwiKTtcbiAgICB9XG4gICAgY29uc3QgeyBpbnB1dHMgfSA9IHJ1bjtcbiAgICBpZiAoW1wicmV0cmlldmVyXCIsIFwibGxtXCIsIFwicHJvbXB0XCJdLmluY2x1ZGVzKHJ1bi5ydW5fdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0cztcbiAgICB9XG4gICAgaWYgKE9iamVjdC5rZXlzKGlucHV0cykubGVuZ3RoID09PSAxICYmIGlucHV0cz8uaW5wdXQgPT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gbmV3IHN0eWxlIGNoYWluc1xuICAgIC8vIFRoZXNlIG5lc3QgYW4gYWRkaXRpb25hbCAnaW5wdXQnIGtleSBpbnNpZGUgdGhlICdpbnB1dHMnIHRvIG1ha2Ugc3VyZVxuICAgIC8vIHRoZSBpbnB1dCBpcyBhbHdheXMgYSBkaWN0LiBXZSBuZWVkIHRvIHVucGFjayBhbmQgdXNlciB0aGUgaW5uZXIgdmFsdWUuXG4gICAgLy8gV2Ugc2hvdWxkIHRyeSB0byBmaXggdGhpcyBpbiBSdW5uYWJsZXMgYW5kIGNhbGxiYWNrcy90cmFjZXJzXG4gICAgLy8gUnVubmFibGVzIHNob3VsZCBiZSB1c2luZyBhIG51bGwgdHlwZSBoZXJlIG5vdCBhIHBsYWNlaG9sZGVyXG4gICAgLy8gZGljdC5cbiAgICByZXR1cm4gaW5wdXRzLmlucHV0O1xufVxuYXN5bmMgZnVuY3Rpb24gX2dldFN0YW5kYXJkaXplZE91dHB1dHMocnVuLCBzY2hlbWFGb3JtYXQpIHtcbiAgICBjb25zdCB7IG91dHB1dHMgfSA9IHJ1bjtcbiAgICBpZiAoc2NoZW1hRm9ybWF0ID09PSBcIm9yaWdpbmFsXCIpIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBvbGQgc2NoZW1hLCB3aXRob3V0IHN0YW5kYXJkaXppbmcgYW55dGhpbmdcbiAgICAgICAgcmV0dXJuIG91dHB1dHM7XG4gICAgfVxuICAgIGlmIChbXCJyZXRyaWV2ZXJcIiwgXCJsbG1cIiwgXCJwcm9tcHRcIl0uaW5jbHVkZXMocnVuLnJ1bl90eXBlKSkge1xuICAgICAgICByZXR1cm4gb3V0cHV0cztcbiAgICB9XG4gICAgLy8gVE9ETzogUmVtb3ZlIHRoaXMgaGFja3kgY2hlY2tcbiAgICBpZiAob3V0cHV0cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIE9iamVjdC5rZXlzKG91dHB1dHMpLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBvdXRwdXRzPy5vdXRwdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gb3V0cHV0cy5vdXRwdXQ7XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXRzO1xufVxuZnVuY3Rpb24gaXNDaGF0R2VuZXJhdGlvbkNodW5rKHgpIHtcbiAgICByZXR1cm4geCAhPT0gdW5kZWZpbmVkICYmIHgubWVzc2FnZSAhPT0gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBDbGFzcyB0aGF0IGV4dGVuZHMgdGhlIGBCYXNlVHJhY2VyYCBjbGFzcyBmcm9tIHRoZVxuICogYGxhbmdjaGFpbi5jYWxsYmFja3MudHJhY2Vycy5iYXNlYCBtb2R1bGUuIEl0IHJlcHJlc2VudHMgYSBjYWxsYmFja1xuICogaGFuZGxlciB0aGF0IGxvZ3MgdGhlIGV4ZWN1dGlvbiBvZiBydW5zIGFuZCBlbWl0cyBgUnVuTG9nYCBpbnN0YW5jZXMgdG8gYVxuICogYFJ1bkxvZ1N0cmVhbWAuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dTdHJlYW1DYWxsYmFja0hhbmRsZXIgZXh0ZW5kcyBCYXNlVHJhY2VyIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMpIHtcbiAgICAgICAgc3VwZXIoeyBfYXdhaXRIYW5kbGVyOiB0cnVlLCAuLi5maWVsZHMgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImF1dG9DbG9zZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiaW5jbHVkZU5hbWVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImluY2x1ZGVUeXBlc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJpbmNsdWRlVGFnc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJleGNsdWRlTmFtZXNcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiZXhjbHVkZVR5cGVzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImV4Y2x1ZGVUYWdzXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIl9zY2hlbWFGb3JtYXRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwib3JpZ2luYWxcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicm9vdElkXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImtleU1hcEJ5UnVuSWRcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHt9XG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb3VudGVyTWFwQnlSdW5OYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB7fVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwidHJhbnNmb3JtU3RyZWFtXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIndyaXRlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJyZWNlaXZlU3RyZWFtXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm5hbWVcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IFwibG9nX3N0cmVhbV90cmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwibGNfcHJlZmVyX3N0cmVhbWluZ1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hdXRvQ2xvc2UgPSBmaWVsZHM/LmF1dG9DbG9zZSA/PyB0cnVlO1xuICAgICAgICB0aGlzLmluY2x1ZGVOYW1lcyA9IGZpZWxkcz8uaW5jbHVkZU5hbWVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUeXBlcyA9IGZpZWxkcz8uaW5jbHVkZVR5cGVzO1xuICAgICAgICB0aGlzLmluY2x1ZGVUYWdzID0gZmllbGRzPy5pbmNsdWRlVGFncztcbiAgICAgICAgdGhpcy5leGNsdWRlTmFtZXMgPSBmaWVsZHM/LmV4Y2x1ZGVOYW1lcztcbiAgICAgICAgdGhpcy5leGNsdWRlVHlwZXMgPSBmaWVsZHM/LmV4Y2x1ZGVUeXBlcztcbiAgICAgICAgdGhpcy5leGNsdWRlVGFncyA9IGZpZWxkcz8uZXhjbHVkZVRhZ3M7XG4gICAgICAgIHRoaXMuX3NjaGVtYUZvcm1hdCA9IGZpZWxkcz8uX3NjaGVtYUZvcm1hdCA/PyB0aGlzLl9zY2hlbWFGb3JtYXQ7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtU3RyZWFtID0gbmV3IFRyYW5zZm9ybVN0cmVhbSgpO1xuICAgICAgICB0aGlzLndyaXRlciA9IHRoaXMudHJhbnNmb3JtU3RyZWFtLndyaXRhYmxlLmdldFdyaXRlcigpO1xuICAgICAgICB0aGlzLnJlY2VpdmVTdHJlYW0gPSBJdGVyYWJsZVJlYWRhYmxlU3RyZWFtLmZyb21SZWFkYWJsZVN0cmVhbSh0aGlzLnRyYW5zZm9ybVN0cmVhbS5yZWFkYWJsZSk7XG4gICAgfVxuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlY2VpdmVTdHJlYW07XG4gICAgfVxuICAgIGFzeW5jIHBlcnNpc3RSdW4oX3J1bikge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbGVnYWN5IG1ldGhvZCBvbmx5IGNhbGxlZCBvbmNlIGZvciBhbiBlbnRpcmUgcnVuIHRyZWVcbiAgICAgICAgLy8gYW5kIGlzIHRoZXJlZm9yZSBub3QgdXNlZnVsIGhlcmVcbiAgICB9XG4gICAgX2luY2x1ZGVSdW4ocnVuKSB7XG4gICAgICAgIGlmIChydW4uaWQgPT09IHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcnVuVGFncyA9IHJ1bi50YWdzID8/IFtdO1xuICAgICAgICBsZXQgaW5jbHVkZSA9IHRoaXMuaW5jbHVkZU5hbWVzID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuaW5jbHVkZVRhZ3MgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgdGhpcy5pbmNsdWRlVHlwZXMgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRoaXMuaW5jbHVkZU5hbWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluY2x1ZGUgPSBpbmNsdWRlIHx8IHRoaXMuaW5jbHVkZU5hbWVzLmluY2x1ZGVzKHJ1bi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmNsdWRlVHlwZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5jbHVkZSA9IGluY2x1ZGUgfHwgdGhpcy5pbmNsdWRlVHlwZXMuaW5jbHVkZXMocnVuLnJ1bl90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmNsdWRlVGFncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID1cbiAgICAgICAgICAgICAgICBpbmNsdWRlIHx8XG4gICAgICAgICAgICAgICAgICAgIHJ1blRhZ3MuZmluZCgodGFnKSA9PiB0aGlzLmluY2x1ZGVUYWdzPy5pbmNsdWRlcyh0YWcpKSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVOYW1lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlTmFtZXMuaW5jbHVkZXMocnVuLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmV4Y2x1ZGVUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID0gaW5jbHVkZSAmJiAhdGhpcy5leGNsdWRlVHlwZXMuaW5jbHVkZXMocnVuLnJ1bl90eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5leGNsdWRlVGFncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdWRlID1cbiAgICAgICAgICAgICAgICBpbmNsdWRlICYmIHJ1blRhZ3MuZXZlcnkoKHRhZykgPT4gIXRoaXMuZXhjbHVkZVRhZ3M/LmluY2x1ZGVzKHRhZykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmNsdWRlO1xuICAgIH1cbiAgICBhc3luYyAqdGFwT3V0cHV0SXRlcmFibGUocnVuSWQsIG91dHB1dCkge1xuICAgICAgICAvLyBUYXAgYW4gb3V0cHV0IGFzeW5jIGl0ZXJhdG9yIHRvIHN0cmVhbSBpdHMgdmFsdWVzIHRvIHRoZSBsb2cuXG4gICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygb3V0cHV0KSB7XG4gICAgICAgICAgICAvLyByb290IHJ1biBpcyBoYW5kbGVkIGluIC5zdHJlYW1Mb2coKVxuICAgICAgICAgICAgaWYgKHJ1bklkICE9PSB0aGlzLnJvb3RJZCkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGNhbid0IGZpbmQgdGhlIHJ1biBzaWxlbnRseSBpZ25vcmVcbiAgICAgICAgICAgICAgICAvLyBlZy4gYmVjYXVzZSB0aGlzIHJ1biB3YXNuJ3QgaW5jbHVkZWQgaW4gdGhlIGxvZ1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5TWFwQnlSdW5JZFtydW5JZF07XG4gICAgICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndyaXRlci53cml0ZShuZXcgUnVuTG9nUGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3BzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJhZGRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYC9sb2dzLyR7a2V5fS9zdHJlYW1lZF9vdXRwdXQvLWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHlpZWxkIGNodW5rO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBpZiAodGhpcy5yb290SWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5yb290SWQgPSBydW4uaWQ7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLndyaXRlci53cml0ZShuZXcgUnVuTG9nUGF0Y2goe1xuICAgICAgICAgICAgICAgIG9wczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJyZXBsYWNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcnVuLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHJ1bi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHJ1bi5ydW5fdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW1lZF9vdXRwdXQ6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsX291dHB1dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ3M6IHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5faW5jbHVkZVJ1bihydW4pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY291bnRlck1hcEJ5UnVuTmFtZVtydW4ubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudGVyTWFwQnlSdW5OYW1lW3J1bi5uYW1lXSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb3VudGVyTWFwQnlSdW5OYW1lW3J1bi5uYW1lXSArPSAxO1xuICAgICAgICBjb25zdCBjb3VudCA9IHRoaXMuY291bnRlck1hcEJ5UnVuTmFtZVtydW4ubmFtZV07XG4gICAgICAgIHRoaXMua2V5TWFwQnlSdW5JZFtydW4uaWRdID1cbiAgICAgICAgICAgIGNvdW50ID09PSAxID8gcnVuLm5hbWUgOiBgJHtydW4ubmFtZX06JHtjb3VudH1gO1xuICAgICAgICBjb25zdCBsb2dFbnRyeSA9IHtcbiAgICAgICAgICAgIGlkOiBydW4uaWQsXG4gICAgICAgICAgICBuYW1lOiBydW4ubmFtZSxcbiAgICAgICAgICAgIHR5cGU6IHJ1bi5ydW5fdHlwZSxcbiAgICAgICAgICAgIHRhZ3M6IHJ1bi50YWdzID8/IFtdLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHJ1bi5leHRyYT8ubWV0YWRhdGEgPz8ge30sXG4gICAgICAgICAgICBzdGFydF90aW1lOiBuZXcgRGF0ZShydW4uc3RhcnRfdGltZSkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHN0cmVhbWVkX291dHB1dDogW10sXG4gICAgICAgICAgICBzdHJlYW1lZF9vdXRwdXRfc3RyOiBbXSxcbiAgICAgICAgICAgIGZpbmFsX291dHB1dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZW5kX3RpbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuX3NjaGVtYUZvcm1hdCA9PT0gXCJzdHJlYW1pbmdfZXZlbnRzXCIpIHtcbiAgICAgICAgICAgIGxvZ0VudHJ5LmlucHV0cyA9IGF3YWl0IF9nZXRTdGFuZGFyZGl6ZWRJbnB1dHMocnVuLCB0aGlzLl9zY2hlbWFGb3JtYXQpO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMud3JpdGVyLndyaXRlKG5ldyBSdW5Mb2dQYXRjaCh7XG4gICAgICAgICAgICBvcHM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBgL2xvZ3MvJHt0aGlzLmtleU1hcEJ5UnVuSWRbcnVuLmlkXX1gLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbG9nRW50cnksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgYXN5bmMgb25SdW5VcGRhdGUocnVuKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBydW5OYW1lID0gdGhpcy5rZXlNYXBCeVJ1bklkW3J1bi5pZF07XG4gICAgICAgICAgICBpZiAocnVuTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3BzID0gW107XG4gICAgICAgICAgICBpZiAodGhpcy5fc2NoZW1hRm9ybWF0ID09PSBcInN0cmVhbWluZ19ldmVudHNcIikge1xuICAgICAgICAgICAgICAgIG9wcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwicmVwbGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBgL2xvZ3MvJHtydW5OYW1lfS9pbnB1dHNgLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXdhaXQgX2dldFN0YW5kYXJkaXplZElucHV0cyhydW4sIHRoaXMuX3NjaGVtYUZvcm1hdCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgb3A6IFwiYWRkXCIsXG4gICAgICAgICAgICAgICAgcGF0aDogYC9sb2dzLyR7cnVuTmFtZX0vZmluYWxfb3V0cHV0YCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogYXdhaXQgX2dldFN0YW5kYXJkaXplZE91dHB1dHMocnVuLCB0aGlzLl9zY2hlbWFGb3JtYXQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAocnVuLmVuZF90aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBvcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG9wOiBcImFkZFwiLFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBgL2xvZ3MvJHtydW5OYW1lfS9lbmRfdGltZWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZShydW4uZW5kX3RpbWUpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXRjaCA9IG5ldyBSdW5Mb2dQYXRjaCh7IG9wcyB9KTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMud3JpdGVyLndyaXRlKHBhdGNoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChydW4uaWQgPT09IHRoaXMucm9vdElkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0Y2ggPSBuZXcgUnVuTG9nUGF0Y2goe1xuICAgICAgICAgICAgICAgICAgICBvcHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJyZXBsYWNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogXCIvZmluYWxfb3V0cHV0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGF3YWl0IF9nZXRTdGFuZGFyZGl6ZWRPdXRwdXRzKHJ1biwgdGhpcy5fc2NoZW1hRm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy53cml0ZXIud3JpdGUocGF0Y2gpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndyaXRlci5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBvbkxMTU5ld1Rva2VuKHJ1biwgdG9rZW4sIGt3YXJncykge1xuICAgICAgICBjb25zdCBydW5OYW1lID0gdGhpcy5rZXlNYXBCeVJ1bklkW3J1bi5pZF07XG4gICAgICAgIGlmIChydW5OYW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgaGFja1xuICAgICAgICBjb25zdCBpc0NoYXRNb2RlbCA9IHJ1bi5pbnB1dHMubWVzc2FnZXMgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHN0cmVhbWVkT3V0cHV0VmFsdWU7XG4gICAgICAgIGlmIChpc0NoYXRNb2RlbCkge1xuICAgICAgICAgICAgaWYgKGlzQ2hhdEdlbmVyYXRpb25DaHVuayhrd2FyZ3M/LmNodW5rKSkge1xuICAgICAgICAgICAgICAgIHN0cmVhbWVkT3V0cHV0VmFsdWUgPSBrd2FyZ3M/LmNodW5rO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RyZWFtZWRPdXRwdXRWYWx1ZSA9IG5ldyBBSU1lc3NhZ2VDaHVuayh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBgcnVuLSR7cnVuLmlkfWAsXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRva2VuLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RyZWFtZWRPdXRwdXRWYWx1ZSA9IHRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGNoID0gbmV3IFJ1bkxvZ1BhdGNoKHtcbiAgICAgICAgICAgIG9wczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiYWRkXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGAvbG9ncy8ke3J1bk5hbWV9L3N0cmVhbWVkX291dHB1dF9zdHIvLWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0b2tlbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb3A6IFwiYWRkXCIsXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGAvbG9ncy8ke3J1bk5hbWV9L3N0cmVhbWVkX291dHB1dC8tYCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHN0cmVhbWVkT3V0cHV0VmFsdWUsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgIH0pO1xuICAgICAgICBhd2FpdCB0aGlzLndyaXRlci53cml0ZShwYXRjaCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImFwcGx5UGF0Y2giLCJCYXNlVHJhY2VyIiwiSXRlcmFibGVSZWFkYWJsZVN0cmVhbSIsIkFJTWVzc2FnZUNodW5rIiwiUnVuTG9nUGF0Y2giLCJjb25zdHJ1Y3RvciIsImZpZWxkcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJvcHMiLCJjb25jYXQiLCJvdGhlciIsInN0YXRlcyIsIlJ1bkxvZyIsInN0YXRlIiwibGVuZ3RoIiwibmV3RG9jdW1lbnQiLCJmcm9tUnVuTG9nUGF0Y2giLCJwYXRjaCIsImlzTG9nU3RyZWFtSGFuZGxlciIsImhhbmRsZXIiLCJuYW1lIiwiX2dldFN0YW5kYXJkaXplZElucHV0cyIsInJ1biIsInNjaGVtYUZvcm1hdCIsIkVycm9yIiwiaW5wdXRzIiwiaW5jbHVkZXMiLCJydW5fdHlwZSIsImtleXMiLCJpbnB1dCIsInVuZGVmaW5lZCIsIl9nZXRTdGFuZGFyZGl6ZWRPdXRwdXRzIiwib3V0cHV0cyIsIm91dHB1dCIsImlzQ2hhdEdlbmVyYXRpb25DaHVuayIsIngiLCJtZXNzYWdlIiwiTG9nU3RyZWFtQ2FsbGJhY2tIYW5kbGVyIiwiX2F3YWl0SGFuZGxlciIsImF1dG9DbG9zZSIsImluY2x1ZGVOYW1lcyIsImluY2x1ZGVUeXBlcyIsImluY2x1ZGVUYWdzIiwiZXhjbHVkZU5hbWVzIiwiZXhjbHVkZVR5cGVzIiwiZXhjbHVkZVRhZ3MiLCJfc2NoZW1hRm9ybWF0IiwidHJhbnNmb3JtU3RyZWFtIiwiVHJhbnNmb3JtU3RyZWFtIiwid3JpdGVyIiwiZ2V0V3JpdGVyIiwicmVjZWl2ZVN0cmVhbSIsImZyb21SZWFkYWJsZVN0cmVhbSIsInJlYWRhYmxlIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInBlcnNpc3RSdW4iLCJfcnVuIiwiX2luY2x1ZGVSdW4iLCJpZCIsInJvb3RJZCIsInJ1blRhZ3MiLCJ0YWdzIiwiaW5jbHVkZSIsImZpbmQiLCJ0YWciLCJldmVyeSIsInRhcE91dHB1dEl0ZXJhYmxlIiwicnVuSWQiLCJjaHVuayIsImtleSIsImtleU1hcEJ5UnVuSWQiLCJ3cml0ZSIsIm9wIiwicGF0aCIsIm9uUnVuQ3JlYXRlIiwidHlwZSIsInN0cmVhbWVkX291dHB1dCIsImZpbmFsX291dHB1dCIsImxvZ3MiLCJjb3VudGVyTWFwQnlSdW5OYW1lIiwiY291bnQiLCJsb2dFbnRyeSIsIm1ldGFkYXRhIiwiZXh0cmEiLCJzdGFydF90aW1lIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3RyZWFtZWRfb3V0cHV0X3N0ciIsImVuZF90aW1lIiwib25SdW5VcGRhdGUiLCJydW5OYW1lIiwicHVzaCIsImNsb3NlIiwib25MTE1OZXdUb2tlbiIsInRva2VuIiwia3dhcmdzIiwiaXNDaGF0TW9kZWwiLCJtZXNzYWdlcyIsInN0cmVhbWVkT3V0cHV0VmFsdWUiLCJjb250ZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/log_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js":
/*!********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/root_listener.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RootListenersTracer: () => (/* binding */ RootListenersTracer)\n/* harmony export */ });\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n\nclass RootListenersTracer extends _base_js__WEBPACK_IMPORTED_MODULE_0__.BaseTracer {\n    constructor({ config, onStart, onEnd, onError }){\n        super({\n            _awaitHandler: true\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"RootListenersTracer\"\n        });\n        /** The Run's ID. Type UUID */ Object.defineProperty(this, \"rootId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnStart\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnEnd\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"argOnError\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.config = config;\n        this.argOnStart = onStart;\n        this.argOnEnd = onEnd;\n        this.argOnError = onError;\n    }\n    /**\n     * This is a legacy method only called once for an entire run tree\n     * therefore not useful here\n     * @param {Run} _ Not used\n     */ persistRun(_) {\n        return Promise.resolve();\n    }\n    async onRunCreate(run) {\n        if (this.rootId) {\n            return;\n        }\n        this.rootId = run.id;\n        if (this.argOnStart) {\n            await this.argOnStart(run, this.config);\n        }\n    }\n    async onRunUpdate(run) {\n        if (run.id !== this.rootId) {\n            return;\n        }\n        if (!run.error) {\n            if (this.argOnEnd) {\n                await this.argOnEnd(run, this.config);\n            }\n        } else if (this.argOnError) {\n            await this.argOnError(run, this.config);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdHJhY2Vycy9yb290X2xpc3RlbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXVDO0FBQ2hDLE1BQU1DLDRCQUE0QkQsZ0RBQVVBO0lBQy9DRSxZQUFZLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE9BQU8sRUFBRyxDQUFFO1FBQzlDLEtBQUssQ0FBQztZQUFFQyxlQUFlO1FBQUs7UUFDNUJDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsUUFBUTtZQUNoQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTztRQUNYO1FBQ0EsNEJBQTRCLEdBQzVCTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFVBQVU7WUFDbENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLGNBQWM7WUFDdENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ1YsTUFBTSxHQUFHQTtRQUNkLElBQUksQ0FBQ1csVUFBVSxHQUFHVjtRQUNsQixJQUFJLENBQUNXLFFBQVEsR0FBR1Y7UUFDaEIsSUFBSSxDQUFDVyxVQUFVLEdBQUdWO0lBQ3RCO0lBQ0E7Ozs7S0FJQyxHQUNEVyxXQUFXQyxDQUFDLEVBQUU7UUFDVixPQUFPQyxRQUFRQyxPQUFPO0lBQzFCO0lBQ0EsTUFBTUMsWUFBWUMsR0FBRyxFQUFFO1FBQ25CLElBQUksSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDYjtRQUNKO1FBQ0EsSUFBSSxDQUFDQSxNQUFNLEdBQUdELElBQUlFLEVBQUU7UUFDcEIsSUFBSSxJQUFJLENBQUNWLFVBQVUsRUFBRTtZQUNqQixNQUFNLElBQUksQ0FBQ0EsVUFBVSxDQUFDUSxLQUFLLElBQUksQ0FBQ25CLE1BQU07UUFDMUM7SUFDSjtJQUNBLE1BQU1zQixZQUFZSCxHQUFHLEVBQUU7UUFDbkIsSUFBSUEsSUFBSUUsRUFBRSxLQUFLLElBQUksQ0FBQ0QsTUFBTSxFQUFFO1lBQ3hCO1FBQ0o7UUFDQSxJQUFJLENBQUNELElBQUlJLEtBQUssRUFBRTtZQUNaLElBQUksSUFBSSxDQUFDWCxRQUFRLEVBQUU7Z0JBQ2YsTUFBTSxJQUFJLENBQUNBLFFBQVEsQ0FBQ08sS0FBSyxJQUFJLENBQUNuQixNQUFNO1lBQ3hDO1FBQ0osT0FDSyxJQUFJLElBQUksQ0FBQ2EsVUFBVSxFQUFFO1lBQ3RCLE1BQU0sSUFBSSxDQUFDQSxVQUFVLENBQUNNLEtBQUssSUFBSSxDQUFDbkIsTUFBTTtRQUMxQztJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC90cmFjZXJzL3Jvb3RfbGlzdGVuZXIuanM/MGQ0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlVHJhY2VyIH0gZnJvbSBcIi4vYmFzZS5qc1wiO1xuZXhwb3J0IGNsYXNzIFJvb3RMaXN0ZW5lcnNUcmFjZXIgZXh0ZW5kcyBCYXNlVHJhY2VyIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGNvbmZpZywgb25TdGFydCwgb25FbmQsIG9uRXJyb3IsIH0pIHtcbiAgICAgICAgc3VwZXIoeyBfYXdhaXRIYW5kbGVyOiB0cnVlIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJuYW1lXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBcIlJvb3RMaXN0ZW5lcnNUcmFjZXJcIlxuICAgICAgICB9KTtcbiAgICAgICAgLyoqIFRoZSBSdW4ncyBJRC4gVHlwZSBVVUlEICovXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInJvb3RJZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiYXJnT25TdGFydFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVuZFwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJhcmdPbkVycm9yXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmFyZ09uU3RhcnQgPSBvblN0YXJ0O1xuICAgICAgICB0aGlzLmFyZ09uRW5kID0gb25FbmQ7XG4gICAgICAgIHRoaXMuYXJnT25FcnJvciA9IG9uRXJyb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgaXMgYSBsZWdhY3kgbWV0aG9kIG9ubHkgY2FsbGVkIG9uY2UgZm9yIGFuIGVudGlyZSBydW4gdHJlZVxuICAgICAqIHRoZXJlZm9yZSBub3QgdXNlZnVsIGhlcmVcbiAgICAgKiBAcGFyYW0ge1J1bn0gXyBOb3QgdXNlZFxuICAgICAqL1xuICAgIHBlcnNpc3RSdW4oXykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuQ3JlYXRlKHJ1bikge1xuICAgICAgICBpZiAodGhpcy5yb290SWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3RJZCA9IHJ1bi5pZDtcbiAgICAgICAgaWYgKHRoaXMuYXJnT25TdGFydCkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcmdPblN0YXJ0KHJ1biwgdGhpcy5jb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uUnVuVXBkYXRlKHJ1bikge1xuICAgICAgICBpZiAocnVuLmlkICE9PSB0aGlzLnJvb3RJZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVuLmVycm9yKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hcmdPbkVuZCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXJnT25FbmQocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hcmdPbkVycm9yKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFyZ09uRXJyb3IocnVuLCB0aGlzLmNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQmFzZVRyYWNlciIsIlJvb3RMaXN0ZW5lcnNUcmFjZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsIm9uU3RhcnQiLCJvbkVuZCIsIm9uRXJyb3IiLCJfYXdhaXRIYW5kbGVyIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImFyZ09uU3RhcnQiLCJhcmdPbkVuZCIsImFyZ09uRXJyb3IiLCJwZXJzaXN0UnVuIiwiXyIsIlByb21pc2UiLCJyZXNvbHZlIiwib25SdW5DcmVhdGUiLCJydW4iLCJyb290SWQiLCJpZCIsIm9uUnVuVXBkYXRlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/root_listener.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/tracers/tracer_langchain.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LangChainTracer: () => (/* binding */ LangChainTracer)\n/* harmony export */ });\n/* harmony import */ var langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! langsmith/run_trees */ \"(rsc)/./node_modules/langsmith/run_trees.js\");\n/* harmony import */ var langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! langsmith/singletons/traceable */ \"(rsc)/./node_modules/langsmith/singletons/traceable.js\");\n/* harmony import */ var _utils_env_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"(rsc)/./node_modules/@langchain/core/dist/tracers/base.js\");\n/* harmony import */ var _singletons_tracer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../singletons/tracer.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/tracer.js\");\n\n\n\n\n\nclass LangChainTracer extends _base_js__WEBPACK_IMPORTED_MODULE_3__.BaseTracer {\n    constructor(fields = {}){\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const { exampleId, projectName, client } = fields;\n        this.projectName = projectName ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"LANGCHAIN_PROJECT\") ?? (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"LANGCHAIN_SESSION\");\n        this.exampleId = exampleId;\n        this.client = client ?? (0,_singletons_tracer_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultLangChainClientSingleton)();\n        const traceableTree = LangChainTracer.getTraceableRunTree();\n        if (traceableTree) {\n            this.updateFromRunTree(traceableTree);\n        }\n    }\n    async _convertToCreate(run, example_id = undefined) {\n        return {\n            ...run,\n            extra: {\n                ...run.extra,\n                runtime: await (0,_utils_env_js__WEBPACK_IMPORTED_MODULE_2__.getRuntimeEnvironment)()\n            },\n            child_runs: undefined,\n            session_name: this.projectName,\n            reference_example_id: run.parent_run_id ? undefined : example_id\n        };\n    }\n    async persistRun(_run) {}\n    async onRunCreate(run) {\n        const persistedRun = await this._convertToCreate(run, this.exampleId);\n        await this.client.createRun(persistedRun);\n    }\n    async onRunUpdate(run) {\n        const runUpdate = {\n            end_time: run.end_time,\n            error: run.error,\n            outputs: run.outputs,\n            events: run.events,\n            inputs: run.inputs,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            parent_run_id: run.parent_run_id\n        };\n        await this.client.updateRun(run.id, runUpdate);\n    }\n    getRun(id) {\n        return this.runMap.get(id);\n    }\n    updateFromRunTree(runTree) {\n        let rootRun = runTree;\n        const visited = new Set();\n        while(rootRun.parent_run){\n            if (visited.has(rootRun.id)) break;\n            visited.add(rootRun.id);\n            if (!rootRun.parent_run) break;\n            rootRun = rootRun.parent_run;\n        }\n        visited.clear();\n        const queue = [\n            rootRun\n        ];\n        while(queue.length > 0){\n            const current = queue.shift();\n            if (!current || visited.has(current.id)) continue;\n            visited.add(current.id);\n            // @ts-expect-error Types of property 'events' are incompatible.\n            this.runMap.set(current.id, current);\n            if (current.child_runs) {\n                queue.push(...current.child_runs);\n            }\n        }\n        this.client = runTree.client ?? this.client;\n        this.projectName = runTree.project_name ?? this.projectName;\n        this.exampleId = runTree.reference_example_id ?? this.exampleId;\n    }\n    convertToRunTree(id) {\n        const runTreeMap = {};\n        const runTreeList = [];\n        for (const [id, run] of this.runMap){\n            // by converting the run map to a run tree, we are doing a copy\n            // thus, any mutation performed on the run tree will not be reflected\n            // back in the run map\n            // TODO: Stop using `this.runMap` in favour of LangSmith's `RunTree`\n            const runTree = new langsmith_run_trees__WEBPACK_IMPORTED_MODULE_0__.RunTree({\n                ...run,\n                child_runs: [],\n                parent_run: undefined,\n                // inherited properties\n                client: this.client,\n                project_name: this.projectName,\n                reference_example_id: this.exampleId,\n                tracingEnabled: true\n            });\n            runTreeMap[id] = runTree;\n            runTreeList.push([\n                id,\n                run.dotted_order\n            ]);\n        }\n        runTreeList.sort((a, b)=>{\n            if (!a[1] || !b[1]) return 0;\n            return a[1].localeCompare(b[1]);\n        });\n        for (const [id] of runTreeList){\n            const run = this.runMap.get(id);\n            const runTree = runTreeMap[id];\n            if (!run || !runTree) continue;\n            if (run.parent_run_id) {\n                const parentRunTree = runTreeMap[run.parent_run_id];\n                if (parentRunTree) {\n                    parentRunTree.child_runs.push(runTree);\n                    runTree.parent_run = parentRunTree;\n                }\n            }\n        }\n        return runTreeMap[id];\n    }\n    static getTraceableRunTree() {\n        try {\n            return (0,langsmith_singletons_traceable__WEBPACK_IMPORTED_MODULE_1__.getCurrentRunTree)();\n        } catch  {\n            return undefined;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/tracers/tracer_langchain.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/async_caller.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncCaller: () => (/* binding */ AsyncCaller)\n/* harmony export */ });\n/* harmony import */ var p_retry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! p-retry */ \"(rsc)/./node_modules/p-retry/index.js\");\n/* harmony import */ var p_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! p-queue */ \"(rsc)/./node_modules/p-queue/dist/index.js\");\n\n\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    409\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error)=>{\n    if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */ class AsyncCaller {\n    constructor(params){\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt = params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue =  true ? p_queue__WEBPACK_IMPORTED_MODULE_1__[\"default\"] : p_queue__WEBPACK_IMPORTED_MODULE_1__;\n        this.queue = new PQueue({\n            concurrency: this.maxConcurrency\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(()=>p_retry__WEBPACK_IMPORTED_MODULE_0__(()=>callable(...args).catch((error)=>{\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                    if (error instanceof Error) {\n                        throw error;\n                    } else {\n                        throw new Error(error);\n                    }\n                }), {\n                onFailedAttempt: this.onFailedAttempt,\n                retries: this.maxRetries,\n                randomize: true\n            }), {\n            throwOnTimeout: true\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject)=>{\n                    options.signal?.addEventListener(\"abort\", ()=>{\n                        reject(new Error(\"AbortError\"));\n                    });\n                })\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(()=>fetch(...args).then((res)=>res.ok ? res : Promise.reject(res)));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/callbacks.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isTracingEnabled: () => (/* binding */ isTracingEnabled)\n/* harmony export */ });\n/* harmony import */ var _env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\nconst isTracingEnabled = (tracingEnabled)=>{\n    if (tracingEnabled !== undefined) {\n        return tracingEnabled;\n    }\n    const envVars = [\n        \"LANGSMITH_TRACING_V2\",\n        \"LANGCHAIN_TRACING_V2\",\n        \"LANGSMITH_TRACING\",\n        \"LANGCHAIN_TRACING\"\n    ];\n    return !!envVars.find((envVar)=>(0,_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(envVar) === \"true\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2FsbGJhY2tzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWtEO0FBQzNDLE1BQU1DLG1CQUFtQixDQUFDQztJQUM3QixJQUFJQSxtQkFBbUJDLFdBQVc7UUFDOUIsT0FBT0Q7SUFDWDtJQUNBLE1BQU1FLFVBQVU7UUFDWjtRQUNBO1FBQ0E7UUFDQTtLQUNIO0lBQ0QsT0FBTyxDQUFDLENBQUNBLFFBQVFDLElBQUksQ0FBQyxDQUFDQyxTQUFXTiwrREFBc0JBLENBQUNNLFlBQVk7QUFDekUsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2NhbGxiYWNrcy5qcz9jNzM0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEVudmlyb25tZW50VmFyaWFibGUgfSBmcm9tIFwiLi9lbnYuanNcIjtcbmV4cG9ydCBjb25zdCBpc1RyYWNpbmdFbmFibGVkID0gKHRyYWNpbmdFbmFibGVkKSA9PiB7XG4gICAgaWYgKHRyYWNpbmdFbmFibGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRyYWNpbmdFbmFibGVkO1xuICAgIH1cbiAgICBjb25zdCBlbnZWYXJzID0gW1xuICAgICAgICBcIkxBTkdTTUlUSF9UUkFDSU5HX1YyXCIsXG4gICAgICAgIFwiTEFOR0NIQUlOX1RSQUNJTkdfVjJcIixcbiAgICAgICAgXCJMQU5HU01JVEhfVFJBQ0lOR1wiLFxuICAgICAgICBcIkxBTkdDSEFJTl9UUkFDSU5HXCIsXG4gICAgXTtcbiAgICByZXR1cm4gISFlbnZWYXJzLmZpbmQoKGVudlZhcikgPT4gZ2V0RW52aXJvbm1lbnRWYXJpYWJsZShlbnZWYXIpID09PSBcInRydWVcIik7XG59O1xuIl0sIm5hbWVzIjpbImdldEVudmlyb25tZW50VmFyaWFibGUiLCJpc1RyYWNpbmdFbmFibGVkIiwidHJhY2luZ0VuYWJsZWQiLCJ1bmRlZmluZWQiLCJlbnZWYXJzIiwiZmluZCIsImVudlZhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/callbacks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/chunk_array.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* binding */ chunkArray)\n/* harmony export */ });\nconst chunkArray = (arr, chunkSize)=>arr.reduce((chunks, elem, index)=>{\n        const chunkIndex = Math.floor(index / chunkSize);\n        const chunk = chunks[chunkIndex] || [];\n        // eslint-disable-next-line no-param-reassign\n        chunks[chunkIndex] = chunk.concat([\n            elem\n        ]);\n        return chunks;\n    }, []);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGFBQWEsQ0FBQ0MsS0FBS0MsWUFBY0QsSUFBSUUsTUFBTSxDQUFDLENBQUNDLFFBQVFDLE1BQU1DO1FBQ3BFLE1BQU1DLGFBQWFDLEtBQUtDLEtBQUssQ0FBQ0gsUUFBUUo7UUFDdEMsTUFBTVEsUUFBUU4sTUFBTSxDQUFDRyxXQUFXLElBQUksRUFBRTtRQUN0Qyw2Q0FBNkM7UUFDN0NILE1BQU0sQ0FBQ0csV0FBVyxHQUFHRyxNQUFNQyxNQUFNLENBQUM7WUFBQ047U0FBSztRQUN4QyxPQUFPRDtJQUNYLEdBQUcsRUFBRSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvY2h1bmtfYXJyYXkuanM/YzA4ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgY2h1bmtBcnJheSA9IChhcnIsIGNodW5rU2l6ZSkgPT4gYXJyLnJlZHVjZSgoY2h1bmtzLCBlbGVtLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGNodW5rSW5kZXggPSBNYXRoLmZsb29yKGluZGV4IC8gY2h1bmtTaXplKTtcbiAgICBjb25zdCBjaHVuayA9IGNodW5rc1tjaHVua0luZGV4XSB8fCBbXTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBjaHVua3NbY2h1bmtJbmRleF0gPSBjaHVuay5jb25jYXQoW2VsZW1dKTtcbiAgICByZXR1cm4gY2h1bmtzO1xufSwgW10pO1xuIl0sIm5hbWVzIjpbImNodW5rQXJyYXkiLCJhcnIiLCJjaHVua1NpemUiLCJyZWR1Y2UiLCJjaHVua3MiLCJlbGVtIiwiaW5kZXgiLCJjaHVua0luZGV4IiwiTWF0aCIsImZsb29yIiwiY2h1bmsiLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/env.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/env.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* binding */ getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* binding */ getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* binding */ getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   isDeno: () => (/* binding */ isDeno),\n/* harmony export */   isJsDom: () => (/* binding */ isJsDom),\n/* harmony export */   isNode: () => (/* binding */ isNode),\n/* harmony export */   isWebWorker: () => (/* binding */ isWebWorker)\n/* harmony export */ });\nconst isBrowser = ()=> false && 0;\nconst isWebWorker = ()=>typeof globalThis === \"object\" && globalThis.constructor && globalThis.constructor.name === \"DedicatedWorkerGlobalScope\";\nconst isJsDom = ()=> false || typeof navigator !== \"undefined\" && (navigator.userAgent.includes(\"Node.js\") || navigator.userAgent.includes(\"jsdom\"));\n// Supabase Edge Function provides a `Deno` global object\n// without `version` property\nconst isDeno = ()=>typeof Deno !== \"undefined\";\n// Mark not-as-node if in Supabase Edge Function\nconst isNode = ()=>typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\" && !isDeno();\nconst getEnv = ()=>{\n    let env;\n    if (isBrowser()) {\n        env = \"browser\";\n    } else if (isNode()) {\n        env = \"node\";\n    } else if (isWebWorker()) {\n        env = \"webworker\";\n    } else if (isJsDom()) {\n        env = \"jsdom\";\n    } else if (isDeno()) {\n        env = \"deno\";\n    } else {\n        env = \"other\";\n    }\n    return env;\n};\nlet runtimeEnvironment;\nasync function getRuntimeEnvironment() {\n    if (runtimeEnvironment === undefined) {\n        const env = getEnv();\n        runtimeEnvironment = {\n            library: \"langchain-js\",\n            runtime: env\n        };\n    }\n    return runtimeEnvironment;\n}\nfunction getEnvironmentVariable(name) {\n    // Certain Deno setups will throw an error if you try to access environment variables\n    // https://github.com/langchain-ai/langchainjs/issues/1412\n    try {\n        if (typeof process !== \"undefined\") {\n            // eslint-disable-next-line no-process-env\n            return process.env?.[name];\n        } else if (isDeno()) {\n            return Deno?.env.get(name);\n        } else {\n            return undefined;\n        }\n    } catch (e) {\n        return undefined;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZW52LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQU8sTUFBTUEsWUFBWSxJQUFNLE1BQTZCLElBQUksQ0FBc0MsQ0FBQztBQUNoRyxNQUFNRyxjQUFjLElBQU0sT0FBT0MsZUFBZSxZQUNuREEsV0FBV0MsV0FBVyxJQUN0QkQsV0FBV0MsV0FBVyxDQUFDQyxJQUFJLEtBQUssNkJBQTZCO0FBQzFELE1BQU1DLFVBQVUsSUFBTSxNQUEwRCxJQUNsRixPQUFPQyxjQUFjLGVBQ2pCQSxDQUFBQSxVQUFVQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxjQUMxQkYsVUFBVUMsU0FBUyxDQUFDQyxRQUFRLENBQUMsUUFBTyxFQUFJO0FBQ3BELHlEQUF5RDtBQUN6RCw2QkFBNkI7QUFDdEIsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFNBQVMsWUFBWTtBQUN4RCxnREFBZ0Q7QUFDekMsTUFBTUMsU0FBUyxJQUFNLE9BQU9DLFlBQVksZUFDM0MsT0FBT0EsUUFBUUMsUUFBUSxLQUFLLGVBQzVCLE9BQU9ELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxLQUFLLGVBQ2pDLENBQUNMLFNBQVM7QUFDUCxNQUFNTSxTQUFTO0lBQ2xCLElBQUlDO0lBQ0osSUFBSWxCLGFBQWE7UUFDYmtCLE1BQU07SUFDVixPQUNLLElBQUlMLFVBQVU7UUFDZkssTUFBTTtJQUNWLE9BQ0ssSUFBSWYsZUFBZTtRQUNwQmUsTUFBTTtJQUNWLE9BQ0ssSUFBSVgsV0FBVztRQUNoQlcsTUFBTTtJQUNWLE9BQ0ssSUFBSVAsVUFBVTtRQUNmTyxNQUFNO0lBQ1YsT0FDSztRQUNEQSxNQUFNO0lBQ1Y7SUFDQSxPQUFPQTtBQUNYLEVBQUU7QUFDRixJQUFJQztBQUNHLGVBQWVDO0lBQ2xCLElBQUlELHVCQUF1QkUsV0FBVztRQUNsQyxNQUFNSCxNQUFNRDtRQUNaRSxxQkFBcUI7WUFDakJHLFNBQVM7WUFDVEMsU0FBU0w7UUFDYjtJQUNKO0lBQ0EsT0FBT0M7QUFDWDtBQUNPLFNBQVNLLHVCQUF1QmxCLElBQUk7SUFDdkMscUZBQXFGO0lBQ3JGLDBEQUEwRDtJQUMxRCxJQUFJO1FBQ0EsSUFBSSxPQUFPUSxZQUFZLGFBQWE7WUFDaEMsMENBQTBDO1lBQzFDLE9BQU9BLFFBQVFJLEdBQUcsRUFBRSxDQUFDWixLQUFLO1FBQzlCLE9BQ0ssSUFBSUssVUFBVTtZQUNmLE9BQU9DLE1BQU1NLElBQUlPLElBQUluQjtRQUN6QixPQUNLO1lBQ0QsT0FBT2U7UUFDWDtJQUNKLEVBQ0EsT0FBT0ssR0FBRztRQUNOLE9BQU9MO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2Vudi5qcz80MmZkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSAoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5leHBvcnQgY29uc3QgaXNXZWJXb3JrZXIgPSAoKSA9PiB0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIiAmJlxuICAgIGdsb2JhbFRoaXMuY29uc3RydWN0b3IgJiZcbiAgICBnbG9iYWxUaGlzLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVcIjtcbmV4cG9ydCBjb25zdCBpc0pzRG9tID0gKCkgPT4gKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93Lm5hbWUgPT09IFwibm9kZWpzXCIpIHx8XG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoXCJOb2RlLmpzXCIpIHx8XG4gICAgICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKFwianNkb21cIikpKTtcbi8vIFN1cGFiYXNlIEVkZ2UgRnVuY3Rpb24gcHJvdmlkZXMgYSBgRGVub2AgZ2xvYmFsIG9iamVjdFxuLy8gd2l0aG91dCBgdmVyc2lvbmAgcHJvcGVydHlcbmV4cG9ydCBjb25zdCBpc0Rlbm8gPSAoKSA9PiB0eXBlb2YgRGVubyAhPT0gXCJ1bmRlZmluZWRcIjtcbi8vIE1hcmsgbm90LWFzLW5vZGUgaWYgaW4gU3VwYWJhc2UgRWRnZSBGdW5jdGlvblxuZXhwb3J0IGNvbnN0IGlzTm9kZSA9ICgpID0+IHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgIWlzRGVubygpO1xuZXhwb3J0IGNvbnN0IGdldEVudiA9ICgpID0+IHtcbiAgICBsZXQgZW52O1xuICAgIGlmIChpc0Jyb3dzZXIoKSkge1xuICAgICAgICBlbnYgPSBcImJyb3dzZXJcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNOb2RlKCkpIHtcbiAgICAgICAgZW52ID0gXCJub2RlXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzV2ViV29ya2VyKCkpIHtcbiAgICAgICAgZW52ID0gXCJ3ZWJ3b3JrZXJcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNKc0RvbSgpKSB7XG4gICAgICAgIGVudiA9IFwianNkb21cIjtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNEZW5vKCkpIHtcbiAgICAgICAgZW52ID0gXCJkZW5vXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbnYgPSBcIm90aGVyXCI7XG4gICAgfVxuICAgIHJldHVybiBlbnY7XG59O1xubGV0IHJ1bnRpbWVFbnZpcm9ubWVudDtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRSdW50aW1lRW52aXJvbm1lbnQoKSB7XG4gICAgaWYgKHJ1bnRpbWVFbnZpcm9ubWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVudiA9IGdldEVudigpO1xuICAgICAgICBydW50aW1lRW52aXJvbm1lbnQgPSB7XG4gICAgICAgICAgICBsaWJyYXJ5OiBcImxhbmdjaGFpbi1qc1wiLFxuICAgICAgICAgICAgcnVudGltZTogZW52LFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcnVudGltZUVudmlyb25tZW50O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEVudmlyb25tZW50VmFyaWFibGUobmFtZSkge1xuICAgIC8vIENlcnRhaW4gRGVubyBzZXR1cHMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB5b3UgdHJ5IHRvIGFjY2VzcyBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbGFuZ2NoYWluLWFpL2xhbmdjaGFpbmpzL2lzc3Vlcy8xNDEyXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvY2Vzcy1lbnZcbiAgICAgICAgICAgIHJldHVybiBwcm9jZXNzLmVudj8uW25hbWVdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRGVubygpKSB7XG4gICAgICAgICAgICByZXR1cm4gRGVubz8uZW52LmdldChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiaXNCcm93c2VyIiwid2luZG93IiwiZG9jdW1lbnQiLCJpc1dlYldvcmtlciIsImdsb2JhbFRoaXMiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJpc0pzRG9tIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0Rlbm8iLCJEZW5vIiwiaXNOb2RlIiwicHJvY2VzcyIsInZlcnNpb25zIiwibm9kZSIsImdldEVudiIsImVudiIsInJ1bnRpbWVFbnZpcm9ubWVudCIsImdldFJ1bnRpbWVFbnZpcm9ubWVudCIsInVuZGVmaW5lZCIsImxpYnJhcnkiLCJydW50aW1lIiwiZ2V0RW52aXJvbm1lbnRWYXJpYWJsZSIsImdldCIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError),\n/* harmony export */   _areEquals: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__._areEquals),\n/* harmony export */   applyOperation: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyOperation),\n/* harmony export */   applyPatch: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   applyReducer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.applyReducer),\n/* harmony export */   compare: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.compare),\n/* harmony export */   deepClone: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   escapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent),\n/* harmony export */   generate: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.generate),\n/* harmony export */   getValueByPointer: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.getValueByPointer),\n/* harmony export */   observe: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.observe),\n/* harmony export */   unescapePathComponent: () => (/* reexport safe */ _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent),\n/* harmony export */   unobserve: () => (/* reexport safe */ _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__.unobserve),\n/* harmony export */   validate: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validate),\n/* harmony export */   validator: () => (/* reexport safe */ _src_core_js__WEBPACK_IMPORTED_MODULE_0__.validator)\n/* harmony export */ });\n/* harmony import */ var _src_core_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n/* harmony import */ var _src_duplex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/duplex.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\");\n/* harmony import */ var _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n\n\n\n/**\n * Default export for backwards compat\n */ \n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    ..._src_core_js__WEBPACK_IMPORTED_MODULE_0__,\n    // ...duplex,\n    JsonPatchError: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.PatchError,\n    deepClone: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__._deepClone,\n    escapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.escapePathComponent,\n    unescapePathComponent: _src_helpers_js__WEBPACK_IMPORTED_MODULE_2__.unescapePathComponent\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEI7QUFDRTtBQUNzRztBQUN0STs7Q0FFQyxHQUNxQztBQUNnRztBQUN0SSxpRUFBZTtJQUNYLEdBQUdNLHlDQUFJO0lBQ1AsYUFBYTtJQUNiTCxjQUFjQSx5REFBQUE7SUFDZEUsU0FBU0EseURBQUFBO0lBQ1RDLG1CQUFtQkEsa0VBQUFBO0lBQ25CQyxxQkFBcUJBLG9FQUFBQTtBQUN6QixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9mYXN0LWpzb24tcGF0Y2gvaW5kZXguanM/NGM5MyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9zcmMvY29yZS5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vc3JjL2R1cGxleC5qc1wiO1xuZXhwb3J0IHsgUGF0Y2hFcnJvciBhcyBKc29uUGF0Y2hFcnJvciwgX2RlZXBDbG9uZSBhcyBkZWVwQ2xvbmUsIGVzY2FwZVBhdGhDb21wb25lbnQsIHVuZXNjYXBlUGF0aENvbXBvbmVudCwgfSBmcm9tIFwiLi9zcmMvaGVscGVycy5qc1wiO1xuLyoqXG4gKiBEZWZhdWx0IGV4cG9ydCBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5pbXBvcnQgKiBhcyBjb3JlIGZyb20gXCIuL3NyYy9jb3JlLmpzXCI7XG5pbXBvcnQgeyBQYXRjaEVycm9yIGFzIEpzb25QYXRjaEVycm9yLCBfZGVlcENsb25lIGFzIGRlZXBDbG9uZSwgZXNjYXBlUGF0aENvbXBvbmVudCwgdW5lc2NhcGVQYXRoQ29tcG9uZW50LCB9IGZyb20gXCIuL3NyYy9oZWxwZXJzLmpzXCI7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgLi4uY29yZSxcbiAgICAvLyAuLi5kdXBsZXgsXG4gICAgSnNvblBhdGNoRXJyb3IsXG4gICAgZGVlcENsb25lLFxuICAgIGVzY2FwZVBhdGhDb21wb25lbnQsXG4gICAgdW5lc2NhcGVQYXRoQ29tcG9uZW50LFxufTtcbiJdLCJuYW1lcyI6WyJQYXRjaEVycm9yIiwiSnNvblBhdGNoRXJyb3IiLCJfZGVlcENsb25lIiwiZGVlcENsb25lIiwiZXNjYXBlUGF0aENvbXBvbmVudCIsInVuZXNjYXBlUGF0aENvbXBvbmVudCIsImNvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonPatchError: () => (/* binding */ JsonPatchError),\n/* harmony export */   _areEquals: () => (/* binding */ _areEquals),\n/* harmony export */   applyOperation: () => (/* binding */ applyOperation),\n/* harmony export */   applyPatch: () => (/* binding */ applyPatch),\n/* harmony export */   applyReducer: () => (/* binding */ applyReducer),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   getValueByPointer: () => (/* binding */ getValueByPointer),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validator: () => (/* binding */ validator)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n// @ts-nocheck\n\nconst JsonPatchError = _helpers_js__WEBPACK_IMPORTED_MODULE_0__.PatchError;\nconst deepClone = _helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */ /* The operations applicable to an object */ const objOps = {\n    add: function(obj, key, document) {\n        obj[key] = this.value;\n        return {\n            newDocument: document\n        };\n    },\n    remove: function(obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    replace: function(obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: function(obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */ let removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(removed);\n        }\n        const originalValue = applyOperation(document, {\n            op: \"remove\",\n            path: this.from\n        }).removed;\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: originalValue\n        });\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    copy: function(obj, key, document) {\n        const valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, {\n            op: \"add\",\n            path: this.path,\n            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(valueToCopy)\n        });\n        return {\n            newDocument: document\n        };\n    },\n    test: function(obj, key, document) {\n        return {\n            newDocument: document,\n            test: _areEquals(obj[key], this.value)\n        };\n    },\n    _get: function(obj, key, document) {\n        this.value = obj[key];\n        return {\n            newDocument: document\n        };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */ var arrOps = {\n    add: function(arr, i, document) {\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(i)) {\n            arr.splice(i, 0, this.value);\n        } else {\n            // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return {\n            newDocument: document,\n            index: i\n        };\n    },\n    remove: function(arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return {\n            newDocument: document,\n            removed: removedList[0]\n        };\n    },\n    replace: function(arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return {\n            newDocument: document,\n            removed\n        };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */ function getValueByPointer(document, pointer) {\n    if (pointer == \"\") {\n        return document;\n    }\n    var getOriginalDestination = {\n        op: \"_get\",\n        path: pointer\n    };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */ function applyOperation(document, operation, validateOperation = false, mutateDocument = true, banPrototypeModifications = true, index = 0) {\n    if (validateOperation) {\n        if (typeof validateOperation == \"function\") {\n            validateOperation(operation, 0, document, operation.path);\n        } else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */ if (operation.path === \"\") {\n        let returnValue = {\n            newDocument: document\n        };\n        if (operation.op === \"add\") {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        } else if (operation.op === \"replace\") {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === \"move\") {\n                // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        } else if (operation.op === \"test\") {\n            returnValue.test = _areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        } else if (operation.op === \"remove\") {\n            // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        } else if (operation.op === \"_get\") {\n            operation.value = document;\n            return returnValue;\n        } else {\n            /* bad operation */ if (validateOperation) {\n                throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n            } else {\n                return returnValue;\n            }\n        }\n    } else {\n        if (!mutateDocument) {\n            document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n        }\n        const path = operation.path || \"\";\n        const keys = path.split(\"/\");\n        let obj = document;\n        let t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        let len = keys.length;\n        let existingPathFragment = undefined;\n        let key;\n        let validateFunction;\n        if (typeof validateOperation == \"function\") {\n            validateFunction = validateOperation;\n        } else {\n            validateFunction = validator;\n        }\n        while(true){\n            key = keys[t];\n            if (key && key.indexOf(\"~\") != -1) {\n                key = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.unescapePathComponent)(key);\n            }\n            if (banPrototypeModifications && (key == \"__proto__\" || key == \"prototype\" && t > 0 && keys[t - 1] == \"constructor\")) {\n                throw new TypeError(\"JSON-Patch: modifying `__proto__` or `constructor/prototype` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README\");\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join(\"/\");\n                    } else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === \"-\") {\n                    key = obj.length;\n                } else {\n                    if (validateOperation && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        throw new JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.isInteger)(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    const returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            } else {\n                if (t >= len) {\n                    const returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n            // If we have more keys in the path, but the next value isn't a non-null object,\n            // throw an OPERATION_PATH_UNRESOLVABLE error instead of iterating again.\n            if (validateOperation && t < len && (!obj || typeof obj !== \"object\")) {\n                throw new JsonPatchError(\"Cannot perform operation at the desired path\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */ function applyPatch(document, patch, validateOperation, mutateDocument = true, banPrototypeModifications = true) {\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n    }\n    if (!mutateDocument) {\n        document = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document);\n    }\n    const results = new Array(patch.length);\n    for(let i = 0, length = patch.length; i < length; i++){\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */ function applyReducer(document, operation, index) {\n    const operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) {\n        // failed test\n        throw new JsonPatchError(\"Test operation failed\", \"TEST_OPERATION_FAILED\", index, operation, document);\n    }\n    return operationResult.newDocument;\n}\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */ function validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== \"object\" || operation === null || Array.isArray(operation)) {\n        throw new JsonPatchError(\"Operation is not an object\", \"OPERATION_NOT_AN_OBJECT\", index, operation, document);\n    } else if (!objOps[operation.op]) {\n        throw new JsonPatchError(\"Operation `op` property is not one of operations defined in RFC-6902\", \"OPERATION_OP_INVALID\", index, operation, document);\n    } else if (typeof operation.path !== \"string\") {\n        throw new JsonPatchError(\"Operation `path` property is not a string\", \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if (operation.path.indexOf(\"/\") !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new JsonPatchError('Operation `path` property must start with \"/\"', \"OPERATION_PATH_INVALID\", index, operation, document);\n    } else if ((operation.op === \"move\" || operation.op === \"copy\") && typeof operation.from !== \"string\") {\n        throw new JsonPatchError(\"Operation `from` property is not present (applicable in `move` and `copy` operations)\", \"OPERATION_FROM_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && operation.value === undefined) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_REQUIRED\", index, operation, document);\n    } else if ((operation.op === \"add\" || operation.op === \"replace\" || operation.op === \"test\") && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasUndefined)(operation.value)) {\n        throw new JsonPatchError(\"Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)\", \"OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED\", index, operation, document);\n    } else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new JsonPatchError(\"Cannot perform an `add` operation at the desired path\", \"OPERATION_PATH_CANNOT_ADD\", index, operation, document);\n            }\n        } else if (operation.op === \"replace\" || operation.op === \"remove\" || operation.op === \"_get\") {\n            if (operation.path !== existingPathFragment) {\n                throw new JsonPatchError(\"Cannot perform the operation at a path that does not exist\", \"OPERATION_PATH_UNRESOLVABLE\", index, operation, document);\n            }\n        } else if (operation.op === \"move\" || operation.op === \"copy\") {\n            var existingValue = {\n                op: \"_get\",\n                path: operation.from,\n                value: undefined\n            };\n            var error = validate([\n                existingValue\n            ], document);\n            if (error && error.name === \"OPERATION_PATH_UNRESOLVABLE\") {\n                throw new JsonPatchError(\"Cannot perform the operation from a path that does not exist\", \"OPERATION_FROM_UNRESOLVABLE\", index, operation, document);\n            }\n        }\n    }\n}\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */ function validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new JsonPatchError(\"Patch sequence must be an array\", \"SEQUENCE_NOT_AN_ARRAY\");\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(document), (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(sequence), externalValidator || true);\n        } else {\n            externalValidator = externalValidator || validator;\n            for(var i = 0; i < sequence.length; i++){\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    } catch (e) {\n        if (e instanceof JsonPatchError) {\n            return e;\n        } else {\n            throw e;\n        }\n    }\n}\n// based on https://github.com/epoberezkin/fast-deep-equal\n// MIT License\n// Copyright (c) 2017 Evgeny Poberezkin\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nfunction _areEquals(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a == \"object\" && typeof b == \"object\") {\n        var arrA = Array.isArray(a), arrB = Array.isArray(b), i, length, key;\n        if (arrA && arrB) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!_areEquals(a[i], b[i])) return false;\n            return true;\n        }\n        if (arrA != arrB) return false;\n        var keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!b.hasOwnProperty(keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            key = keys[i];\n            if (!_areEquals(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compare: () => (/* binding */ compare),\n/* harmony export */   generate: () => (/* binding */ generate),\n/* harmony export */   observe: () => (/* binding */ observe),\n/* harmony export */   unobserve: () => (/* binding */ unobserve)\n/* harmony export */ });\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\");\n/* harmony import */ var _core_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/core.js\");\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2013-2021 Joachim Wester\n * MIT license\n */ \n\nvar beforeDict = new WeakMap();\nclass Mirror {\n    constructor(obj){\n        Object.defineProperty(this, \"obj\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observers\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.obj = obj;\n    }\n}\nclass ObserverInfo {\n    constructor(callback, observer){\n        Object.defineProperty(this, \"callback\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"observer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.callback = callback;\n        this.observer = observer;\n    }\n}\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */ function unobserve(root, observer) {\n    observer.unobserve();\n}\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */ function observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    } else {\n        const observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = ()=>{\n            generate(observer);\n        };\n        var fastCheck = ()=>{\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (false) {}\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = ()=>{\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (false) {}\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\n/**\n * Generate an array of patches from an observer\n */ function generate(observer, invertible = false) {\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        (0,_core_js__WEBPACK_IMPORTED_MODULE_1__.applyPatch)(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(obj);\n    var oldKeys = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._objectKeys)(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for(var t = oldKeys.length - 1; t >= 0; t--){\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null && Array.isArray(oldVal) === Array.isArray(newVal)) {\n                _generate(oldVal, newVal, patches, path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key), invertible);\n            } else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({\n                            op: \"test\",\n                            path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                            value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                        });\n                    }\n                    patches.push({\n                        op: \"replace\",\n                        path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                        value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(newVal)\n                    });\n                }\n            }\n        } else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                    value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(oldVal)\n                });\n            }\n            patches.push({\n                op: \"remove\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key)\n            });\n            deleted = true; // property has been deleted\n        } else {\n            if (invertible) {\n                patches.push({\n                    op: \"test\",\n                    path,\n                    value: mirror\n                });\n            }\n            patches.push({\n                op: \"replace\",\n                path,\n                value: obj\n            });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for(var t = 0; t < newKeys.length; t++){\n        var key = newKeys[t];\n        if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.hasOwnProperty)(mirror, key) && obj[key] !== undefined) {\n            patches.push({\n                op: \"add\",\n                path: path + \"/\" + (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__.escapePathComponent)(key),\n                value: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_0__._deepClone)(obj[key])\n            });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */ function compare(tree1, tree2, invertible = false) {\n    var patches = [];\n    _generate(tree1, tree2, patches, \"\", invertible);\n    return patches;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL3NyYy9kdXBsZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsY0FBYztBQUNkLHVDQUF1QztBQUN2Qzs7OztDQUlDLEdBQzRGO0FBQ3REO0FBQ3ZDLElBQUlLLGFBQWEsSUFBSUM7QUFDckIsTUFBTUM7SUFDRkMsWUFBWUMsR0FBRyxDQUFFO1FBQ2JDLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsT0FBTztZQUMvQkMsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0FMLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYTtZQUNyQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxJQUFJQztRQUNmO1FBQ0FOLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUUsU0FBUztZQUNqQ0MsWUFBWTtZQUNaQyxjQUFjO1lBQ2RDLFVBQVU7WUFDVkMsT0FBTyxLQUFLO1FBQ2hCO1FBQ0EsSUFBSSxDQUFDTixHQUFHLEdBQUdBO0lBQ2Y7QUFDSjtBQUNBLE1BQU1RO0lBQ0ZULFlBQVlVLFFBQVEsRUFBRUMsUUFBUSxDQUFFO1FBQzVCVCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVk7WUFDcENDLFlBQVk7WUFDWkMsY0FBYztZQUNkQyxVQUFVO1lBQ1ZDLE9BQU8sS0FBSztRQUNoQjtRQUNBLElBQUksQ0FBQ0csUUFBUSxHQUFHQTtRQUNoQixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDcEI7QUFDSjtBQUNBLFNBQVNDLFVBQVVYLEdBQUc7SUFDbEIsT0FBT0osV0FBV2dCLEdBQUcsQ0FBQ1o7QUFDMUI7QUFDQSxTQUFTYSxzQkFBc0JDLE1BQU0sRUFBRUwsUUFBUTtJQUMzQyxPQUFPSyxPQUFPQyxTQUFTLENBQUNILEdBQUcsQ0FBQ0g7QUFDaEM7QUFDQSxTQUFTTyx5QkFBeUJGLE1BQU0sRUFBRUosUUFBUTtJQUM5Q0ksT0FBT0MsU0FBUyxDQUFDRSxNQUFNLENBQUNQLFNBQVNELFFBQVE7QUFDN0M7QUFDQTs7Q0FFQyxHQUNNLFNBQVNTLFVBQVVDLElBQUksRUFBRVQsUUFBUTtJQUNwQ0EsU0FBU1EsU0FBUztBQUN0QjtBQUNBOztDQUVDLEdBQ00sU0FBU0UsUUFBUXBCLEdBQUcsRUFBRVMsUUFBUTtJQUNqQyxJQUFJWSxVQUFVLEVBQUU7SUFDaEIsSUFBSVg7SUFDSixJQUFJSSxTQUFTSCxVQUFVWDtJQUN2QixJQUFJLENBQUNjLFFBQVE7UUFDVEEsU0FBUyxJQUFJaEIsT0FBT0U7UUFDcEJKLFdBQVcwQixHQUFHLENBQUN0QixLQUFLYztJQUN4QixPQUNLO1FBQ0QsTUFBTVMsZUFBZVYsc0JBQXNCQyxRQUFRTDtRQUNuREMsV0FBV2EsZ0JBQWdCQSxhQUFhYixRQUFRO0lBQ3BEO0lBQ0EsSUFBSUEsVUFBVTtRQUNWLE9BQU9BO0lBQ1g7SUFDQUEsV0FBVyxDQUFDO0lBQ1pJLE9BQU9SLEtBQUssR0FBR2YsdURBQVVBLENBQUNTO0lBQzFCLElBQUlTLFVBQVU7UUFDVkMsU0FBU0QsUUFBUSxHQUFHQTtRQUNwQkMsU0FBU2MsSUFBSSxHQUFHO1FBQ2hCLElBQUlDLGFBQWE7WUFDYkMsU0FBU2hCO1FBQ2I7UUFDQSxJQUFJaUIsWUFBWTtZQUNaQyxhQUFhbEIsU0FBU2MsSUFBSTtZQUMxQmQsU0FBU2MsSUFBSSxHQUFHSyxXQUFXSjtRQUMvQjtRQUNBLElBQUksS0FBNkIsRUFBRSxFQU9sQztJQUNMO0lBQ0FmLFNBQVNXLE9BQU8sR0FBR0E7SUFDbkJYLFNBQVNzQixNQUFNLEdBQUdoQztJQUNsQlUsU0FBU1EsU0FBUyxHQUFHO1FBQ2pCUSxTQUFTaEI7UUFDVGtCLGFBQWFsQixTQUFTYyxJQUFJO1FBQzFCUix5QkFBeUJGLFFBQVFKO1FBQ2pDLElBQUksS0FBNkIsRUFBRSxFQU1sQztJQUNMO0lBQ0FJLE9BQU9DLFNBQVMsQ0FBQ08sR0FBRyxDQUFDYixVQUFVLElBQUlELGFBQWFDLFVBQVVDO0lBQzFELE9BQU9BO0FBQ1g7QUFDQTs7Q0FFQyxHQUNNLFNBQVNnQixTQUFTaEIsUUFBUSxFQUFFd0IsYUFBYSxLQUFLO0lBQ2pELElBQUlwQixTQUFTbEIsV0FBV2dCLEdBQUcsQ0FBQ0YsU0FBU3NCLE1BQU07SUFDM0NHLFVBQVVyQixPQUFPUixLQUFLLEVBQUVJLFNBQVNzQixNQUFNLEVBQUV0QixTQUFTVyxPQUFPLEVBQUUsSUFBSWE7SUFDL0QsSUFBSXhCLFNBQVNXLE9BQU8sQ0FBQ2UsTUFBTSxFQUFFO1FBQ3pCekMsb0RBQVVBLENBQUNtQixPQUFPUixLQUFLLEVBQUVJLFNBQVNXLE9BQU87SUFDN0M7SUFDQSxJQUFJZ0IsT0FBTzNCLFNBQVNXLE9BQU87SUFDM0IsSUFBSWdCLEtBQUtELE1BQU0sR0FBRyxHQUFHO1FBQ2pCMUIsU0FBU1csT0FBTyxHQUFHLEVBQUU7UUFDckIsSUFBSVgsU0FBU0QsUUFBUSxFQUFFO1lBQ25CQyxTQUFTRCxRQUFRLENBQUM0QjtRQUN0QjtJQUNKO0lBQ0EsT0FBT0E7QUFDWDtBQUNBLGtGQUFrRjtBQUNsRixTQUFTRixVQUFVckIsTUFBTSxFQUFFZCxHQUFHLEVBQUVxQixPQUFPLEVBQUVpQixJQUFJLEVBQUVKLFVBQVU7SUFDckQsSUFBSWxDLFFBQVFjLFFBQVE7UUFDaEI7SUFDSjtJQUNBLElBQUksT0FBT2QsSUFBSXVDLE1BQU0sS0FBSyxZQUFZO1FBQ2xDdkMsTUFBTUEsSUFBSXVDLE1BQU07SUFDcEI7SUFDQSxJQUFJQyxVQUFVaEQsd0RBQVdBLENBQUNRO0lBQzFCLElBQUl5QyxVQUFVakQsd0RBQVdBLENBQUNzQjtJQUMxQixJQUFJNEIsVUFBVTtJQUNkLElBQUlDLFVBQVU7SUFDZCw4SEFBOEg7SUFDOUgsSUFBSyxJQUFJQyxJQUFJSCxRQUFRTCxNQUFNLEdBQUcsR0FBR1EsS0FBSyxHQUFHQSxJQUFLO1FBQzFDLElBQUlDLE1BQU1KLE9BQU8sQ0FBQ0csRUFBRTtRQUNwQixJQUFJRSxTQUFTaEMsTUFBTSxDQUFDK0IsSUFBSTtRQUN4QixJQUFJbkQsMkRBQWNBLENBQUNNLEtBQUs2QyxRQUNwQixDQUFFN0MsQ0FBQUEsR0FBRyxDQUFDNkMsSUFBSSxLQUFLRSxhQUNYRCxXQUFXQyxhQUNYQyxNQUFNQyxPQUFPLENBQUNqRCxTQUFTLEtBQUksR0FBSTtZQUNuQyxJQUFJa0QsU0FBU2xELEdBQUcsQ0FBQzZDLElBQUk7WUFDckIsSUFBSSxPQUFPQyxVQUFVLFlBQ2pCQSxVQUFVLFFBQ1YsT0FBT0ksVUFBVSxZQUNqQkEsVUFBVSxRQUNWRixNQUFNQyxPQUFPLENBQUNILFlBQVlFLE1BQU1DLE9BQU8sQ0FBQ0MsU0FBUztnQkFDakRmLFVBQVVXLFFBQVFJLFFBQVE3QixTQUFTaUIsT0FBTyxNQUFNN0MsZ0VBQW1CQSxDQUFDb0QsTUFBTVg7WUFDOUUsT0FDSztnQkFDRCxJQUFJWSxXQUFXSSxRQUFRO29CQUNuQlIsVUFBVTtvQkFDVixJQUFJUixZQUFZO3dCQUNaYixRQUFROEIsSUFBSSxDQUFDOzRCQUNUQyxJQUFJOzRCQUNKZCxNQUFNQSxPQUFPLE1BQU03QyxnRUFBbUJBLENBQUNvRDs0QkFDdkN2QyxPQUFPZix1REFBVUEsQ0FBQ3VEO3dCQUN0QjtvQkFDSjtvQkFDQXpCLFFBQVE4QixJQUFJLENBQUM7d0JBQ1RDLElBQUk7d0JBQ0pkLE1BQU1BLE9BQU8sTUFBTTdDLGdFQUFtQkEsQ0FBQ29EO3dCQUN2Q3ZDLE9BQU9mLHVEQUFVQSxDQUFDMkQ7b0JBQ3RCO2dCQUNKO1lBQ0o7UUFDSixPQUNLLElBQUlGLE1BQU1DLE9BQU8sQ0FBQ25DLFlBQVlrQyxNQUFNQyxPQUFPLENBQUNqRCxNQUFNO1lBQ25ELElBQUlrQyxZQUFZO2dCQUNaYixRQUFROEIsSUFBSSxDQUFDO29CQUNUQyxJQUFJO29CQUNKZCxNQUFNQSxPQUFPLE1BQU03QyxnRUFBbUJBLENBQUNvRDtvQkFDdkN2QyxPQUFPZix1REFBVUEsQ0FBQ3VEO2dCQUN0QjtZQUNKO1lBQ0F6QixRQUFROEIsSUFBSSxDQUFDO2dCQUNUQyxJQUFJO2dCQUNKZCxNQUFNQSxPQUFPLE1BQU03QyxnRUFBbUJBLENBQUNvRDtZQUMzQztZQUNBRixVQUFVLE1BQU0sNEJBQTRCO1FBQ2hELE9BQ0s7WUFDRCxJQUFJVCxZQUFZO2dCQUNaYixRQUFROEIsSUFBSSxDQUFDO29CQUFFQyxJQUFJO29CQUFRZDtvQkFBTWhDLE9BQU9RO2dCQUFPO1lBQ25EO1lBQ0FPLFFBQVE4QixJQUFJLENBQUM7Z0JBQUVDLElBQUk7Z0JBQVdkO2dCQUFNaEMsT0FBT047WUFBSTtZQUMvQzBDLFVBQVU7UUFDZDtJQUNKO0lBQ0EsSUFBSSxDQUFDQyxXQUFXSCxRQUFRSixNQUFNLElBQUlLLFFBQVFMLE1BQU0sRUFBRTtRQUM5QztJQUNKO0lBQ0EsSUFBSyxJQUFJUSxJQUFJLEdBQUdBLElBQUlKLFFBQVFKLE1BQU0sRUFBRVEsSUFBSztRQUNyQyxJQUFJQyxNQUFNTCxPQUFPLENBQUNJLEVBQUU7UUFDcEIsSUFBSSxDQUFDbEQsMkRBQWNBLENBQUNvQixRQUFRK0IsUUFBUTdDLEdBQUcsQ0FBQzZDLElBQUksS0FBS0UsV0FBVztZQUN4RDFCLFFBQVE4QixJQUFJLENBQUM7Z0JBQ1RDLElBQUk7Z0JBQ0pkLE1BQU1BLE9BQU8sTUFBTTdDLGdFQUFtQkEsQ0FBQ29EO2dCQUN2Q3ZDLE9BQU9mLHVEQUFVQSxDQUFDUyxHQUFHLENBQUM2QyxJQUFJO1lBQzlCO1FBQ0o7SUFDSjtBQUNKO0FBQ0E7O0NBRUMsR0FDTSxTQUFTUSxRQUFRQyxLQUFLLEVBQUVDLEtBQUssRUFBRXJCLGFBQWEsS0FBSztJQUNwRCxJQUFJYixVQUFVLEVBQUU7SUFDaEJjLFVBQVVtQixPQUFPQyxPQUFPbEMsU0FBUyxJQUFJYTtJQUNyQyxPQUFPYjtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvZmFzdC1qc29uLXBhdGNoL3NyYy9kdXBsZXguanM/Y2U2YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtbm9jaGVja1xuLy8gSW5saW5lZCBiZWNhdXNlIG9mIEVTTSBpbXBvcnQgaXNzdWVzXG4vKiFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGFyY291bnRlci1KYWNrL0pTT04tUGF0Y2hcbiAqIChjKSAyMDEzLTIwMjEgSm9hY2hpbSBXZXN0ZXJcbiAqIE1JVCBsaWNlbnNlXG4gKi9cbmltcG9ydCB7IF9kZWVwQ2xvbmUsIF9vYmplY3RLZXlzLCBlc2NhcGVQYXRoQ29tcG9uZW50LCBoYXNPd25Qcm9wZXJ0eSwgfSBmcm9tIFwiLi9oZWxwZXJzLmpzXCI7XG5pbXBvcnQgeyBhcHBseVBhdGNoIH0gZnJvbSBcIi4vY29yZS5qc1wiO1xudmFyIGJlZm9yZURpY3QgPSBuZXcgV2Vha01hcCgpO1xuY2xhc3MgTWlycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihvYmopIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib2JqXCIsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiB2b2lkIDBcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIm9ic2VydmVyc1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogbmV3IE1hcCgpXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm9iaiA9IG9iajtcbiAgICB9XG59XG5jbGFzcyBPYnNlcnZlckluZm8ge1xuICAgIGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBvYnNlcnZlcikge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJjYWxsYmFja1wiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCJvYnNlcnZlclwiLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRNaXJyb3Iob2JqKSB7XG4gICAgcmV0dXJuIGJlZm9yZURpY3QuZ2V0KG9iaik7XG59XG5mdW5jdGlvbiBnZXRPYnNlcnZlckZyb21NaXJyb3IobWlycm9yLCBjYWxsYmFjaykge1xuICAgIHJldHVybiBtaXJyb3Iub2JzZXJ2ZXJzLmdldChjYWxsYmFjayk7XG59XG5mdW5jdGlvbiByZW1vdmVPYnNlcnZlckZyb21NaXJyb3IobWlycm9yLCBvYnNlcnZlcikge1xuICAgIG1pcnJvci5vYnNlcnZlcnMuZGVsZXRlKG9ic2VydmVyLmNhbGxiYWNrKTtcbn1cbi8qKlxuICogRGV0YWNoIGFuIG9ic2VydmVyIGZyb20gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bm9ic2VydmUocm9vdCwgb2JzZXJ2ZXIpIHtcbiAgICBvYnNlcnZlci51bm9ic2VydmUoKTtcbn1cbi8qKlxuICogT2JzZXJ2ZXMgY2hhbmdlcyBtYWRlIHRvIGFuIG9iamVjdCwgd2hpY2ggY2FuIHRoZW4gYmUgcmV0cmlldmVkIHVzaW5nIGdlbmVyYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlKG9iaiwgY2FsbGJhY2spIHtcbiAgICB2YXIgcGF0Y2hlcyA9IFtdO1xuICAgIHZhciBvYnNlcnZlcjtcbiAgICB2YXIgbWlycm9yID0gZ2V0TWlycm9yKG9iaik7XG4gICAgaWYgKCFtaXJyb3IpIHtcbiAgICAgICAgbWlycm9yID0gbmV3IE1pcnJvcihvYmopO1xuICAgICAgICBiZWZvcmVEaWN0LnNldChvYmosIG1pcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBvYnNlcnZlckluZm8gPSBnZXRPYnNlcnZlckZyb21NaXJyb3IobWlycm9yLCBjYWxsYmFjayk7XG4gICAgICAgIG9ic2VydmVyID0gb2JzZXJ2ZXJJbmZvICYmIG9ic2VydmVySW5mby5vYnNlcnZlcjtcbiAgICB9XG4gICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlcjtcbiAgICB9XG4gICAgb2JzZXJ2ZXIgPSB7fTtcbiAgICBtaXJyb3IudmFsdWUgPSBfZGVlcENsb25lKG9iaik7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIG9ic2VydmVyLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIG9ic2VydmVyLm5leHQgPSBudWxsO1xuICAgICAgICB2YXIgZGlydHlDaGVjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGdlbmVyYXRlKG9ic2VydmVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZhc3RDaGVjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQgPSBzZXRUaW1lb3V0KGRpcnR5Q2hlY2spO1xuICAgICAgICB9O1xuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy9ub3QgTm9kZVxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGZhc3RDaGVjayk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGZhc3RDaGVjayk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBmYXN0Q2hlY2spO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZhc3RDaGVjayk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmYXN0Q2hlY2spO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9ic2VydmVyLnBhdGNoZXMgPSBwYXRjaGVzO1xuICAgIG9ic2VydmVyLm9iamVjdCA9IG9iajtcbiAgICBvYnNlcnZlci51bm9ic2VydmUgPSAoKSA9PiB7XG4gICAgICAgIGdlbmVyYXRlKG9ic2VydmVyKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KG9ic2VydmVyLm5leHQpO1xuICAgICAgICByZW1vdmVPYnNlcnZlckZyb21NaXJyb3IobWlycm9yLCBvYnNlcnZlcik7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgZmFzdENoZWNrKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgZmFzdENoZWNrKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZhc3RDaGVjayk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZmFzdENoZWNrKTtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGZhc3RDaGVjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIG1pcnJvci5vYnNlcnZlcnMuc2V0KGNhbGxiYWNrLCBuZXcgT2JzZXJ2ZXJJbmZvKGNhbGxiYWNrLCBvYnNlcnZlcikpO1xuICAgIHJldHVybiBvYnNlcnZlcjtcbn1cbi8qKlxuICogR2VuZXJhdGUgYW4gYXJyYXkgb2YgcGF0Y2hlcyBmcm9tIGFuIG9ic2VydmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZShvYnNlcnZlciwgaW52ZXJ0aWJsZSA9IGZhbHNlKSB7XG4gICAgdmFyIG1pcnJvciA9IGJlZm9yZURpY3QuZ2V0KG9ic2VydmVyLm9iamVjdCk7XG4gICAgX2dlbmVyYXRlKG1pcnJvci52YWx1ZSwgb2JzZXJ2ZXIub2JqZWN0LCBvYnNlcnZlci5wYXRjaGVzLCBcIlwiLCBpbnZlcnRpYmxlKTtcbiAgICBpZiAob2JzZXJ2ZXIucGF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgYXBwbHlQYXRjaChtaXJyb3IudmFsdWUsIG9ic2VydmVyLnBhdGNoZXMpO1xuICAgIH1cbiAgICB2YXIgdGVtcCA9IG9ic2VydmVyLnBhdGNoZXM7XG4gICAgaWYgKHRlbXAubGVuZ3RoID4gMCkge1xuICAgICAgICBvYnNlcnZlci5wYXRjaGVzID0gW107XG4gICAgICAgIGlmIChvYnNlcnZlci5jYWxsYmFjaykge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY2FsbGJhY2sodGVtcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRlbXA7XG59XG4vLyBEaXJ0eSBjaGVjayBpZiBvYmogaXMgZGlmZmVyZW50IGZyb20gbWlycm9yLCBnZW5lcmF0ZSBwYXRjaGVzIGFuZCB1cGRhdGUgbWlycm9yXG5mdW5jdGlvbiBfZ2VuZXJhdGUobWlycm9yLCBvYmosIHBhdGNoZXMsIHBhdGgsIGludmVydGlibGUpIHtcbiAgICBpZiAob2JqID09PSBtaXJyb3IpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iai50b0pTT04gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBvYmogPSBvYmoudG9KU09OKCk7XG4gICAgfVxuICAgIHZhciBuZXdLZXlzID0gX29iamVjdEtleXMob2JqKTtcbiAgICB2YXIgb2xkS2V5cyA9IF9vYmplY3RLZXlzKG1pcnJvcik7XG4gICAgdmFyIGNoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgZGVsZXRlZCA9IGZhbHNlO1xuICAgIC8vaWYgZXZlciBcIm1vdmVcIiBvcGVyYXRpb24gaXMgaW1wbGVtZW50ZWQgaGVyZSwgbWFrZSBzdXJlIHRoaXMgdGVzdCBydW5zIE9LOiBcInNob3VsZCBub3QgZ2VuZXJhdGUgdGhlIHNhbWUgcGF0Y2ggdHdpY2UgKG1vdmUpXCJcbiAgICBmb3IgKHZhciB0ID0gb2xkS2V5cy5sZW5ndGggLSAxOyB0ID49IDA7IHQtLSkge1xuICAgICAgICB2YXIga2V5ID0gb2xkS2V5c1t0XTtcbiAgICAgICAgdmFyIG9sZFZhbCA9IG1pcnJvcltrZXldO1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkob2JqLCBrZXkpICYmXG4gICAgICAgICAgICAhKG9ialtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICBvbGRWYWwgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob2JqKSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICB2YXIgbmV3VmFsID0gb2JqW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9sZFZhbCA9PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgb2xkVmFsICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgbmV3VmFsID09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgICAgICBuZXdWYWwgIT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob2xkVmFsKSA9PT0gQXJyYXkuaXNBcnJheShuZXdWYWwpKSB7XG4gICAgICAgICAgICAgICAgX2dlbmVyYXRlKG9sZFZhbCwgbmV3VmFsLCBwYXRjaGVzLCBwYXRoICsgXCIvXCIgKyBlc2NhcGVQYXRoQ29tcG9uZW50KGtleSksIGludmVydGlibGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAhPT0gbmV3VmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW52ZXJ0aWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogXCJ0ZXN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCArIFwiL1wiICsgZXNjYXBlUGF0aENvbXBvbmVudChrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfZGVlcENsb25lKG9sZFZhbCksXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgb3A6IFwicmVwbGFjZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCArIFwiL1wiICsgZXNjYXBlUGF0aENvbXBvbmVudChrZXkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF9kZWVwQ2xvbmUobmV3VmFsKSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobWlycm9yKSA9PT0gQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgICAgICBpZiAoaW52ZXJ0aWJsZSkge1xuICAgICAgICAgICAgICAgIHBhdGNoZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIG9wOiBcInRlc3RcIixcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCArIFwiL1wiICsgZXNjYXBlUGF0aENvbXBvbmVudChrZXkpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX2RlZXBDbG9uZShvbGRWYWwpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBvcDogXCJyZW1vdmVcIixcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoICsgXCIvXCIgKyBlc2NhcGVQYXRoQ29tcG9uZW50KGtleSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlbGV0ZWQgPSB0cnVlOyAvLyBwcm9wZXJ0eSBoYXMgYmVlbiBkZWxldGVkXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaW52ZXJ0aWJsZSkge1xuICAgICAgICAgICAgICAgIHBhdGNoZXMucHVzaCh7IG9wOiBcInRlc3RcIiwgcGF0aCwgdmFsdWU6IG1pcnJvciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhdGNoZXMucHVzaCh7IG9wOiBcInJlcGxhY2VcIiwgcGF0aCwgdmFsdWU6IG9iaiB9KTtcbiAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghZGVsZXRlZCAmJiBuZXdLZXlzLmxlbmd0aCA9PSBvbGRLZXlzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIHQgPSAwOyB0IDwgbmV3S2V5cy5sZW5ndGg7IHQrKykge1xuICAgICAgICB2YXIga2V5ID0gbmV3S2V5c1t0XTtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShtaXJyb3IsIGtleSkgJiYgb2JqW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBvcDogXCJhZGRcIixcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoICsgXCIvXCIgKyBlc2NhcGVQYXRoQ29tcG9uZW50KGtleSksXG4gICAgICAgICAgICAgICAgdmFsdWU6IF9kZWVwQ2xvbmUob2JqW2tleV0pLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhbiBhcnJheSBvZiBwYXRjaGVzIGZyb20gdGhlIGRpZmZlcmVuY2VzIGluIHR3byBvYmplY3RzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlKHRyZWUxLCB0cmVlMiwgaW52ZXJ0aWJsZSA9IGZhbHNlKSB7XG4gICAgdmFyIHBhdGNoZXMgPSBbXTtcbiAgICBfZ2VuZXJhdGUodHJlZTEsIHRyZWUyLCBwYXRjaGVzLCBcIlwiLCBpbnZlcnRpYmxlKTtcbiAgICByZXR1cm4gcGF0Y2hlcztcbn1cbiJdLCJuYW1lcyI6WyJfZGVlcENsb25lIiwiX29iamVjdEtleXMiLCJlc2NhcGVQYXRoQ29tcG9uZW50IiwiaGFzT3duUHJvcGVydHkiLCJhcHBseVBhdGNoIiwiYmVmb3JlRGljdCIsIldlYWtNYXAiLCJNaXJyb3IiLCJjb25zdHJ1Y3RvciIsIm9iaiIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJNYXAiLCJPYnNlcnZlckluZm8iLCJjYWxsYmFjayIsIm9ic2VydmVyIiwiZ2V0TWlycm9yIiwiZ2V0IiwiZ2V0T2JzZXJ2ZXJGcm9tTWlycm9yIiwibWlycm9yIiwib2JzZXJ2ZXJzIiwicmVtb3ZlT2JzZXJ2ZXJGcm9tTWlycm9yIiwiZGVsZXRlIiwidW5vYnNlcnZlIiwicm9vdCIsIm9ic2VydmUiLCJwYXRjaGVzIiwic2V0Iiwib2JzZXJ2ZXJJbmZvIiwibmV4dCIsImRpcnR5Q2hlY2siLCJnZW5lcmF0ZSIsImZhc3RDaGVjayIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwib2JqZWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImludmVydGlibGUiLCJfZ2VuZXJhdGUiLCJsZW5ndGgiLCJ0ZW1wIiwicGF0aCIsInRvSlNPTiIsIm5ld0tleXMiLCJvbGRLZXlzIiwiY2hhbmdlZCIsImRlbGV0ZWQiLCJ0Iiwia2V5Iiwib2xkVmFsIiwidW5kZWZpbmVkIiwiQXJyYXkiLCJpc0FycmF5IiwibmV3VmFsIiwicHVzaCIsIm9wIiwiY29tcGFyZSIsInRyZWUxIiwidHJlZTIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/duplex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PatchError: () => (/* binding */ PatchError),\n/* harmony export */   _deepClone: () => (/* binding */ _deepClone),\n/* harmony export */   _getPathRecursive: () => (/* binding */ _getPathRecursive),\n/* harmony export */   _objectKeys: () => (/* binding */ _objectKeys),\n/* harmony export */   escapePathComponent: () => (/* binding */ escapePathComponent),\n/* harmony export */   getPath: () => (/* binding */ getPath),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   hasUndefined: () => (/* binding */ hasUndefined),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   unescapePathComponent: () => (/* binding */ unescapePathComponent)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined because of ESM import issues\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017-2022 Joachim Wester\n * MIT licensed\n */ const _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        const keys = new Array(obj.length);\n        for(let k = 0; k < keys.length; k++){\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    let keys = [];\n    for(let i in obj){\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\n/**\n * Deeply clone the object.\n * https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n * @param  {any} obj value to clone\n * @return {any} cloned obj\n */ function _deepClone(obj) {\n    switch(typeof obj){\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    let i = 0;\n    const len = str.length;\n    let charCode;\n    while(i < len){\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\n/**\n * Escapes a json pointer path\n * @param path The raw pointer\n * @return the Escaped path\n */ function escapePathComponent(path) {\n    if (path.indexOf(\"/\") === -1 && path.indexOf(\"~\") === -1) return path;\n    return path.replace(/~/g, \"~0\").replace(/\\//g, \"~1\");\n}\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */ function unescapePathComponent(path) {\n    return path.replace(/~1/g, \"/\").replace(/~0/g, \"~\");\n}\nfunction _getPathRecursive(root, obj) {\n    let found;\n    for(let key in root){\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + \"/\";\n            } else if (typeof root[key] === \"object\") {\n                found = _getPathRecursive(root[key], obj);\n                if (found != \"\") {\n                    return escapePathComponent(key) + \"/\" + found;\n                }\n            }\n        }\n    }\n    return \"\";\n}\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return \"/\";\n    }\n    const path = _getPathRecursive(root, obj);\n    if (path === \"\") {\n        throw new Error(\"Object not found in root\");\n    }\n    return `/${path}`;\n}\n/**\n * Recursively checks whether an object has any undefined values inside.\n */ function hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for(let i = 0, len = obj.length; i < len; i++){\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        } else if (typeof obj === \"object\") {\n            const objKeys = _objectKeys(obj);\n            const objKeysLength = objKeys.length;\n            for(var i = 0; i < objKeysLength; i++){\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nfunction patchErrorMessageFormatter(message, args) {\n    const messageParts = [\n        message\n    ];\n    for(const key in args){\n        const value = typeof args[key] === \"object\" ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== \"undefined\") {\n            messageParts.push(`${key}: ${value}`);\n        }\n    }\n    return messageParts.join(\"\\n\");\n}\nclass PatchError extends Error {\n    constructor(message, name, index, operation, tree){\n        super(patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        }));\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: name\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: index\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: operation\n        });\n        Object.defineProperty(this, \"tree\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: tree\n        });\n        Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        this.message = patchErrorMessageFormatter(message, {\n            name,\n            index,\n            operation,\n            tree\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/src/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/function_calling.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIFunction: () => (/* binding */ convertToOpenAIFunction),\n/* harmony export */   convertToOpenAITool: () => (/* binding */ convertToOpenAITool),\n/* harmony export */   isLangChainTool: () => (/* binding */ isLangChainTool),\n/* harmony export */   isRunnableToolLike: () => (/* binding */ isRunnableToolLike),\n/* harmony export */   isStructuredTool: () => (/* binding */ isStructuredTool),\n/* harmony export */   isStructuredToolParams: () => (/* binding */ isStructuredToolParams)\n/* harmony export */ });\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _runnables_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../runnables/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/base.js\");\n/* harmony import */ var _types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/is_zod_schema.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/types/is_zod_schema.js\");\n\n\n\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a format\n * that is compatible with OpenAI function calling. It uses the `zodToJsonSchema`\n * function to convert the schema of the `StructuredTool` or `RunnableToolLike`\n * into a JSON schema, which is then used as the parameters for the OpenAI function.\n *\n * @param {StructuredToolInterface | RunnableToolLike} tool The tool to convert to an OpenAI function.\n * @returns {FunctionDefinition} The inputted tool in OpenAI function format.\n */ function convertToOpenAIFunction(tool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    return {\n        name: tool.name,\n        description: tool.description,\n        parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(tool.schema),\n        // Do not include the `strict` field if it is `undefined`.\n        ...fieldsCopy?.strict !== undefined ? {\n            strict: fieldsCopy.strict\n        } : {}\n    };\n}\n/**\n * Formats a `StructuredTool` or `RunnableToolLike` instance into a\n * format that is compatible with OpenAI tool calling. It uses the\n * `zodToJsonSchema` function to convert the schema of the `StructuredTool`\n * or `RunnableToolLike` into a JSON schema, which is then used as the\n * parameters for the OpenAI tool.\n *\n * @param {StructuredToolInterface | Record<string, any> | RunnableToolLike} tool The tool to convert to an OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */ function convertToOpenAITool(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    // @TODO 0.3.0 Remove the `number` typing\n    const fieldsCopy = typeof fields === \"number\" ? undefined : fields;\n    let toolDef;\n    if (isLangChainTool(tool)) {\n        toolDef = {\n            type: \"function\",\n            function: convertToOpenAIFunction(tool)\n        };\n    } else {\n        toolDef = tool;\n    }\n    if (fieldsCopy?.strict !== undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        toolDef.function.strict = fieldsCopy.strict;\n    }\n    return toolDef;\n}\n/**\n * Confirm whether the inputted tool is an instance of `StructuredToolInterface`.\n *\n * @param {StructuredToolInterface | Record<string, any> | undefined} tool The tool to check if it is an instance of `StructuredToolInterface`.\n * @returns {tool is StructuredToolInterface} Whether the inputted tool is an instance of `StructuredToolInterface`.\n */ function isStructuredTool(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool) {\n    return tool !== undefined && Array.isArray(tool.lc_namespace);\n}\n/**\n * Confirm whether the inputted tool is an instance of `RunnableToolLike`.\n *\n * @param {unknown | undefined} tool The tool to check if it is an instance of `RunnableToolLike`.\n * @returns {tool is RunnableToolLike} Whether the inputted tool is an instance of `RunnableToolLike`.\n */ function isRunnableToolLike(tool) {\n    return tool !== undefined && _runnables_base_js__WEBPACK_IMPORTED_MODULE_1__.Runnable.isRunnable(tool) && \"lc_name\" in tool.constructor && typeof tool.constructor.lc_name === \"function\" && tool.constructor.lc_name() === \"RunnableToolLike\";\n}\n/**\n * Confirm whether or not the tool contains the necessary properties to be considered a `StructuredToolParams`.\n *\n * @param {unknown | undefined} tool The object to check if it is a `StructuredToolParams`.\n * @returns {tool is StructuredToolParams} Whether the inputted object is a `StructuredToolParams`.\n */ function isStructuredToolParams(tool) {\n    return !!tool && typeof tool === \"object\" && \"name\" in tool && \"schema\" in tool && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (0,_types_is_zod_schema_js__WEBPACK_IMPORTED_MODULE_2__.isZodSchema)(tool.schema);\n}\n/**\n * Whether or not the tool is one of StructuredTool, RunnableTool or StructuredToolParams.\n * It returns `is StructuredToolParams` since that is the most minimal interface of the three,\n * while still containing the necessary properties to be passed to a LLM for tool calling.\n *\n * @param {unknown | undefined} tool The tool to check if it is a LangChain tool.\n * @returns {tool is StructuredToolParams} Whether the inputted tool is a LangChain tool.\n */ function isLangChainTool(tool) {\n    return isStructuredToolParams(tool) || isRunnableToolLike(tool) || // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    isStructuredTool(tool);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/hash.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/hash.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* reexport safe */ _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__.insecureHash)\n/* harmony export */ });\n/* harmony import */ var _js_sha1_hash_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-sha1/hash.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvaGFzaC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL2hhc2guanM/NGI0YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBpbnNlY3VyZUhhc2ggfSBmcm9tIFwiLi9qcy1zaGExL2hhc2guanNcIjtcbiJdLCJuYW1lcyI6WyJpbnNlY3VyZUhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/js-sha1/hash.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insecureHash: () => (/* binding */ insecureHash)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues with importing crypto module\n/*\n * [js-sha1]{@link https://github.com/emn178/js-sha1}\n *\n * @version 0.6.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */ /*jslint bitwise: true */ \nvar root =  false ? 0 : {};\nvar HEX_CHARS = \"0123456789abcdef\".split(\"\");\nvar EXTRA = [\n    -2147483648,\n    8388608,\n    32768,\n    128\n];\nvar SHIFT = [\n    24,\n    16,\n    8,\n    0\n];\nvar OUTPUT_TYPES = [\n    \"hex\",\n    \"array\",\n    \"digest\",\n    \"arrayBuffer\"\n];\nvar blocks = [];\nfunction Sha1(sharedMemory) {\n    if (sharedMemory) {\n        blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        this.blocks = blocks;\n    } else {\n        this.blocks = [\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0,\n            0\n        ];\n    }\n    this.h0 = 0x67452301;\n    this.h1 = 0xefcdab89;\n    this.h2 = 0x98badcfe;\n    this.h3 = 0x10325476;\n    this.h4 = 0xc3d2e1f0;\n    this.block = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n}\nSha1.prototype.update = function(message) {\n    if (this.finalized) {\n        return;\n    }\n    var notString = typeof message !== \"string\";\n    if (notString && message.constructor === root.ArrayBuffer) {\n        message = new Uint8Array(message);\n    }\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\n    while(index < length){\n        if (this.hashed) {\n            this.hashed = false;\n            blocks[0] = this.block;\n            blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n        }\n        if (notString) {\n            for(i = this.start; index < length && i < 64; ++index){\n                blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n        } else {\n            for(i = this.start; index < length && i < 64; ++index){\n                code = message.charCodeAt(index);\n                if (code < 0x80) {\n                    blocks[i >> 2] |= code << SHIFT[i++ & 3];\n                } else if (code < 0x800) {\n                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else if (code < 0xd800 || code >= 0xe000) {\n                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                } else {\n                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n                }\n            }\n        }\n        this.lastByteIndex = i;\n        this.bytes += i - this.start;\n        if (i >= 64) {\n            this.block = blocks[16];\n            this.start = i - 64;\n            this.hash();\n            this.hashed = true;\n        } else {\n            this.start = i;\n        }\n    }\n    if (this.bytes > 4294967295) {\n        this.hBytes += this.bytes / 4294967296 << 0;\n        this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n};\nSha1.prototype.finalize = function() {\n    if (this.finalized) {\n        return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[16] = this.block;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    this.block = blocks[16];\n    if (i >= 56) {\n        if (!this.hashed) {\n            this.hash();\n        }\n        blocks[0] = this.block;\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;\n    blocks[15] = this.bytes << 3;\n    this.hash();\n};\nSha1.prototype.hash = function() {\n    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4;\n    var f, j, t, blocks = this.blocks;\n    for(j = 16; j < 80; ++j){\n        t = blocks[j - 3] ^ blocks[j - 8] ^ blocks[j - 14] ^ blocks[j - 16];\n        blocks[j] = t << 1 | t >>> 31;\n    }\n    for(j = 0; j < 20; j += 5){\n        f = b & c | ~b & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1518500249 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | ~a & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1518500249 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | ~e & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1518500249 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | ~d & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1518500249 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | ~c & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1518500249 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 40; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e + 1859775393 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d + 1859775393 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c + 1859775393 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b + 1859775393 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a + 1859775393 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 60; j += 5){\n        f = b & c | b & d | c & d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 1894007588 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a & b | a & c | b & c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 1894007588 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e & a | e & b | a & b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 1894007588 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d & e | d & a | e & a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 1894007588 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c & d | c & e | d & e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 1894007588 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    for(; j < 80; j += 5){\n        f = b ^ c ^ d;\n        t = a << 5 | a >>> 27;\n        e = t + f + e - 899497514 + blocks[j] << 0;\n        b = b << 30 | b >>> 2;\n        f = a ^ b ^ c;\n        t = e << 5 | e >>> 27;\n        d = t + f + d - 899497514 + blocks[j + 1] << 0;\n        a = a << 30 | a >>> 2;\n        f = e ^ a ^ b;\n        t = d << 5 | d >>> 27;\n        c = t + f + c - 899497514 + blocks[j + 2] << 0;\n        e = e << 30 | e >>> 2;\n        f = d ^ e ^ a;\n        t = c << 5 | c >>> 27;\n        b = t + f + b - 899497514 + blocks[j + 3] << 0;\n        d = d << 30 | d >>> 2;\n        f = c ^ d ^ e;\n        t = b << 5 | b >>> 27;\n        a = t + f + a - 899497514 + blocks[j + 4] << 0;\n        c = c << 30 | c >>> 2;\n    }\n    this.h0 = this.h0 + a << 0;\n    this.h1 = this.h1 + b << 0;\n    this.h2 = this.h2 + c << 0;\n    this.h3 = this.h3 + d << 0;\n    this.h4 = this.h4 + e << 0;\n};\nSha1.prototype.hex = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return HEX_CHARS[h0 >> 28 & 0x0f] + HEX_CHARS[h0 >> 24 & 0x0f] + HEX_CHARS[h0 >> 20 & 0x0f] + HEX_CHARS[h0 >> 16 & 0x0f] + HEX_CHARS[h0 >> 12 & 0x0f] + HEX_CHARS[h0 >> 8 & 0x0f] + HEX_CHARS[h0 >> 4 & 0x0f] + HEX_CHARS[h0 & 0x0f] + HEX_CHARS[h1 >> 28 & 0x0f] + HEX_CHARS[h1 >> 24 & 0x0f] + HEX_CHARS[h1 >> 20 & 0x0f] + HEX_CHARS[h1 >> 16 & 0x0f] + HEX_CHARS[h1 >> 12 & 0x0f] + HEX_CHARS[h1 >> 8 & 0x0f] + HEX_CHARS[h1 >> 4 & 0x0f] + HEX_CHARS[h1 & 0x0f] + HEX_CHARS[h2 >> 28 & 0x0f] + HEX_CHARS[h2 >> 24 & 0x0f] + HEX_CHARS[h2 >> 20 & 0x0f] + HEX_CHARS[h2 >> 16 & 0x0f] + HEX_CHARS[h2 >> 12 & 0x0f] + HEX_CHARS[h2 >> 8 & 0x0f] + HEX_CHARS[h2 >> 4 & 0x0f] + HEX_CHARS[h2 & 0x0f] + HEX_CHARS[h3 >> 28 & 0x0f] + HEX_CHARS[h3 >> 24 & 0x0f] + HEX_CHARS[h3 >> 20 & 0x0f] + HEX_CHARS[h3 >> 16 & 0x0f] + HEX_CHARS[h3 >> 12 & 0x0f] + HEX_CHARS[h3 >> 8 & 0x0f] + HEX_CHARS[h3 >> 4 & 0x0f] + HEX_CHARS[h3 & 0x0f] + HEX_CHARS[h4 >> 28 & 0x0f] + HEX_CHARS[h4 >> 24 & 0x0f] + HEX_CHARS[h4 >> 20 & 0x0f] + HEX_CHARS[h4 >> 16 & 0x0f] + HEX_CHARS[h4 >> 12 & 0x0f] + HEX_CHARS[h4 >> 8 & 0x0f] + HEX_CHARS[h4 >> 4 & 0x0f] + HEX_CHARS[h4 & 0x0f];\n};\nSha1.prototype.toString = Sha1.prototype.hex;\nSha1.prototype.digest = function() {\n    this.finalize();\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4;\n    return [\n        h0 >> 24 & 0xff,\n        h0 >> 16 & 0xff,\n        h0 >> 8 & 0xff,\n        h0 & 0xff,\n        h1 >> 24 & 0xff,\n        h1 >> 16 & 0xff,\n        h1 >> 8 & 0xff,\n        h1 & 0xff,\n        h2 >> 24 & 0xff,\n        h2 >> 16 & 0xff,\n        h2 >> 8 & 0xff,\n        h2 & 0xff,\n        h3 >> 24 & 0xff,\n        h3 >> 16 & 0xff,\n        h3 >> 8 & 0xff,\n        h3 & 0xff,\n        h4 >> 24 & 0xff,\n        h4 >> 16 & 0xff,\n        h4 >> 8 & 0xff,\n        h4 & 0xff\n    ];\n};\nSha1.prototype.array = Sha1.prototype.digest;\nSha1.prototype.arrayBuffer = function() {\n    this.finalize();\n    var buffer = new ArrayBuffer(20);\n    var dataView = new DataView(buffer);\n    dataView.setUint32(0, this.h0);\n    dataView.setUint32(4, this.h1);\n    dataView.setUint32(8, this.h2);\n    dataView.setUint32(12, this.h3);\n    dataView.setUint32(16, this.h4);\n    return buffer;\n};\nconst insecureHash = (message)=>{\n    return new Sha1(true).update(message)[\"hex\"]();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/js-sha1/hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json.js":
/*!*********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseJsonMarkdown: () => (/* binding */ parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* binding */ parsePartialJson)\n/* harmony export */ });\nfunction parseJsonMarkdown(s, parser = parsePartialJson) {\n    // eslint-disable-next-line no-param-reassign\n    s = s.trim();\n    const match = /```(json)?(.*)```/s.exec(s);\n    if (!match) {\n        return parser(s);\n    } else {\n        return parser(match[2]);\n    }\n}\n// Adapted from https://github.com/KillianLucas/open-interpreter/blob/main/interpreter/core/llm/utils/parse_partial_json.py\n// MIT License\nfunction parsePartialJson(s) {\n    // If the input is undefined, return null to indicate failure.\n    if (typeof s === \"undefined\") {\n        return null;\n    }\n    // Attempt to parse the string as-is.\n    try {\n        return JSON.parse(s);\n    } catch (error) {\n    // Pass\n    }\n    // Initialize variables.\n    let new_s = \"\";\n    const stack = [];\n    let isInsideString = false;\n    let escaped = false;\n    // Process each character in the string one at a time.\n    for (let char of s){\n        if (isInsideString) {\n            if (char === '\"' && !escaped) {\n                isInsideString = false;\n            } else if (char === \"\\n\" && !escaped) {\n                char = \"\\\\n\"; // Replace the newline character with the escape sequence.\n            } else if (char === \"\\\\\") {\n                escaped = !escaped;\n            } else {\n                escaped = false;\n            }\n        } else {\n            if (char === '\"') {\n                isInsideString = true;\n                escaped = false;\n            } else if (char === \"{\") {\n                stack.push(\"}\");\n            } else if (char === \"[\") {\n                stack.push(\"]\");\n            } else if (char === \"}\" || char === \"]\") {\n                if (stack && stack[stack.length - 1] === char) {\n                    stack.pop();\n                } else {\n                    // Mismatched closing character; the input is malformed.\n                    return null;\n                }\n            }\n        }\n        // Append the processed character to the new string.\n        new_s += char;\n    }\n    // If we're still inside a string at the end of processing,\n    // we need to close the string.\n    if (isInsideString) {\n        new_s += '\"';\n    }\n    // Close any remaining open structures in the reverse order that they were opened.\n    for(let i = stack.length - 1; i >= 0; i -= 1){\n        new_s += stack[i];\n    }\n    // Attempt to parse the modified string as JSON.\n    try {\n        return JSON.parse(new_s);\n    } catch (error) {\n        // If we still can't parse the string as JSON, return null to indicate failure.\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLFNBQVNBLGtCQUFrQkMsQ0FBQyxFQUFFQyxTQUFTQyxnQkFBZ0I7SUFDMUQsNkNBQTZDO0lBQzdDRixJQUFJQSxFQUFFRyxJQUFJO0lBQ1YsTUFBTUMsUUFBUSxxQkFBcUJDLElBQUksQ0FBQ0w7SUFDeEMsSUFBSSxDQUFDSSxPQUFPO1FBQ1IsT0FBT0gsT0FBT0Q7SUFDbEIsT0FDSztRQUNELE9BQU9DLE9BQU9HLEtBQUssQ0FBQyxFQUFFO0lBQzFCO0FBQ0o7QUFDQSwySEFBMkg7QUFDM0gsY0FBYztBQUNQLFNBQVNGLGlCQUFpQkYsQ0FBQztJQUM5Qiw4REFBOEQ7SUFDOUQsSUFBSSxPQUFPQSxNQUFNLGFBQWE7UUFDMUIsT0FBTztJQUNYO0lBQ0EscUNBQXFDO0lBQ3JDLElBQUk7UUFDQSxPQUFPTSxLQUFLQyxLQUFLLENBQUNQO0lBQ3RCLEVBQ0EsT0FBT1EsT0FBTztJQUNWLE9BQU87SUFDWDtJQUNBLHdCQUF3QjtJQUN4QixJQUFJQyxRQUFRO0lBQ1osTUFBTUMsUUFBUSxFQUFFO0lBQ2hCLElBQUlDLGlCQUFpQjtJQUNyQixJQUFJQyxVQUFVO0lBQ2Qsc0RBQXNEO0lBQ3RELEtBQUssSUFBSUMsUUFBUWIsRUFBRztRQUNoQixJQUFJVyxnQkFBZ0I7WUFDaEIsSUFBSUUsU0FBUyxPQUFPLENBQUNELFNBQVM7Z0JBQzFCRCxpQkFBaUI7WUFDckIsT0FDSyxJQUFJRSxTQUFTLFFBQVEsQ0FBQ0QsU0FBUztnQkFDaENDLE9BQU8sT0FBTywwREFBMEQ7WUFDNUUsT0FDSyxJQUFJQSxTQUFTLE1BQU07Z0JBQ3BCRCxVQUFVLENBQUNBO1lBQ2YsT0FDSztnQkFDREEsVUFBVTtZQUNkO1FBQ0osT0FDSztZQUNELElBQUlDLFNBQVMsS0FBSztnQkFDZEYsaUJBQWlCO2dCQUNqQkMsVUFBVTtZQUNkLE9BQ0ssSUFBSUMsU0FBUyxLQUFLO2dCQUNuQkgsTUFBTUksSUFBSSxDQUFDO1lBQ2YsT0FDSyxJQUFJRCxTQUFTLEtBQUs7Z0JBQ25CSCxNQUFNSSxJQUFJLENBQUM7WUFDZixPQUNLLElBQUlELFNBQVMsT0FBT0EsU0FBUyxLQUFLO2dCQUNuQyxJQUFJSCxTQUFTQSxLQUFLLENBQUNBLE1BQU1LLE1BQU0sR0FBRyxFQUFFLEtBQUtGLE1BQU07b0JBQzNDSCxNQUFNTSxHQUFHO2dCQUNiLE9BQ0s7b0JBQ0Qsd0RBQXdEO29CQUN4RCxPQUFPO2dCQUNYO1lBQ0o7UUFDSjtRQUNBLG9EQUFvRDtRQUNwRFAsU0FBU0k7SUFDYjtJQUNBLDJEQUEyRDtJQUMzRCwrQkFBK0I7SUFDL0IsSUFBSUYsZ0JBQWdCO1FBQ2hCRixTQUFTO0lBQ2I7SUFDQSxrRkFBa0Y7SUFDbEYsSUFBSyxJQUFJUSxJQUFJUCxNQUFNSyxNQUFNLEdBQUcsR0FBR0UsS0FBSyxHQUFHQSxLQUFLLEVBQUc7UUFDM0NSLFNBQVNDLEtBQUssQ0FBQ08sRUFBRTtJQUNyQjtJQUNBLGdEQUFnRDtJQUNoRCxJQUFJO1FBQ0EsT0FBT1gsS0FBS0MsS0FBSyxDQUFDRTtJQUN0QixFQUNBLE9BQU9ELE9BQU87UUFDViwrRUFBK0U7UUFDL0UsT0FBTztJQUNYO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9qc29uLmpzP2E2ZWEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnNvbk1hcmtkb3duKHMsIHBhcnNlciA9IHBhcnNlUGFydGlhbEpzb24pIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBzID0gcy50cmltKCk7XG4gICAgY29uc3QgbWF0Y2ggPSAvYGBgKGpzb24pPyguKilgYGAvcy5leGVjKHMpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlcihzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZXIobWF0Y2hbMl0pO1xuICAgIH1cbn1cbi8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vS2lsbGlhbkx1Y2FzL29wZW4taW50ZXJwcmV0ZXIvYmxvYi9tYWluL2ludGVycHJldGVyL2NvcmUvbGxtL3V0aWxzL3BhcnNlX3BhcnRpYWxfanNvbi5weVxuLy8gTUlUIExpY2Vuc2VcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVBhcnRpYWxKc29uKHMpIHtcbiAgICAvLyBJZiB0aGUgaW5wdXQgaXMgdW5kZWZpbmVkLCByZXR1cm4gbnVsbCB0byBpbmRpY2F0ZSBmYWlsdXJlLlxuICAgIGlmICh0eXBlb2YgcyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8gQXR0ZW1wdCB0byBwYXJzZSB0aGUgc3RyaW5nIGFzLWlzLlxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKHMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gUGFzc1xuICAgIH1cbiAgICAvLyBJbml0aWFsaXplIHZhcmlhYmxlcy5cbiAgICBsZXQgbmV3X3MgPSBcIlwiO1xuICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgbGV0IGlzSW5zaWRlU3RyaW5nID0gZmFsc2U7XG4gICAgbGV0IGVzY2FwZWQgPSBmYWxzZTtcbiAgICAvLyBQcm9jZXNzIGVhY2ggY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcgb25lIGF0IGEgdGltZS5cbiAgICBmb3IgKGxldCBjaGFyIG9mIHMpIHtcbiAgICAgICAgaWYgKGlzSW5zaWRlU3RyaW5nKSB7XG4gICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1wiJyAmJiAhZXNjYXBlZCkge1xuICAgICAgICAgICAgICAgIGlzSW5zaWRlU3RyaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIlxcblwiICYmICFlc2NhcGVkKSB7XG4gICAgICAgICAgICAgICAgY2hhciA9IFwiXFxcXG5cIjsgLy8gUmVwbGFjZSB0aGUgbmV3bGluZSBjaGFyYWN0ZXIgd2l0aCB0aGUgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJcXFxcXCIpIHtcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2hhciA9PT0gJ1wiJykge1xuICAgICAgICAgICAgICAgIGlzSW5zaWRlU3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGFyID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goXCJ9XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhciA9PT0gXCJbXCIpIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKFwiXVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwifVwiIHx8IGNoYXIgPT09IFwiXVwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrICYmIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdID09PSBjaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTWlzbWF0Y2hlZCBjbG9zaW5nIGNoYXJhY3RlcjsgdGhlIGlucHV0IGlzIG1hbGZvcm1lZC5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEFwcGVuZCB0aGUgcHJvY2Vzc2VkIGNoYXJhY3RlciB0byB0aGUgbmV3IHN0cmluZy5cbiAgICAgICAgbmV3X3MgKz0gY2hhcjtcbiAgICB9XG4gICAgLy8gSWYgd2UncmUgc3RpbGwgaW5zaWRlIGEgc3RyaW5nIGF0IHRoZSBlbmQgb2YgcHJvY2Vzc2luZyxcbiAgICAvLyB3ZSBuZWVkIHRvIGNsb3NlIHRoZSBzdHJpbmcuXG4gICAgaWYgKGlzSW5zaWRlU3RyaW5nKSB7XG4gICAgICAgIG5ld19zICs9ICdcIic7XG4gICAgfVxuICAgIC8vIENsb3NlIGFueSByZW1haW5pbmcgb3BlbiBzdHJ1Y3R1cmVzIGluIHRoZSByZXZlcnNlIG9yZGVyIHRoYXQgdGhleSB3ZXJlIG9wZW5lZC5cbiAgICBmb3IgKGxldCBpID0gc3RhY2subGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgbmV3X3MgKz0gc3RhY2tbaV07XG4gICAgfVxuICAgIC8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIG1vZGlmaWVkIHN0cmluZyBhcyBKU09OLlxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKG5ld19zKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIElmIHdlIHN0aWxsIGNhbid0IHBhcnNlIHRoZSBzdHJpbmcgYXMgSlNPTiwgcmV0dXJuIG51bGwgdG8gaW5kaWNhdGUgZmFpbHVyZS5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbInBhcnNlSnNvbk1hcmtkb3duIiwicyIsInBhcnNlciIsInBhcnNlUGFydGlhbEpzb24iLCJ0cmltIiwibWF0Y2giLCJleGVjIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJuZXdfcyIsInN0YWNrIiwiaXNJbnNpZGVTdHJpbmciLCJlc2NhcGVkIiwiY2hhciIsInB1c2giLCJsZW5ndGgiLCJwb3AiLCJpIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/json_patch.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyPatch: () => (/* reexport safe */ _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.applyPatch),\n/* harmony export */   compare: () => (/* reexport safe */ _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__.compare)\n/* harmony export */ });\n/* harmony import */ var _fast_json_patch_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fast-json-patch/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/fast-json-patch/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvanNvbl9wYXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBa0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZGlzdC91dGlscy9qc29uX3BhdGNoLmpzP2M0YTUiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgY29tcGFyZSwgYXBwbHlQYXRjaCwgfSBmcm9tIFwiLi9mYXN0LWpzb24tcGF0Y2gvaW5kZXguanNcIjtcbiJdLCJuYW1lcyI6WyJjb21wYXJlIiwiYXBwbHlQYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/json_patch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js":
/*!***************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/sax-js/sax.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sax: () => (/* binding */ sax)\n/* harmony export */ });\n// @ts-nocheck\n// Inlined to deal with portability issues\n// Originally from: https://github.com/isaacs/sax-js\nconst initializeSax = function() {\n    const sax = {};\n    sax.parser = function(strict, opt) {\n        return new SAXParser(strict, opt);\n    };\n    sax.SAXParser = SAXParser;\n    sax.SAXStream = SAXStream;\n    sax.createStream = createStream;\n    // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n    // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n    // since that's the earliest that a buffer overrun could occur.  This way, checks are\n    // as rare as required, but as often as necessary to ensure never crossing this bound.\n    // Furthermore, buffers are only tested at most once per write(), so passing a very\n    // large string into write() might have undesirable effects, but this is manageable by\n    // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n    // edge case, result in creating at most one complete copy of the string passed in.\n    // Set to Infinity to have unlimited buffers.\n    sax.MAX_BUFFER_LENGTH = 64 * 1024;\n    const buffers = [\n        \"comment\",\n        \"sgmlDecl\",\n        \"textNode\",\n        \"tagName\",\n        \"doctype\",\n        \"procInstName\",\n        \"procInstBody\",\n        \"entity\",\n        \"attribName\",\n        \"attribValue\",\n        \"cdata\",\n        \"script\"\n    ];\n    sax.EVENTS = [\n        \"text\",\n        \"processinginstruction\",\n        \"sgmldeclaration\",\n        \"doctype\",\n        \"comment\",\n        \"opentagstart\",\n        \"attribute\",\n        \"opentag\",\n        \"closetag\",\n        \"opencdata\",\n        \"cdata\",\n        \"closecdata\",\n        \"error\",\n        \"end\",\n        \"ready\",\n        \"script\",\n        \"opennamespace\",\n        \"closenamespace\"\n    ];\n    function SAXParser(strict, opt) {\n        if (!(this instanceof SAXParser)) {\n            return new SAXParser(strict, opt);\n        }\n        var parser = this;\n        clearBuffers(parser);\n        parser.q = parser.c = \"\";\n        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n        parser.opt = opt || {};\n        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n        parser.looseCase = parser.opt.lowercase ? \"toLowerCase\" : \"toUpperCase\";\n        parser.tags = [];\n        parser.closed = parser.closedRoot = parser.sawRoot = false;\n        parser.tag = parser.error = null;\n        parser.strict = !!strict;\n        parser.noscript = !!(strict || parser.opt.noscript);\n        parser.state = S.BEGIN;\n        parser.strictEntities = parser.opt.strictEntities;\n        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n        parser.attribList = [];\n        // namespaces form a prototype chain.\n        // it always points at the current tag,\n        // which protos to its parent tag.\n        if (parser.opt.xmlns) {\n            parser.ns = Object.create(rootNS);\n        }\n        // mostly just for error reporting\n        parser.trackPosition = parser.opt.position !== false;\n        if (parser.trackPosition) {\n            parser.position = parser.line = parser.column = 0;\n        }\n        emit(parser, \"onready\");\n    }\n    if (!Object.create) {\n        Object.create = function(o) {\n            function F() {}\n            F.prototype = o;\n            var newf = new F();\n            return newf;\n        };\n    }\n    if (!Object.keys) {\n        Object.keys = function(o) {\n            var a = [];\n            for(var i in o)if (o.hasOwnProperty(i)) a.push(i);\n            return a;\n        };\n    }\n    function checkBufferLength(parser) {\n        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n        var maxActual = 0;\n        for(var i = 0, l = buffers.length; i < l; i++){\n            var len = parser[buffers[i]].length;\n            if (len > maxAllowed) {\n                // Text/cdata nodes can get big, and since they're buffered,\n                // we can get here under normal conditions.\n                // Avoid issues by emitting the text node now,\n                // so at least it won't get any bigger.\n                switch(buffers[i]){\n                    case \"textNode\":\n                        closeText(parser);\n                        break;\n                    case \"cdata\":\n                        emitNode(parser, \"oncdata\", parser.cdata);\n                        parser.cdata = \"\";\n                        break;\n                    case \"script\":\n                        emitNode(parser, \"onscript\", parser.script);\n                        parser.script = \"\";\n                        break;\n                    default:\n                        error(parser, \"Max buffer length exceeded: \" + buffers[i]);\n                }\n            }\n            maxActual = Math.max(maxActual, len);\n        }\n        // schedule the next check for the earliest possible buffer overrun.\n        var m = sax.MAX_BUFFER_LENGTH - maxActual;\n        parser.bufferCheckPosition = m + parser.position;\n    }\n    function clearBuffers(parser) {\n        for(var i = 0, l = buffers.length; i < l; i++){\n            parser[buffers[i]] = \"\";\n        }\n    }\n    function flushBuffers(parser) {\n        closeText(parser);\n        if (parser.cdata !== \"\") {\n            emitNode(parser, \"oncdata\", parser.cdata);\n            parser.cdata = \"\";\n        }\n        if (parser.script !== \"\") {\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n    }\n    SAXParser.prototype = {\n        end: function() {\n            end(this);\n        },\n        write: write,\n        resume: function() {\n            this.error = null;\n            return this;\n        },\n        close: function() {\n            return this.write(null);\n        },\n        flush: function() {\n            flushBuffers(this);\n        }\n    };\n    var Stream = ReadableStream;\n    if (!Stream) Stream = function() {};\n    var streamWraps = sax.EVENTS.filter(function(ev) {\n        return ev !== \"error\" && ev !== \"end\";\n    });\n    function createStream(strict, opt) {\n        return new SAXStream(strict, opt);\n    }\n    function SAXStream(strict, opt) {\n        if (!(this instanceof SAXStream)) {\n            return new SAXStream(strict, opt);\n        }\n        Stream.apply(this);\n        this._parser = new SAXParser(strict, opt);\n        this.writable = true;\n        this.readable = true;\n        var me = this;\n        this._parser.onend = function() {\n            me.emit(\"end\");\n        };\n        this._parser.onerror = function(er) {\n            me.emit(\"error\", er);\n            // if didn't throw, then means error was handled.\n            // go ahead and clear error, so we can write again.\n            me._parser.error = null;\n        };\n        this._decoder = null;\n        streamWraps.forEach(function(ev) {\n            Object.defineProperty(me, \"on\" + ev, {\n                get: function() {\n                    return me._parser[\"on\" + ev];\n                },\n                set: function(h) {\n                    if (!h) {\n                        me.removeAllListeners(ev);\n                        me._parser[\"on\" + ev] = h;\n                        return h;\n                    }\n                    me.on(ev, h);\n                },\n                enumerable: true,\n                configurable: false\n            });\n        });\n    }\n    SAXStream.prototype = Object.create(Stream.prototype, {\n        constructor: {\n            value: SAXStream\n        }\n    });\n    SAXStream.prototype.write = function(data) {\n        this._parser.write(data.toString());\n        this.emit(\"data\", data);\n        return true;\n    };\n    SAXStream.prototype.end = function(chunk) {\n        if (chunk && chunk.length) {\n            this.write(chunk);\n        }\n        this._parser.end();\n        return true;\n    };\n    SAXStream.prototype.on = function(ev, handler) {\n        var me = this;\n        if (!me._parser[\"on\" + ev] && streamWraps.indexOf(ev) !== -1) {\n            me._parser[\"on\" + ev] = function() {\n                var args = arguments.length === 1 ? [\n                    arguments[0]\n                ] : Array.apply(null, arguments);\n                args.splice(0, 0, ev);\n                me.emit.apply(me, args);\n            };\n        }\n        return Stream.prototype.on.call(me, ev, handler);\n    };\n    // this really needs to be replaced with character classes.\n    // XML allows all manner of ridiculous numbers and digits.\n    var CDATA = \"[CDATA[\";\n    var DOCTYPE = \"DOCTYPE\";\n    var XML_NAMESPACE = \"http://www.w3.org/XML/1998/namespace\";\n    var XMLNS_NAMESPACE = \"http://www.w3.org/2000/xmlns/\";\n    var rootNS = {\n        xml: XML_NAMESPACE,\n        xmlns: XMLNS_NAMESPACE\n    };\n    // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n    // This implementation works on strings, a single character at a time\n    // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n    // without a significant breaking change to either this  parser, or the\n    // JavaScript language.  Implementation of an emoji-capable xml parser\n    // is left as an exercise for the reader.\n    var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n    var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/;\n    function isWhitespace(c) {\n        return c === \" \" || c === \"\\n\" || c === \"\\r\" || c === \"\t\";\n    }\n    function isQuote(c) {\n        return c === '\"' || c === \"'\";\n    }\n    function isAttribEnd(c) {\n        return c === \">\" || isWhitespace(c);\n    }\n    function isMatch(regex, c) {\n        return regex.test(c);\n    }\n    function notMatch(regex, c) {\n        return !isMatch(regex, c);\n    }\n    var S = 0;\n    sax.STATE = {\n        BEGIN: S++,\n        BEGIN_WHITESPACE: S++,\n        TEXT: S++,\n        TEXT_ENTITY: S++,\n        OPEN_WAKA: S++,\n        SGML_DECL: S++,\n        SGML_DECL_QUOTED: S++,\n        DOCTYPE: S++,\n        DOCTYPE_QUOTED: S++,\n        DOCTYPE_DTD: S++,\n        DOCTYPE_DTD_QUOTED: S++,\n        COMMENT_STARTING: S++,\n        COMMENT: S++,\n        COMMENT_ENDING: S++,\n        COMMENT_ENDED: S++,\n        CDATA: S++,\n        CDATA_ENDING: S++,\n        CDATA_ENDING_2: S++,\n        PROC_INST: S++,\n        PROC_INST_BODY: S++,\n        PROC_INST_ENDING: S++,\n        OPEN_TAG: S++,\n        OPEN_TAG_SLASH: S++,\n        ATTRIB: S++,\n        ATTRIB_NAME: S++,\n        ATTRIB_NAME_SAW_WHITE: S++,\n        ATTRIB_VALUE: S++,\n        ATTRIB_VALUE_QUOTED: S++,\n        ATTRIB_VALUE_CLOSED: S++,\n        ATTRIB_VALUE_UNQUOTED: S++,\n        ATTRIB_VALUE_ENTITY_Q: S++,\n        ATTRIB_VALUE_ENTITY_U: S++,\n        CLOSE_TAG: S++,\n        CLOSE_TAG_SAW_WHITE: S++,\n        SCRIPT: S++,\n        SCRIPT_ENDING: S++\n    };\n    sax.XML_ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\"\n    };\n    sax.ENTITIES = {\n        amp: \"&\",\n        gt: \">\",\n        lt: \"<\",\n        quot: '\"',\n        apos: \"'\",\n        AElig: 198,\n        Aacute: 193,\n        Acirc: 194,\n        Agrave: 192,\n        Aring: 197,\n        Atilde: 195,\n        Auml: 196,\n        Ccedil: 199,\n        ETH: 208,\n        Eacute: 201,\n        Ecirc: 202,\n        Egrave: 200,\n        Euml: 203,\n        Iacute: 205,\n        Icirc: 206,\n        Igrave: 204,\n        Iuml: 207,\n        Ntilde: 209,\n        Oacute: 211,\n        Ocirc: 212,\n        Ograve: 210,\n        Oslash: 216,\n        Otilde: 213,\n        Ouml: 214,\n        THORN: 222,\n        Uacute: 218,\n        Ucirc: 219,\n        Ugrave: 217,\n        Uuml: 220,\n        Yacute: 221,\n        aacute: 225,\n        acirc: 226,\n        aelig: 230,\n        agrave: 224,\n        aring: 229,\n        atilde: 227,\n        auml: 228,\n        ccedil: 231,\n        eacute: 233,\n        ecirc: 234,\n        egrave: 232,\n        eth: 240,\n        euml: 235,\n        iacute: 237,\n        icirc: 238,\n        igrave: 236,\n        iuml: 239,\n        ntilde: 241,\n        oacute: 243,\n        ocirc: 244,\n        ograve: 242,\n        oslash: 248,\n        otilde: 245,\n        ouml: 246,\n        szlig: 223,\n        thorn: 254,\n        uacute: 250,\n        ucirc: 251,\n        ugrave: 249,\n        uuml: 252,\n        yacute: 253,\n        yuml: 255,\n        copy: 169,\n        reg: 174,\n        nbsp: 160,\n        iexcl: 161,\n        cent: 162,\n        pound: 163,\n        curren: 164,\n        yen: 165,\n        brvbar: 166,\n        sect: 167,\n        uml: 168,\n        ordf: 170,\n        laquo: 171,\n        not: 172,\n        shy: 173,\n        macr: 175,\n        deg: 176,\n        plusmn: 177,\n        sup1: 185,\n        sup2: 178,\n        sup3: 179,\n        acute: 180,\n        micro: 181,\n        para: 182,\n        middot: 183,\n        cedil: 184,\n        ordm: 186,\n        raquo: 187,\n        frac14: 188,\n        frac12: 189,\n        frac34: 190,\n        iquest: 191,\n        times: 215,\n        divide: 247,\n        OElig: 338,\n        oelig: 339,\n        Scaron: 352,\n        scaron: 353,\n        Yuml: 376,\n        fnof: 402,\n        circ: 710,\n        tilde: 732,\n        Alpha: 913,\n        Beta: 914,\n        Gamma: 915,\n        Delta: 916,\n        Epsilon: 917,\n        Zeta: 918,\n        Eta: 919,\n        Theta: 920,\n        Iota: 921,\n        Kappa: 922,\n        Lambda: 923,\n        Mu: 924,\n        Nu: 925,\n        Xi: 926,\n        Omicron: 927,\n        Pi: 928,\n        Rho: 929,\n        Sigma: 931,\n        Tau: 932,\n        Upsilon: 933,\n        Phi: 934,\n        Chi: 935,\n        Psi: 936,\n        Omega: 937,\n        alpha: 945,\n        beta: 946,\n        gamma: 947,\n        delta: 948,\n        epsilon: 949,\n        zeta: 950,\n        eta: 951,\n        theta: 952,\n        iota: 953,\n        kappa: 954,\n        lambda: 955,\n        mu: 956,\n        nu: 957,\n        xi: 958,\n        omicron: 959,\n        pi: 960,\n        rho: 961,\n        sigmaf: 962,\n        sigma: 963,\n        tau: 964,\n        upsilon: 965,\n        phi: 966,\n        chi: 967,\n        psi: 968,\n        omega: 969,\n        thetasym: 977,\n        upsih: 978,\n        piv: 982,\n        ensp: 8194,\n        emsp: 8195,\n        thinsp: 8201,\n        zwnj: 8204,\n        zwj: 8205,\n        lrm: 8206,\n        rlm: 8207,\n        ndash: 8211,\n        mdash: 8212,\n        lsquo: 8216,\n        rsquo: 8217,\n        sbquo: 8218,\n        ldquo: 8220,\n        rdquo: 8221,\n        bdquo: 8222,\n        dagger: 8224,\n        Dagger: 8225,\n        bull: 8226,\n        hellip: 8230,\n        permil: 8240,\n        prime: 8242,\n        Prime: 8243,\n        lsaquo: 8249,\n        rsaquo: 8250,\n        oline: 8254,\n        frasl: 8260,\n        euro: 8364,\n        image: 8465,\n        weierp: 8472,\n        real: 8476,\n        trade: 8482,\n        alefsym: 8501,\n        larr: 8592,\n        uarr: 8593,\n        rarr: 8594,\n        darr: 8595,\n        harr: 8596,\n        crarr: 8629,\n        lArr: 8656,\n        uArr: 8657,\n        rArr: 8658,\n        dArr: 8659,\n        hArr: 8660,\n        forall: 8704,\n        part: 8706,\n        exist: 8707,\n        empty: 8709,\n        nabla: 8711,\n        isin: 8712,\n        notin: 8713,\n        ni: 8715,\n        prod: 8719,\n        sum: 8721,\n        minus: 8722,\n        lowast: 8727,\n        radic: 8730,\n        prop: 8733,\n        infin: 8734,\n        ang: 8736,\n        and: 8743,\n        or: 8744,\n        cap: 8745,\n        cup: 8746,\n        int: 8747,\n        there4: 8756,\n        sim: 8764,\n        cong: 8773,\n        asymp: 8776,\n        ne: 8800,\n        equiv: 8801,\n        le: 8804,\n        ge: 8805,\n        sub: 8834,\n        sup: 8835,\n        nsub: 8836,\n        sube: 8838,\n        supe: 8839,\n        oplus: 8853,\n        otimes: 8855,\n        perp: 8869,\n        sdot: 8901,\n        lceil: 8968,\n        rceil: 8969,\n        lfloor: 8970,\n        rfloor: 8971,\n        lang: 9001,\n        rang: 9002,\n        loz: 9674,\n        spades: 9824,\n        clubs: 9827,\n        hearts: 9829,\n        diams: 9830\n    };\n    Object.keys(sax.ENTITIES).forEach(function(key) {\n        var e = sax.ENTITIES[key];\n        var s = typeof e === \"number\" ? String.fromCharCode(e) : e;\n        sax.ENTITIES[key] = s;\n    });\n    for(var s in sax.STATE){\n        sax.STATE[sax.STATE[s]] = s;\n    }\n    // shorthand\n    S = sax.STATE;\n    function emit(parser, event, data) {\n        parser[event] && parser[event](data);\n    }\n    function emitNode(parser, nodeType, data) {\n        if (parser.textNode) closeText(parser);\n        emit(parser, nodeType, data);\n    }\n    function closeText(parser) {\n        parser.textNode = textopts(parser.opt, parser.textNode);\n        if (parser.textNode) emit(parser, \"ontext\", parser.textNode);\n        parser.textNode = \"\";\n    }\n    function textopts(opt, text) {\n        if (opt.trim) text = text.trim();\n        if (opt.normalize) text = text.replace(/\\s+/g, \" \");\n        return text;\n    }\n    function error(parser, er) {\n        closeText(parser);\n        if (parser.trackPosition) {\n            er += \"\\nLine: \" + parser.line + \"\\nColumn: \" + parser.column + \"\\nChar: \" + parser.c;\n        }\n        er = new Error(er);\n        parser.error = er;\n        emit(parser, \"onerror\", er);\n        return parser;\n    }\n    function end(parser) {\n        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, \"Unclosed root tag\");\n        if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n            error(parser, \"Unexpected end\");\n        }\n        closeText(parser);\n        parser.c = \"\";\n        parser.closed = true;\n        emit(parser, \"onend\");\n        SAXParser.call(parser, parser.strict, parser.opt);\n        return parser;\n    }\n    function strictFail(parser, message) {\n        if (typeof parser !== \"object\" || !(parser instanceof SAXParser)) {\n            throw new Error(\"bad call to strictFail\");\n        }\n        if (parser.strict) {\n            error(parser, message);\n        }\n    }\n    function newTag(parser) {\n        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n        var parent = parser.tags[parser.tags.length - 1] || parser;\n        var tag = parser.tag = {\n            name: parser.tagName,\n            attributes: {}\n        };\n        // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n        if (parser.opt.xmlns) {\n            tag.ns = parent.ns;\n        }\n        parser.attribList.length = 0;\n        emitNode(parser, \"onopentagstart\", tag);\n    }\n    function qname(name, attribute) {\n        var i = name.indexOf(\":\");\n        var qualName = i < 0 ? [\n            \"\",\n            name\n        ] : name.split(\":\");\n        var prefix = qualName[0];\n        var local = qualName[1];\n        // <x \"xmlns\"=\"http://foo\">\n        if (attribute && name === \"xmlns\") {\n            prefix = \"xmlns\";\n            local = \"\";\n        }\n        return {\n            prefix: prefix,\n            local: local\n        };\n    }\n    function attrib(parser) {\n        if (!parser.strict) {\n            parser.attribName = parser.attribName[parser.looseCase]();\n        }\n        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n            parser.attribName = parser.attribValue = \"\";\n            return;\n        }\n        if (parser.opt.xmlns) {\n            var qn = qname(parser.attribName, true);\n            var prefix = qn.prefix;\n            var local = qn.local;\n            if (prefix === \"xmlns\") {\n                // namespace binding attribute. push the binding into scope\n                if (local === \"xml\" && parser.attribValue !== XML_NAMESPACE) {\n                    strictFail(parser, \"xml: prefix must be bound to \" + XML_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else if (local === \"xmlns\" && parser.attribValue !== XMLNS_NAMESPACE) {\n                    strictFail(parser, \"xmlns: prefix must be bound to \" + XMLNS_NAMESPACE + \"\\n\" + \"Actual: \" + parser.attribValue);\n                } else {\n                    var tag = parser.tag;\n                    var parent = parser.tags[parser.tags.length - 1] || parser;\n                    if (tag.ns === parent.ns) {\n                        tag.ns = Object.create(parent.ns);\n                    }\n                    tag.ns[local] = parser.attribValue;\n                }\n            }\n            // defer onattribute events until all attributes have been seen\n            // so any new bindings can take effect. preserve attribute order\n            // so deferred events can be emitted in document order\n            parser.attribList.push([\n                parser.attribName,\n                parser.attribValue\n            ]);\n        } else {\n            // in non-xmlns mode, we can emit the event right away\n            parser.tag.attributes[parser.attribName] = parser.attribValue;\n            emitNode(parser, \"onattribute\", {\n                name: parser.attribName,\n                value: parser.attribValue\n            });\n        }\n        parser.attribName = parser.attribValue = \"\";\n    }\n    function openTag(parser, selfClosing) {\n        if (parser.opt.xmlns) {\n            // emit namespace binding events\n            var tag = parser.tag;\n            // add namespace info to tag\n            var qn = qname(parser.tagName);\n            tag.prefix = qn.prefix;\n            tag.local = qn.local;\n            tag.uri = tag.ns[qn.prefix] || \"\";\n            if (tag.prefix && !tag.uri) {\n                strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(parser.tagName));\n                tag.uri = qn.prefix;\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (tag.ns && parent.ns !== tag.ns) {\n                Object.keys(tag.ns).forEach(function(p) {\n                    emitNode(parser, \"onopennamespace\", {\n                        prefix: p,\n                        uri: tag.ns[p]\n                    });\n                });\n            }\n            // handle deferred onattribute events\n            // Note: do not apply default ns to attributes:\n            //   http://www.w3.org/TR/REC-xml-names/#defaulting\n            for(var i = 0, l = parser.attribList.length; i < l; i++){\n                var nv = parser.attribList[i];\n                var name = nv[0];\n                var value = nv[1];\n                var qualName = qname(name, true);\n                var prefix = qualName.prefix;\n                var local = qualName.local;\n                var uri = prefix === \"\" ? \"\" : tag.ns[prefix] || \"\";\n                var a = {\n                    name: name,\n                    value: value,\n                    prefix: prefix,\n                    local: local,\n                    uri: uri\n                };\n                // if there's any attributes with an undefined namespace,\n                // then fail on them now.\n                if (prefix && prefix !== \"xmlns\" && !uri) {\n                    strictFail(parser, \"Unbound namespace prefix: \" + JSON.stringify(prefix));\n                    a.uri = prefix;\n                }\n                parser.tag.attributes[name] = a;\n                emitNode(parser, \"onattribute\", a);\n            }\n            parser.attribList.length = 0;\n        }\n        parser.tag.isSelfClosing = !!selfClosing;\n        // process the tag\n        parser.sawRoot = true;\n        parser.tags.push(parser.tag);\n        emitNode(parser, \"onopentag\", parser.tag);\n        if (!selfClosing) {\n            // special case for <script> in non-strict mode.\n            if (!parser.noscript && parser.tagName.toLowerCase() === \"script\") {\n                parser.state = S.SCRIPT;\n            } else {\n                parser.state = S.TEXT;\n            }\n            parser.tag = null;\n            parser.tagName = \"\";\n        }\n        parser.attribName = parser.attribValue = \"\";\n        parser.attribList.length = 0;\n    }\n    function closeTag(parser) {\n        if (!parser.tagName) {\n            strictFail(parser, \"Weird empty close tag.\");\n            parser.textNode += \"</>\";\n            parser.state = S.TEXT;\n            return;\n        }\n        if (parser.script) {\n            if (parser.tagName !== \"script\") {\n                parser.script += \"</\" + parser.tagName + \">\";\n                parser.tagName = \"\";\n                parser.state = S.SCRIPT;\n                return;\n            }\n            emitNode(parser, \"onscript\", parser.script);\n            parser.script = \"\";\n        }\n        // first make sure that the closing tag actually exists.\n        // <a><b></c></b></a> will close everything, otherwise.\n        var t = parser.tags.length;\n        var tagName = parser.tagName;\n        if (!parser.strict) {\n            tagName = tagName[parser.looseCase]();\n        }\n        var closeTo = tagName;\n        while(t--){\n            var close = parser.tags[t];\n            if (close.name !== closeTo) {\n                // fail the first time in strict mode\n                strictFail(parser, \"Unexpected close tag\");\n            } else {\n                break;\n            }\n        }\n        // didn't find it.  we already failed for strict, so just abort.\n        if (t < 0) {\n            strictFail(parser, \"Unmatched closing tag: \" + parser.tagName);\n            parser.textNode += \"</\" + parser.tagName + \">\";\n            parser.state = S.TEXT;\n            return;\n        }\n        parser.tagName = tagName;\n        var s = parser.tags.length;\n        while(s-- > t){\n            var tag = parser.tag = parser.tags.pop();\n            parser.tagName = parser.tag.name;\n            emitNode(parser, \"onclosetag\", parser.tagName);\n            var x = {};\n            for(var i in tag.ns){\n                x[i] = tag.ns[i];\n            }\n            var parent = parser.tags[parser.tags.length - 1] || parser;\n            if (parser.opt.xmlns && tag.ns !== parent.ns) {\n                // remove namespace bindings introduced by tag\n                Object.keys(tag.ns).forEach(function(p) {\n                    var n = tag.ns[p];\n                    emitNode(parser, \"onclosenamespace\", {\n                        prefix: p,\n                        uri: n\n                    });\n                });\n            }\n        }\n        if (t === 0) parser.closedRoot = true;\n        parser.tagName = parser.attribValue = parser.attribName = \"\";\n        parser.attribList.length = 0;\n        parser.state = S.TEXT;\n    }\n    function parseEntity(parser) {\n        var entity = parser.entity;\n        var entityLC = entity.toLowerCase();\n        var num;\n        var numStr = \"\";\n        if (parser.ENTITIES[entity]) {\n            return parser.ENTITIES[entity];\n        }\n        if (parser.ENTITIES[entityLC]) {\n            return parser.ENTITIES[entityLC];\n        }\n        entity = entityLC;\n        if (entity.charAt(0) === \"#\") {\n            if (entity.charAt(1) === \"x\") {\n                entity = entity.slice(2);\n                num = parseInt(entity, 16);\n                numStr = num.toString(16);\n            } else {\n                entity = entity.slice(1);\n                num = parseInt(entity, 10);\n                numStr = num.toString(10);\n            }\n        }\n        entity = entity.replace(/^0+/, \"\");\n        if (isNaN(num) || numStr.toLowerCase() !== entity) {\n            strictFail(parser, \"Invalid character entity\");\n            return \"&\" + parser.entity + \";\";\n        }\n        return String.fromCodePoint(num);\n    }\n    function beginWhiteSpace(parser, c) {\n        if (c === \"<\") {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n        } else if (!isWhitespace(c)) {\n            // have to process this as a text node.\n            // weird, but happens.\n            strictFail(parser, \"Non-whitespace before first tag.\");\n            parser.textNode = c;\n            parser.state = S.TEXT;\n        }\n    }\n    function charAt(chunk, i) {\n        var result = \"\";\n        if (i < chunk.length) {\n            result = chunk.charAt(i);\n        }\n        return result;\n    }\n    function write(chunk) {\n        var parser = this;\n        if (this.error) {\n            throw this.error;\n        }\n        if (parser.closed) {\n            return error(parser, \"Cannot write after close. Assign an onready handler.\");\n        }\n        if (chunk === null) {\n            return end(parser);\n        }\n        if (typeof chunk === \"object\") {\n            chunk = chunk.toString();\n        }\n        var i = 0;\n        var c = \"\";\n        while(true){\n            c = charAt(chunk, i++);\n            parser.c = c;\n            if (!c) {\n                break;\n            }\n            if (parser.trackPosition) {\n                parser.position++;\n                if (c === \"\\n\") {\n                    parser.line++;\n                    parser.column = 0;\n                } else {\n                    parser.column++;\n                }\n            }\n            switch(parser.state){\n                case S.BEGIN:\n                    parser.state = S.BEGIN_WHITESPACE;\n                    if (c === \"\\uFEFF\") {\n                        continue;\n                    }\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.BEGIN_WHITESPACE:\n                    beginWhiteSpace(parser, c);\n                    continue;\n                case S.TEXT:\n                    if (parser.sawRoot && !parser.closedRoot) {\n                        var starti = i - 1;\n                        while(c && c !== \"<\" && c !== \"&\"){\n                            c = charAt(chunk, i++);\n                            if (c && parser.trackPosition) {\n                                parser.position++;\n                                if (c === \"\\n\") {\n                                    parser.line++;\n                                    parser.column = 0;\n                                } else {\n                                    parser.column++;\n                                }\n                            }\n                        }\n                        parser.textNode += chunk.substring(starti, i - 1);\n                    }\n                    if (c === \"<\" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n                        parser.state = S.OPEN_WAKA;\n                        parser.startTagPosition = parser.position;\n                    } else {\n                        if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n                            strictFail(parser, \"Text data outside of root node.\");\n                        }\n                        if (c === \"&\") {\n                            parser.state = S.TEXT_ENTITY;\n                        } else {\n                            parser.textNode += c;\n                        }\n                    }\n                    continue;\n                case S.SCRIPT:\n                    // only non-strict\n                    if (c === \"<\") {\n                        parser.state = S.SCRIPT_ENDING;\n                    } else {\n                        parser.script += c;\n                    }\n                    continue;\n                case S.SCRIPT_ENDING:\n                    if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                    } else {\n                        parser.script += \"<\" + c;\n                        parser.state = S.SCRIPT;\n                    }\n                    continue;\n                case S.OPEN_WAKA:\n                    // either a /, ?, !, or text is coming next.\n                    if (c === \"!\") {\n                        parser.state = S.SGML_DECL;\n                        parser.sgmlDecl = \"\";\n                    } else if (isWhitespace(c)) {\n                    // wait for it...\n                    } else if (isMatch(nameStart, c)) {\n                        parser.state = S.OPEN_TAG;\n                        parser.tagName = c;\n                    } else if (c === \"/\") {\n                        parser.state = S.CLOSE_TAG;\n                        parser.tagName = \"\";\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST;\n                        parser.procInstName = parser.procInstBody = \"\";\n                    } else {\n                        strictFail(parser, \"Unencoded <\");\n                        // if there was some whitespace, then add that in.\n                        if (parser.startTagPosition + 1 < parser.position) {\n                            var pad = parser.position - parser.startTagPosition;\n                            c = new Array(pad).join(\" \") + c;\n                        }\n                        parser.textNode += \"<\" + c;\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.SGML_DECL:\n                    if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n                        emitNode(parser, \"onopencdata\");\n                        parser.state = S.CDATA;\n                        parser.sgmlDecl = \"\";\n                        parser.cdata = \"\";\n                    } else if (parser.sgmlDecl + c === \"--\") {\n                        parser.state = S.COMMENT;\n                        parser.comment = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n                        parser.state = S.DOCTYPE;\n                        if (parser.doctype || parser.sawRoot) {\n                            strictFail(parser, \"Inappropriately located doctype declaration\");\n                        }\n                        parser.doctype = \"\";\n                        parser.sgmlDecl = \"\";\n                    } else if (c === \">\") {\n                        emitNode(parser, \"onsgmldeclaration\", parser.sgmlDecl);\n                        parser.sgmlDecl = \"\";\n                        parser.state = S.TEXT;\n                    } else if (isQuote(c)) {\n                        parser.state = S.SGML_DECL_QUOTED;\n                        parser.sgmlDecl += c;\n                    } else {\n                        parser.sgmlDecl += c;\n                    }\n                    continue;\n                case S.SGML_DECL_QUOTED:\n                    if (c === parser.q) {\n                        parser.state = S.SGML_DECL;\n                        parser.q = \"\";\n                    }\n                    parser.sgmlDecl += c;\n                    continue;\n                case S.DOCTYPE:\n                    if (c === \">\") {\n                        parser.state = S.TEXT;\n                        emitNode(parser, \"ondoctype\", parser.doctype);\n                        parser.doctype = true; // just remember that we saw it.\n                    } else {\n                        parser.doctype += c;\n                        if (c === \"[\") {\n                            parser.state = S.DOCTYPE_DTD;\n                        } else if (isQuote(c)) {\n                            parser.state = S.DOCTYPE_QUOTED;\n                            parser.q = c;\n                        }\n                    }\n                    continue;\n                case S.DOCTYPE_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.q = \"\";\n                        parser.state = S.DOCTYPE;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD:\n                    parser.doctype += c;\n                    if (c === \"]\") {\n                        parser.state = S.DOCTYPE;\n                    } else if (isQuote(c)) {\n                        parser.state = S.DOCTYPE_DTD_QUOTED;\n                        parser.q = c;\n                    }\n                    continue;\n                case S.DOCTYPE_DTD_QUOTED:\n                    parser.doctype += c;\n                    if (c === parser.q) {\n                        parser.state = S.DOCTYPE_DTD;\n                        parser.q = \"\";\n                    }\n                    continue;\n                case S.COMMENT:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDING;\n                    } else {\n                        parser.comment += c;\n                    }\n                    continue;\n                case S.COMMENT_ENDING:\n                    if (c === \"-\") {\n                        parser.state = S.COMMENT_ENDED;\n                        parser.comment = textopts(parser.opt, parser.comment);\n                        if (parser.comment) {\n                            emitNode(parser, \"oncomment\", parser.comment);\n                        }\n                        parser.comment = \"\";\n                    } else {\n                        parser.comment += \"-\" + c;\n                        parser.state = S.COMMENT;\n                    }\n                    continue;\n                case S.COMMENT_ENDED:\n                    if (c !== \">\") {\n                        strictFail(parser, \"Malformed comment\");\n                        // allow <!-- blah -- bloo --> in non-strict mode,\n                        // which is a comment of \" blah -- bloo \"\n                        parser.comment += \"--\" + c;\n                        parser.state = S.COMMENT;\n                    } else {\n                        parser.state = S.TEXT;\n                    }\n                    continue;\n                case S.CDATA:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING;\n                    } else {\n                        parser.cdata += c;\n                    }\n                    continue;\n                case S.CDATA_ENDING:\n                    if (c === \"]\") {\n                        parser.state = S.CDATA_ENDING_2;\n                    } else {\n                        parser.cdata += \"]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.CDATA_ENDING_2:\n                    if (c === \">\") {\n                        if (parser.cdata) {\n                            emitNode(parser, \"oncdata\", parser.cdata);\n                        }\n                        emitNode(parser, \"onclosecdata\");\n                        parser.cdata = \"\";\n                        parser.state = S.TEXT;\n                    } else if (c === \"]\") {\n                        parser.cdata += \"]\";\n                    } else {\n                        parser.cdata += \"]]\" + c;\n                        parser.state = S.CDATA;\n                    }\n                    continue;\n                case S.PROC_INST:\n                    if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.PROC_INST_BODY;\n                    } else {\n                        parser.procInstName += c;\n                    }\n                    continue;\n                case S.PROC_INST_BODY:\n                    if (!parser.procInstBody && isWhitespace(c)) {\n                        continue;\n                    } else if (c === \"?\") {\n                        parser.state = S.PROC_INST_ENDING;\n                    } else {\n                        parser.procInstBody += c;\n                    }\n                    continue;\n                case S.PROC_INST_ENDING:\n                    if (c === \">\") {\n                        emitNode(parser, \"onprocessinginstruction\", {\n                            name: parser.procInstName,\n                            body: parser.procInstBody\n                        });\n                        parser.procInstName = parser.procInstBody = \"\";\n                        parser.state = S.TEXT;\n                    } else {\n                        parser.procInstBody += \"?\" + c;\n                        parser.state = S.PROC_INST_BODY;\n                    }\n                    continue;\n                case S.OPEN_TAG:\n                    if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else {\n                        newTag(parser);\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (c === \"/\") {\n                            parser.state = S.OPEN_TAG_SLASH;\n                        } else {\n                            if (!isWhitespace(c)) {\n                                strictFail(parser, \"Invalid character in tag name\");\n                            }\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.OPEN_TAG_SLASH:\n                    if (c === \">\") {\n                        openTag(parser, true);\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Forward-slash in opening tag not followed by >\");\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.ATTRIB:\n                    // haven't read the attribute name yet.\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (c === \">\") {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.attribValue = parser.attribName;\n                        attrib(parser);\n                        openTag(parser);\n                    } else if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB_NAME_SAW_WHITE;\n                    } else if (isMatch(nameBody, c)) {\n                        parser.attribName += c;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_NAME_SAW_WHITE:\n                    if (c === \"=\") {\n                        parser.state = S.ATTRIB_VALUE;\n                    } else if (isWhitespace(c)) {\n                        continue;\n                    } else {\n                        strictFail(parser, \"Attribute without value\");\n                        parser.tag.attributes[parser.attribName] = \"\";\n                        parser.attribValue = \"\";\n                        emitNode(parser, \"onattribute\", {\n                            name: parser.attribName,\n                            value: \"\"\n                        });\n                        parser.attribName = \"\";\n                        if (c === \">\") {\n                            openTag(parser);\n                        } else if (isMatch(nameStart, c)) {\n                            parser.attribName = c;\n                            parser.state = S.ATTRIB_NAME;\n                        } else {\n                            strictFail(parser, \"Invalid attribute name\");\n                            parser.state = S.ATTRIB;\n                        }\n                    }\n                    continue;\n                case S.ATTRIB_VALUE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    } else if (isQuote(c)) {\n                        parser.q = c;\n                        parser.state = S.ATTRIB_VALUE_QUOTED;\n                    } else {\n                        strictFail(parser, \"Unquoted attribute value\");\n                        parser.state = S.ATTRIB_VALUE_UNQUOTED;\n                        parser.attribValue = c;\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_QUOTED:\n                    if (c !== parser.q) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    parser.q = \"\";\n                    parser.state = S.ATTRIB_VALUE_CLOSED;\n                    continue;\n                case S.ATTRIB_VALUE_CLOSED:\n                    if (isWhitespace(c)) {\n                        parser.state = S.ATTRIB;\n                    } else if (c === \">\") {\n                        openTag(parser);\n                    } else if (c === \"/\") {\n                        parser.state = S.OPEN_TAG_SLASH;\n                    } else if (isMatch(nameStart, c)) {\n                        strictFail(parser, \"No whitespace between attributes\");\n                        parser.attribName = c;\n                        parser.attribValue = \"\";\n                        parser.state = S.ATTRIB_NAME;\n                    } else {\n                        strictFail(parser, \"Invalid attribute name\");\n                    }\n                    continue;\n                case S.ATTRIB_VALUE_UNQUOTED:\n                    if (!isAttribEnd(c)) {\n                        if (c === \"&\") {\n                            parser.state = S.ATTRIB_VALUE_ENTITY_U;\n                        } else {\n                            parser.attribValue += c;\n                        }\n                        continue;\n                    }\n                    attrib(parser);\n                    if (c === \">\") {\n                        openTag(parser);\n                    } else {\n                        parser.state = S.ATTRIB;\n                    }\n                    continue;\n                case S.CLOSE_TAG:\n                    if (!parser.tagName) {\n                        if (isWhitespace(c)) {\n                            continue;\n                        } else if (notMatch(nameStart, c)) {\n                            if (parser.script) {\n                                parser.script += \"</\" + c;\n                                parser.state = S.SCRIPT;\n                            } else {\n                                strictFail(parser, \"Invalid tagname in closing tag.\");\n                            }\n                        } else {\n                            parser.tagName = c;\n                        }\n                    } else if (c === \">\") {\n                        closeTag(parser);\n                    } else if (isMatch(nameBody, c)) {\n                        parser.tagName += c;\n                    } else if (parser.script) {\n                        parser.script += \"</\" + parser.tagName;\n                        parser.tagName = \"\";\n                        parser.state = S.SCRIPT;\n                    } else {\n                        if (!isWhitespace(c)) {\n                            strictFail(parser, \"Invalid tagname in closing tag\");\n                        }\n                        parser.state = S.CLOSE_TAG_SAW_WHITE;\n                    }\n                    continue;\n                case S.CLOSE_TAG_SAW_WHITE:\n                    if (isWhitespace(c)) {\n                        continue;\n                    }\n                    if (c === \">\") {\n                        closeTag(parser);\n                    } else {\n                        strictFail(parser, \"Invalid characters in closing tag\");\n                    }\n                    continue;\n                case S.TEXT_ENTITY:\n                case S.ATTRIB_VALUE_ENTITY_Q:\n                case S.ATTRIB_VALUE_ENTITY_U:\n                    var returnState;\n                    var buffer;\n                    switch(parser.state){\n                        case S.TEXT_ENTITY:\n                            returnState = S.TEXT;\n                            buffer = \"textNode\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_Q:\n                            returnState = S.ATTRIB_VALUE_QUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                        case S.ATTRIB_VALUE_ENTITY_U:\n                            returnState = S.ATTRIB_VALUE_UNQUOTED;\n                            buffer = \"attribValue\";\n                            break;\n                    }\n                    if (c === \";\") {\n                        if (parser.opt.unparsedEntities) {\n                            var parsedEntity = parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                            parser.write(parsedEntity);\n                        } else {\n                            parser[buffer] += parseEntity(parser);\n                            parser.entity = \"\";\n                            parser.state = returnState;\n                        }\n                    } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n                        parser.entity += c;\n                    } else {\n                        strictFail(parser, \"Invalid character in entity name\");\n                        parser[buffer] += \"&\" + parser.entity + c;\n                        parser.entity = \"\";\n                        parser.state = returnState;\n                    }\n                    continue;\n                default:\n                    /* istanbul ignore next */ {\n                        throw new Error(parser, \"Unknown state: \" + parser.state);\n                    }\n            }\n        } // while\n        if (parser.position >= parser.bufferCheckPosition) {\n            checkBufferLength(parser);\n        }\n        return parser;\n    }\n    /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */ /* istanbul ignore next */ if (!String.fromCodePoint) {\n        (function() {\n            var stringFromCharCode = String.fromCharCode;\n            var floor = Math.floor;\n            var fromCodePoint = function() {\n                var MAX_SIZE = 0x4000;\n                var codeUnits = [];\n                var highSurrogate;\n                var lowSurrogate;\n                var index = -1;\n                var length = arguments.length;\n                if (!length) {\n                    return \"\";\n                }\n                var result = \"\";\n                while(++index < length){\n                    var codePoint = Number(arguments[index]);\n                    if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n                    codePoint < 0 || // not a valid Unicode code point\n                    codePoint > 0x10ffff || // not a valid Unicode code point\n                    floor(codePoint) !== codePoint // not an integer\n                    ) {\n                        throw RangeError(\"Invalid code point: \" + codePoint);\n                    }\n                    if (codePoint <= 0xffff) {\n                        // BMP code point\n                        codeUnits.push(codePoint);\n                    } else {\n                        // Astral code point; split in surrogate halves\n                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n                        codePoint -= 0x10000;\n                        highSurrogate = (codePoint >> 10) + 0xd800;\n                        lowSurrogate = codePoint % 0x400 + 0xdc00;\n                        codeUnits.push(highSurrogate, lowSurrogate);\n                    }\n                    if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n                        result += stringFromCharCode.apply(null, codeUnits);\n                        codeUnits.length = 0;\n                    }\n                }\n                return result;\n            };\n            /* istanbul ignore next */ if (Object.defineProperty) {\n                Object.defineProperty(String, \"fromCodePoint\", {\n                    value: fromCodePoint,\n                    configurable: true,\n                    writable: true\n                });\n            } else {\n                String.fromCodePoint = fromCodePoint;\n            }\n        })();\n    }\n    return sax;\n};\nconst sax = /** #__PURE__ */ initializeSax();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/sax-js/sax.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/signal.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/signal.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   raceWithSignal: () => (/* binding */ raceWithSignal)\n/* harmony export */ });\nasync function raceWithSignal(promise, signal) {\n    if (signal === undefined) {\n        return promise;\n    }\n    let listener;\n    return Promise.race([\n        promise.catch((err)=>{\n            if (!signal?.aborted) {\n                throw err;\n            } else {\n                return undefined;\n            }\n        }),\n        new Promise((_, reject)=>{\n            listener = ()=>{\n                reject(new Error(\"Aborted\"));\n            };\n            signal.addEventListener(\"abort\", listener);\n            // Must be here inside the promise to avoid a race condition\n            if (signal.aborted) {\n                reject(new Error(\"Aborted\"));\n            }\n        })\n    ]).finally(()=>signal.removeEventListener(\"abort\", listener));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvc2lnbmFsLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxlQUFlQSxlQUFlQyxPQUFPLEVBQUVDLE1BQU07SUFDaEQsSUFBSUEsV0FBV0MsV0FBVztRQUN0QixPQUFPRjtJQUNYO0lBQ0EsSUFBSUc7SUFDSixPQUFPQyxRQUFRQyxJQUFJLENBQUM7UUFDaEJMLFFBQVFNLEtBQUssQ0FBQyxDQUFDQztZQUNYLElBQUksQ0FBQ04sUUFBUU8sU0FBUztnQkFDbEIsTUFBTUQ7WUFDVixPQUNLO2dCQUNELE9BQU9MO1lBQ1g7UUFDSjtRQUNBLElBQUlFLFFBQVEsQ0FBQ0ssR0FBR0M7WUFDWlAsV0FBVztnQkFDUE8sT0FBTyxJQUFJQyxNQUFNO1lBQ3JCO1lBQ0FWLE9BQU9XLGdCQUFnQixDQUFDLFNBQVNUO1lBQ2pDLDREQUE0RDtZQUM1RCxJQUFJRixPQUFPTyxPQUFPLEVBQUU7Z0JBQ2hCRSxPQUFPLElBQUlDLE1BQU07WUFDckI7UUFDSjtLQUNILEVBQUVFLE9BQU8sQ0FBQyxJQUFNWixPQUFPYSxtQkFBbUIsQ0FBQyxTQUFTWDtBQUN6RCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9kaXN0L3V0aWxzL3NpZ25hbC5qcz8yOTBjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhc3luYyBmdW5jdGlvbiByYWNlV2l0aFNpZ25hbChwcm9taXNlLCBzaWduYWwpIHtcbiAgICBpZiAoc2lnbmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIGxldCBsaXN0ZW5lcjtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgcHJvbWlzZS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXNpZ25hbD8uYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBuZXcgUHJvbWlzZSgoXywgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiQWJvcnRlZFwiKSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAvLyBNdXN0IGJlIGhlcmUgaW5zaWRlIHRoZSBwcm9taXNlIHRvIGF2b2lkIGEgcmFjZSBjb25kaXRpb25cbiAgICAgICAgICAgIGlmIChzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJBYm9ydGVkXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgXSkuZmluYWxseSgoKSA9PiBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGxpc3RlbmVyKSk7XG59XG4iXSwibmFtZXMiOlsicmFjZVdpdGhTaWduYWwiLCJwcm9taXNlIiwic2lnbmFsIiwidW5kZWZpbmVkIiwibGlzdGVuZXIiLCJQcm9taXNlIiwicmFjZSIsImNhdGNoIiwiZXJyIiwiYWJvcnRlZCIsIl8iLCJyZWplY3QiLCJFcnJvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJmaW5hbGx5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/signal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/stream.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/stream.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsyncGeneratorWithSetup: () => (/* binding */ AsyncGeneratorWithSetup),\n/* harmony export */   IterableReadableStream: () => (/* binding */ IterableReadableStream),\n/* harmony export */   atee: () => (/* binding */ atee),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   pipeGeneratorWithSetup: () => (/* binding */ pipeGeneratorWithSetup)\n/* harmony export */ });\n/* harmony import */ var _runnables_config_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../runnables/config.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/config.js\");\n/* harmony import */ var _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../singletons/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/singletons/index.js\");\n/* harmony import */ var _signal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./signal.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/signal.js\");\n\n\n\n/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */ class IterableReadableStream extends ReadableStream {\n    constructor(){\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined\n                };\n            } else {\n                return {\n                    done: false,\n                    value: result.value\n                };\n            }\n        } catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return {\n            done: true,\n            value: undefined\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start (controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value })=>{\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel () {\n                reader.releaseLock();\n            }\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull (controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel (reason) {\n                await generator.return(reason);\n            }\n        });\n    }\n}\nfunction atee(iter, length = 2) {\n    const buffers = Array.from({\n        length\n    }, ()=>[]);\n    return buffers.map(async function* makeIter(buffer) {\n        while(true){\n            if (buffer.length === 0) {\n                const result = await iter.next();\n                for (const buffer of buffers){\n                    buffer.push(result);\n                }\n            } else if (buffer[0].done) {\n                return;\n            } else {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                yield buffer.shift().value;\n            }\n        }\n    });\n}\nfunction concat(first, second) {\n    if (Array.isArray(first) && Array.isArray(second)) {\n        return first.concat(second);\n    } else if (typeof first === \"string\" && typeof second === \"string\") {\n        return first + second;\n    } else if (typeof first === \"number\" && typeof second === \"number\") {\n        return first + second;\n    } else if (// eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"concat\" in first && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof first.concat === \"function\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return first.concat(second);\n    } else if (typeof first === \"object\" && typeof second === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const chunk = {\n            ...first\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        for (const [key, value] of Object.entries(second)){\n            if (key in chunk && !Array.isArray(chunk[key])) {\n                chunk[key] = concat(chunk[key], value);\n            } else {\n                chunk[key] = value;\n            }\n        }\n        return chunk;\n    } else {\n        throw new Error(`Cannot concat ${typeof first} and ${typeof second}`);\n    }\n}\nclass AsyncGeneratorWithSetup {\n    constructor(params){\n        Object.defineProperty(this, \"generator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"setup\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"config\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"signal\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResult\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"firstResultUsed\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        this.generator = params.generator;\n        this.config = params.config;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.signal = params.signal ?? this.config?.signal;\n        // setup is a promise that resolves only after the first iterator value\n        // is available. this is useful when setup of several piped generators\n        // needs to happen in logical order, ie. in the order in which input to\n        // to each generator is available.\n        this.setup = new Promise((resolve, reject)=>{\n            void _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)(params.config), async ()=>{\n                this.firstResult = params.generator.next();\n                if (params.startSetup) {\n                    this.firstResult.then(params.startSetup).then(resolve, reject);\n                } else {\n                    this.firstResult.then((_result)=>resolve(undefined), reject);\n                }\n            }, true);\n        });\n    }\n    async next(...args) {\n        this.signal?.throwIfAborted();\n        if (!this.firstResultUsed) {\n            this.firstResultUsed = true;\n            return this.firstResult;\n        }\n        return _singletons_index_js__WEBPACK_IMPORTED_MODULE_1__.AsyncLocalStorageProviderSingleton.runWithConfig((0,_runnables_config_js__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)(this.config), this.signal ? async ()=>{\n            return (0,_signal_js__WEBPACK_IMPORTED_MODULE_2__.raceWithSignal)(this.generator.next(...args), this.signal);\n        } : async ()=>{\n            return this.generator.next(...args);\n        }, true);\n    }\n    async return(value) {\n        return this.generator.return(value);\n    }\n    async throw(e) {\n        return this.generator.throw(e);\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n}\nasync function pipeGeneratorWithSetup(to, generator, startSetup, signal, ...args) {\n    const gen = new AsyncGeneratorWithSetup({\n        generator,\n        startSetup,\n        signal\n    });\n    const setup = await gen.setup;\n    return {\n        output: to(gen, setup, ...args),\n        setup\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/tiktoken.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodingForModel: () => (/* binding */ encodingForModel),\n/* harmony export */   getEncoding: () => (/* binding */ getEncoding)\n/* harmony export */ });\n/* harmony import */ var js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-tiktoken/lite */ \"(rsc)/./node_modules/js-tiktoken/dist/lite.js\");\n/* harmony import */ var _async_caller_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./async_caller.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/async_caller.js\");\n\n\nconst cache = {};\nconst caller = /* #__PURE__ */ new _async_caller_js__WEBPACK_IMPORTED_MODULE_1__.AsyncCaller({});\nasync function getEncoding(encoding) {\n    if (!(encoding in cache)) {\n        cache[encoding] = caller.fetch(`https://tiktoken.pages.dev/js/${encoding}.json`).then((res)=>res.json()).then((data)=>new js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.Tiktoken(data)).catch((e)=>{\n            delete cache[encoding];\n            throw e;\n        });\n    }\n    return await cache[encoding];\n}\nasync function encodingForModel(model) {\n    return getEncoding((0,js_tiktoken_lite__WEBPACK_IMPORTED_MODULE_0__.getEncodingNameForModel)(model));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFzRTtBQUN0QjtBQUNoRCxNQUFNRyxRQUFRLENBQUM7QUFDZixNQUFNQyxTQUFTLGFBQWEsR0FBRyxJQUFJRix5REFBV0EsQ0FBQyxDQUFDO0FBQ3pDLGVBQWVHLFlBQVlDLFFBQVE7SUFDdEMsSUFBSSxDQUFFQSxDQUFBQSxZQUFZSCxLQUFJLEdBQUk7UUFDdEJBLEtBQUssQ0FBQ0csU0FBUyxHQUFHRixPQUNiRyxLQUFLLENBQUMsQ0FBQyw4QkFBOEIsRUFBRUQsU0FBUyxLQUFLLENBQUMsRUFDdERFLElBQUksQ0FBQyxDQUFDQyxNQUFRQSxJQUFJQyxJQUFJLElBQ3RCRixJQUFJLENBQUMsQ0FBQ0csT0FBUyxJQUFJWCxzREFBUUEsQ0FBQ1csT0FDNUJDLEtBQUssQ0FBQyxDQUFDQztZQUNSLE9BQU9WLEtBQUssQ0FBQ0csU0FBUztZQUN0QixNQUFNTztRQUNWO0lBQ0o7SUFDQSxPQUFPLE1BQU1WLEtBQUssQ0FBQ0csU0FBUztBQUNoQztBQUNPLGVBQWVRLGlCQUFpQkMsS0FBSztJQUN4QyxPQUFPVixZQUFZSix5RUFBdUJBLENBQUNjO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdGlrdG9rZW4uanM/OGU2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaWt0b2tlbiwgZ2V0RW5jb2RpbmdOYW1lRm9yTW9kZWwsIH0gZnJvbSBcImpzLXRpa3Rva2VuL2xpdGVcIjtcbmltcG9ydCB7IEFzeW5jQ2FsbGVyIH0gZnJvbSBcIi4vYXN5bmNfY2FsbGVyLmpzXCI7XG5jb25zdCBjYWNoZSA9IHt9O1xuY29uc3QgY2FsbGVyID0gLyogI19fUFVSRV9fICovIG5ldyBBc3luY0NhbGxlcih7fSk7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgICBpZiAoIShlbmNvZGluZyBpbiBjYWNoZSkpIHtcbiAgICAgICAgY2FjaGVbZW5jb2RpbmddID0gY2FsbGVyXG4gICAgICAgICAgICAuZmV0Y2goYGh0dHBzOi8vdGlrdG9rZW4ucGFnZXMuZGV2L2pzLyR7ZW5jb2Rpbmd9Lmpzb25gKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiBuZXcgVGlrdG9rZW4oZGF0YSkpXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtlbmNvZGluZ107XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IGNhY2hlW2VuY29kaW5nXTtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmNvZGluZ0Zvck1vZGVsKG1vZGVsKSB7XG4gICAgcmV0dXJuIGdldEVuY29kaW5nKGdldEVuY29kaW5nTmFtZUZvck1vZGVsKG1vZGVsKSk7XG59XG4iXSwibmFtZXMiOlsiVGlrdG9rZW4iLCJnZXRFbmNvZGluZ05hbWVGb3JNb2RlbCIsIkFzeW5jQ2FsbGVyIiwiY2FjaGUiLCJjYWxsZXIiLCJnZXRFbmNvZGluZyIsImVuY29kaW5nIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsImRhdGEiLCJjYXRjaCIsImUiLCJlbmNvZGluZ0Zvck1vZGVsIiwibW9kZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/tiktoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/dist/utils/types/is_zod_schema.js":
/*!************************************************************************!*\
  !*** ./node_modules/@langchain/core/dist/utils/types/is_zod_schema.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isZodSchema: () => (/* binding */ isZodSchema)\n/* harmony export */ });\n/**\n * Given either a Zod schema, or plain object, determine if the input is a Zod schema.\n *\n * @param {z.ZodType<RunOutput> | Record<string, any>} input\n * @returns {boolean} Whether or not the provided input is a Zod schema.\n */ function isZodSchema(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninput) {\n    // Check for a characteristic method of Zod schemas\n    return typeof input?.parse === \"function\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvaXNfem9kX3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7O0NBS0MsR0FDTSxTQUFTQSxZQUNoQiw4REFBOEQ7QUFDOURDLEtBQUs7SUFDRCxtREFBbUQ7SUFDbkQsT0FBTyxPQUFPQSxPQUFPQyxVQUFVO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2Rpc3QvdXRpbHMvdHlwZXMvaXNfem9kX3NjaGVtYS5qcz82OTgwIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2l2ZW4gZWl0aGVyIGEgWm9kIHNjaGVtYSwgb3IgcGxhaW4gb2JqZWN0LCBkZXRlcm1pbmUgaWYgdGhlIGlucHV0IGlzIGEgWm9kIHNjaGVtYS5cbiAqXG4gKiBAcGFyYW0ge3ouWm9kVHlwZTxSdW5PdXRwdXQ+IHwgUmVjb3JkPHN0cmluZywgYW55Pn0gaW5wdXRcbiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcHJvdmlkZWQgaW5wdXQgaXMgYSBab2Qgc2NoZW1hLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNab2RTY2hlbWEoXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuaW5wdXQpIHtcbiAgICAvLyBDaGVjayBmb3IgYSBjaGFyYWN0ZXJpc3RpYyBtZXRob2Qgb2YgWm9kIHNjaGVtYXNcbiAgICByZXR1cm4gdHlwZW9mIGlucHV0Py5wYXJzZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuIl0sIm5hbWVzIjpbImlzWm9kU2NoZW1hIiwiaW5wdXQiLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/dist/utils/types/is_zod_schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/embeddings.js":
/*!****************************************************!*\
  !*** ./node_modules/@langchain/core/embeddings.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Embeddings: () => (/* reexport safe */ _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__.Embeddings)\n/* harmony export */ });\n/* harmony import */ var _dist_embeddings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/embeddings.js */ \"(rsc)/./node_modules/@langchain/core/dist/embeddings.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2VtYmVkZGluZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvZW1iZWRkaW5ncy5qcz9mYTI4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9lbWJlZGRpbmdzLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/base.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/base.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLangChain: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLangChain),\n/* harmony export */   BaseLanguageModel: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.BaseLanguageModel),\n/* harmony export */   calculateMaxTokens: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.calculateMaxTokens),\n/* harmony export */   getEmbeddingContextSize: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getEmbeddingContextSize),\n/* harmony export */   getModelContextSize: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getModelContextSize),\n/* harmony export */   getModelNameForTiktoken: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.getModelNameForTiktoken),\n/* harmony export */   isOpenAITool: () => (/* reexport safe */ _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__.isOpenAITool)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_base_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/base.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/base.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9iYXNlLmpzPzc2NTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9sYW5ndWFnZV9tb2RlbHMvYmFzZS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/chat_models.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/chat_models.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.BaseChatModel),\n/* harmony export */   SimpleChatModel: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.SimpleChatModel),\n/* harmony export */   createChatMessageChunkEncoderStream: () => (/* reexport safe */ _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__.createChatMessageChunkEncoderStream)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/chat_models.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/chat_models.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9jaGF0X21vZGVscy5qcz9jMmFkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvbGFuZ3VhZ2VfbW9kZWxzL2NoYXRfbW9kZWxzLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/language_models/llms.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/core/language_models/llms.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseLLM: () => (/* reexport safe */ _dist_language_models_llms_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLM),\n/* harmony export */   LLM: () => (/* reexport safe */ _dist_language_models_llms_js__WEBPACK_IMPORTED_MODULE_0__.LLM)\n/* harmony export */ });\n/* harmony import */ var _dist_language_models_llms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/language_models/llms.js */ \"(rsc)/./node_modules/@langchain/core/dist/language_models/llms.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL2xhbmd1YWdlX21vZGVscy9sbG1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9sYW5ndWFnZV9tb2RlbHMvbGxtcy5qcz9kMTUxIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4uL2Rpc3QvbGFuZ3VhZ2VfbW9kZWxzL2xsbXMuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/language_models/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/messages.js":
/*!**************************************************!*\
  !*** ./node_modules/@langchain/core/messages.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessage),\n/* harmony export */   AIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk),\n/* harmony export */   BaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessage),\n/* harmony export */   BaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseMessageChunk),\n/* harmony export */   ChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessage),\n/* harmony export */   ChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk),\n/* harmony export */   FunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessage),\n/* harmony export */   FunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk),\n/* harmony export */   HumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessage),\n/* harmony export */   HumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk),\n/* harmony export */   RemoveMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.RemoveMessage),\n/* harmony export */   SystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessage),\n/* harmony export */   SystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk),\n/* harmony export */   ToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessage),\n/* harmony export */   ToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk),\n/* harmony export */   _isMessageFieldWithRole: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._isMessageFieldWithRole),\n/* harmony export */   _mergeDicts: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeDicts),\n/* harmony export */   _mergeLists: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeLists),\n/* harmony export */   _mergeObj: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeObj),\n/* harmony export */   _mergeStatus: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__._mergeStatus),\n/* harmony export */   coerceMessageLikeToMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.coerceMessageLikeToMessage),\n/* harmony export */   convertToChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.convertToChunk),\n/* harmony export */   defaultTextSplitter: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.defaultTextSplitter),\n/* harmony export */   filterMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.filterMessages),\n/* harmony export */   getBufferString: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.getBufferString),\n/* harmony export */   isAIMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessage),\n/* harmony export */   isAIMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isAIMessageChunk),\n/* harmony export */   isBaseMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessage),\n/* harmony export */   isBaseMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isBaseMessageChunk),\n/* harmony export */   isChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isChatMessage),\n/* harmony export */   isChatMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isChatMessageChunk),\n/* harmony export */   isFunctionMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isFunctionMessage),\n/* harmony export */   isFunctionMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isFunctionMessageChunk),\n/* harmony export */   isHumanMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isHumanMessage),\n/* harmony export */   isHumanMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isHumanMessageChunk),\n/* harmony export */   isOpenAIToolCallArray: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isOpenAIToolCallArray),\n/* harmony export */   isSystemMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isSystemMessage),\n/* harmony export */   isSystemMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isSystemMessageChunk),\n/* harmony export */   isToolMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isToolMessage),\n/* harmony export */   isToolMessageChunk: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.isToolMessageChunk),\n/* harmony export */   mapChatMessagesToStoredMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapChatMessagesToStoredMessages),\n/* harmony export */   mapStoredMessageToChatMessage: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessageToChatMessage),\n/* harmony export */   mapStoredMessagesToChatMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mapStoredMessagesToChatMessages),\n/* harmony export */   mergeContent: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeContent),\n/* harmony export */   mergeMessageRuns: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeMessageRuns),\n/* harmony export */   trimMessages: () => (/* reexport safe */ _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__.trimMessages)\n/* harmony export */ });\n/* harmony import */ var _dist_messages_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/messages/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/messages/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL21lc3NhZ2VzLmpzPzgyOTAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L21lc3NhZ2VzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/output_parsers.js":
/*!********************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AsymmetricStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.AsymmetricStructuredOutputParser),\n/* harmony export */   BaseCumulativeTransformOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseCumulativeTransformOutputParser),\n/* harmony export */   BaseLLMOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseLLMOutputParser),\n/* harmony export */   BaseOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseOutputParser),\n/* harmony export */   BaseTransformOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransformOutputParser),\n/* harmony export */   BytesOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.BytesOutputParser),\n/* harmony export */   CommaSeparatedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CommaSeparatedListOutputParser),\n/* harmony export */   CustomListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.CustomListOutputParser),\n/* harmony export */   JsonMarkdownStructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonMarkdownStructuredOutputParser),\n/* harmony export */   JsonOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputParser),\n/* harmony export */   ListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.ListOutputParser),\n/* harmony export */   MarkdownListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.MarkdownListOutputParser),\n/* harmony export */   NumberedListOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.NumberedListOutputParser),\n/* harmony export */   OutputParserException: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.OutputParserException),\n/* harmony export */   StringOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StringOutputParser),\n/* harmony export */   StructuredOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.StructuredOutputParser),\n/* harmony export */   XMLOutputParser: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.XMLOutputParser),\n/* harmony export */   XML_FORMAT_INSTRUCTIONS: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.XML_FORMAT_INSTRUCTIONS),\n/* harmony export */   parseJsonMarkdown: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parseJsonMarkdown),\n/* harmony export */   parsePartialJson: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parsePartialJson),\n/* harmony export */   parseXMLMarkdown: () => (/* reexport safe */ _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__.parseXMLMarkdown)\n/* harmony export */ });\n/* harmony import */ var _dist_output_parsers_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/output_parsers/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnMuanM/MTkzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3Qvb3V0cHV0X3BhcnNlcnMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/output_parsers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@langchain/core/output_parsers/openai_tools.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JsonOutputKeyToolsParser: () => (/* reexport safe */ _dist_output_parsers_openai_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputKeyToolsParser),\n/* harmony export */   JsonOutputToolsParser: () => (/* reexport safe */ _dist_output_parsers_openai_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.JsonOutputToolsParser),\n/* harmony export */   convertLangChainToolCallToOpenAI: () => (/* reexport safe */ _dist_output_parsers_openai_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.convertLangChainToolCallToOpenAI),\n/* harmony export */   makeInvalidToolCall: () => (/* reexport safe */ _dist_output_parsers_openai_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.makeInvalidToolCall),\n/* harmony export */   parseToolCall: () => (/* reexport safe */ _dist_output_parsers_openai_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.parseToolCall)\n/* harmony export */ });\n/* harmony import */ var _dist_output_parsers_openai_tools_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/output_parsers/openai_tools/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/output_parsers/openai_tools/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dF9wYXJzZXJzL29wZW5haV90b29scy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBNEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvb3V0cHV0X3BhcnNlcnMvb3BlbmFpX3Rvb2xzLmpzPzZiMzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC9vdXRwdXRfcGFyc2Vycy9vcGVuYWlfdG9vbHMvaW5kZXguanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/outputs.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/core/outputs.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatGenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.ChatGenerationChunk),\n/* harmony export */   GenerationChunk: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk),\n/* harmony export */   RUN_KEY: () => (/* reexport safe */ _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__.RUN_KEY)\n/* harmony export */ });\n/* harmony import */ var _dist_outputs_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/outputs.js */ \"(rsc)/./node_modules/@langchain/core/dist/outputs.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL291dHB1dHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9vdXRwdXRzLmpzP2FmNDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L291dHB1dHMuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/outputs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/runnables.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/runnables.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RouterRunnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RouterRunnable),\n/* harmony export */   Runnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.Runnable),\n/* harmony export */   RunnableAssign: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableAssign),\n/* harmony export */   RunnableBinding: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBinding),\n/* harmony export */   RunnableBranch: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableBranch),\n/* harmony export */   RunnableEach: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableEach),\n/* harmony export */   RunnableLambda: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableLambda),\n/* harmony export */   RunnableMap: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableMap),\n/* harmony export */   RunnableParallel: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableParallel),\n/* harmony export */   RunnablePassthrough: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePassthrough),\n/* harmony export */   RunnablePick: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnablePick),\n/* harmony export */   RunnableRetry: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableRetry),\n/* harmony export */   RunnableSequence: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableSequence),\n/* harmony export */   RunnableToolLike: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableToolLike),\n/* harmony export */   RunnableWithFallbacks: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithFallbacks),\n/* harmony export */   RunnableWithMessageHistory: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.RunnableWithMessageHistory),\n/* harmony export */   _coerceToRunnable: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__._coerceToRunnable),\n/* harmony export */   ensureConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.ensureConfig),\n/* harmony export */   getCallbackManagerForConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.getCallbackManagerForConfig),\n/* harmony export */   mergeConfigs: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.mergeConfigs),\n/* harmony export */   patchConfig: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.patchConfig),\n/* harmony export */   pickRunnableConfigKeys: () => (/* reexport safe */ _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__.pickRunnableConfigKeys)\n/* harmony export */ });\n/* harmony import */ var _dist_runnables_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/runnables/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/runnables/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3J1bm5hYmxlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS9ydW5uYWJsZXMuanM/N2FiMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rpc3QvcnVubmFibGVzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/runnables.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/tools.js":
/*!***********************************************!*\
  !*** ./node_modules/@langchain/core/tools.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseToolkit: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseToolkit),\n/* harmony export */   DynamicStructuredTool: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.DynamicStructuredTool),\n/* harmony export */   DynamicTool: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.DynamicTool),\n/* harmony export */   StructuredTool: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.StructuredTool),\n/* harmony export */   Tool: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.Tool),\n/* harmony export */   ToolInputParsingException: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.ToolInputParsingException),\n/* harmony export */   tool: () => (/* reexport safe */ _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__.tool)\n/* harmony export */ });\n/* harmony import */ var _dist_tools_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/tools/index.js */ \"(rsc)/./node_modules/@langchain/core/dist/tools/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3Rvb2xzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3Rvb2xzLmpzPzg4ODkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9kaXN0L3Rvb2xzL2luZGV4LmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/chunk_array.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/core/utils/chunk_array.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkArray: () => (/* reexport safe */ _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__.chunkArray)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_chunk_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/chunk_array.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/chunk_array.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2NodW5rX2FycmF5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2NodW5rX2FycmF5LmpzPzVmODIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9jaHVua19hcnJheS5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/env.js":
/*!***************************************************!*\
  !*** ./node_modules/@langchain/core/utils/env.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEnv: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnv),\n/* harmony export */   getEnvironmentVariable: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable),\n/* harmony export */   getRuntimeEnvironment: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.getRuntimeEnvironment),\n/* harmony export */   isBrowser: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isBrowser),\n/* harmony export */   isDeno: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isDeno),\n/* harmony export */   isJsDom: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isJsDom),\n/* harmony export */   isNode: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isNode),\n/* harmony export */   isWebWorker: () => (/* reexport safe */ _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__.isWebWorker)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_env_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/env.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/env.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Vudi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL2NvcmUvdXRpbHMvZW52LmpzPzQ2NzEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9lbnYuanMnIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/core/utils/function_calling.js":
/*!****************************************************************!*\
  !*** ./node_modules/@langchain/core/utils/function_calling.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToOpenAIFunction: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAIFunction),\n/* harmony export */   convertToOpenAITool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAITool),\n/* harmony export */   isLangChainTool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isLangChainTool),\n/* harmony export */   isRunnableToolLike: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isRunnableToolLike),\n/* harmony export */   isStructuredTool: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isStructuredTool),\n/* harmony export */   isStructuredToolParams: () => (/* reexport safe */ _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__.isStructuredToolParams)\n/* harmony export */ });\n/* harmony import */ var _dist_utils_function_calling_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/utils/function_calling.js */ \"(rsc)/./node_modules/@langchain/core/dist/utils/function_calling.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vY29yZS91dGlscy9mdW5jdGlvbl9jYWxsaW5nLmpzPzhjODkiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi4vZGlzdC91dGlscy9mdW5jdGlvbl9jYWxsaW5nLmpzJyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/core/utils/function_calling.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/azure/chat_models.js":
/*!******************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/azure/chat_models.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* binding */ AzureChatOpenAI)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n\n\n\n/**\n * Azure OpenAI chat model integration.\n *\n * Setup:\n * Install `@langchain/openai` and set the following environment variables:\n *\n * ```bash\n * npm install @langchain/openai\n * export AZURE_OPENAI_API_KEY=\"your-api-key\"\n * export AZURE_OPENAI_API_DEPLOYMENT_NAME=\"your-deployment-name\"\n * export AZURE_OPENAI_API_VERSION=\"your-version\"\n * export AZURE_OPENAI_BASE_PATH=\"your-base-path\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_openai.AzureChatOpenAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_openai.ChatOpenAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.bind`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.bind({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { AzureChatOpenAI } from '@langchain/openai';\n *\n * const llm = new AzureChatOpenAI({\n *   azureOpenAIApiKey: process.env.AZURE_OPENAI_API_KEY, // In Node.js defaults to process.env.AZURE_OPENAI_API_KEY\n *   azureOpenAIApiInstanceName: process.env.AZURE_OPENAI_API_INSTANCE_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_INSTANCE_NAME\n *   azureOpenAIApiDeploymentName: process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME, // In Node.js defaults to process.env.AZURE_OPENAI_API_DEPLOYMENT_NAME\n *   azureOpenAIApiVersion: process.env.AZURE_OPENAI_API_VERSION, // In Node.js defaults to process.env.AZURE_OPENAI_API_VERSION\n *   temperature: 0,\n *   maxTokens: undefined,\n *   timeout: undefined,\n *   maxRetries: 2,\n *   // apiKey: \"...\",\n *   // baseUrl: \"...\",\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"chatcmpl-9u4Mpu44CbPjwYFkTbeoZgvzB00Tz\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 5,\n *       \"promptTokens\": 28,\n *       \"totalTokens\": 33\n *     },\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_3aa7262c27\"\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4NWB7yUeHCKdLr6jP3HpaOYHTqs\",\n *   \"content\": \"\"\n * }\n * AIMessageChunk {\n *   \"content\": \"J\"\n * }\n * AIMessageChunk {\n *   \"content\": \"'adore\"\n * }\n * AIMessageChunk {\n *   \"content\": \" la\"\n * }\n * AIMessageChunk {\n *   \"content\": \" programmation\",,\n * }\n * AIMessageChunk {\n *   \"content\": \".\",,\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"response_metadata\": {\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_c9aa9c0491\"\n *   },\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4PnX6Fy7OmK46DASy0bH6cxn5Xu\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"stop\",\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools([GetWeather, GetPopulation]);\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_uPU4FiFzoKAtMxfmPnfQL6UK'\n *   },\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_UNkEwuQsHrGYqgDQuH9nPAtX'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_kL3OXxaq9OjIKqRTpvjaCH14'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_s9KQB1UWj45LLGaEnjz0179q'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, { name: \"Joke\" });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: 'Why was the cat sitting on the computer?',\n *   punchline: 'Because it wanted to keep an eye on the mouse!',\n *   rating: 7\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>JSON Object Response Format</strong></summary>\n *\n * ```typescript\n * const jsonLlm = llm.bind({ response_format: { type: \"json_object\" } });\n * const jsonLlmAiMsg = await jsonLlm.invoke(\n *   \"Return a JSON object with key 'randomInts' and a value of 10 random ints in [0-99]\"\n * );\n * console.log(jsonLlmAiMsg.content);\n * ```\n *\n * ```txt\n * {\n *   \"randomInts\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Multimodal</strong></summary>\n *\n * ```typescript\n * import { HumanMessage } from '@langchain/core/messages';\n *\n * const imageUrl = \"https://example.com/image.jpg\";\n * const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n * const base64Image = Buffer.from(imageData).toString('base64');\n *\n * const message = new HumanMessage({\n *   content: [\n *     { type: \"text\", text: \"describe the weather in this image\" },\n *     {\n *       type: \"image_url\",\n *       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n *     },\n *   ]\n * });\n *\n * const imageDescriptionAiMsg = await llm.invoke([message]);\n * console.log(imageDescriptionAiMsg.content);\n * ```\n *\n * ```txt\n * The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 28, output_tokens: 5, total_tokens: 33 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Logprobs</strong></summary>\n *\n * ```typescript\n * const logprobsLlm = new ChatOpenAI({ logprobs: true });\n * const aiMsgForLogprobs = await logprobsLlm.invoke(input);\n * console.log(aiMsgForLogprobs.response_metadata.logprobs);\n * ```\n *\n * ```txt\n * {\n *   content: [\n *     {\n *       token: 'J',\n *       logprob: -0.000050616763,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: \"'\",\n *       logprob: -0.01868736,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: 'ad',\n *       logprob: -0.0000030545007,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ore', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: ' la',\n *       logprob: -0.515404,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: ' programm',\n *       logprob: -0.0000118755715,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ation', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: '.',\n *       logprob: -0.0000037697225,\n *       bytes: [Array],\n *       top_logprobs: []\n *     }\n *   ],\n *   refusal: null\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   tokenUsage: { completionTokens: 5, promptTokens: 28, totalTokens: 33 },\n *   finish_reason: 'stop',\n *   system_fingerprint: 'fp_3aa7262c27'\n * }\n * ```\n * </details>\n */ class AzureChatOpenAI extends _chat_models_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI {\n    _llmType() {\n        return \"azure_openai\";\n    }\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\",\n            deploymentName: \"deployment_name\",\n            azureOpenAIEndpoint: \"azure_endpoint\",\n            azureOpenAIApiVersion: \"openai_api_version\",\n            azureOpenAIBasePath: \"openai_api_base\",\n            azureOpenAIApiDeploymentName: \"deployment_name\"\n        };\n    }\n    constructor(fields){\n        const newFields = fields ? {\n            ...fields\n        } : fields;\n        if (newFields) {\n            // don't rewrite the fields if they are already set\n            newFields.azureOpenAIApiDeploymentName = newFields.azureOpenAIApiDeploymentName ?? newFields.deploymentName;\n            newFields.azureOpenAIApiKey = newFields.azureOpenAIApiKey ?? newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion = newFields.azureOpenAIApiVersion ?? newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    getLsParams(options) {\n        const params = super.getLsParams(options);\n        params.ls_provider = \"azure\";\n        return params;\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL,\n                azureOpenAIEndpoint: this.azureOpenAIEndpoint\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"] ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n            };\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_2__.AzureOpenAI({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                deployment: this.azureOpenAIApiDeploymentName,\n                ...params\n            });\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n            if (!json.kwargs.azure_endpoint && this.azureOpenAIEndpoint) {\n                json.kwargs.azure_endpoint = this.azureOpenAIEndpoint;\n            }\n            if (!json.kwargs.azure_endpoint && this.azureOpenAIBasePath) {\n                const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n                if (parts.length === 2 && parts[0].startsWith(\"http\")) {\n                    const [endpoint] = parts;\n                    json.kwargs.azure_endpoint = endpoint;\n                }\n            }\n            if (!json.kwargs.azure_endpoint && this.azureOpenAIApiInstanceName) {\n                json.kwargs.azure_endpoint = `https://${this.azureOpenAIApiInstanceName}.openai.azure.com/`;\n            }\n            if (!json.kwargs.deployment_name && this.azureOpenAIApiDeploymentName) {\n                json.kwargs.deployment_name = this.azureOpenAIApiDeploymentName;\n            }\n            if (!json.kwargs.deployment_name && this.azureOpenAIBasePath) {\n                const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n                if (parts.length === 2) {\n                    const [, deployment] = parts;\n                    json.kwargs.deployment_name = deployment;\n                }\n            }\n            if (json.kwargs.azure_endpoint && json.kwargs.deployment_name && json.kwargs.openai_api_base) {\n                delete json.kwargs.openai_api_base;\n            }\n            if (json.kwargs.azure_openai_api_instance_name && json.kwargs.azure_endpoint) {\n                delete json.kwargs.azure_openai_api_instance_name;\n            }\n        }\n        return json;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/azure/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/azure/embeddings.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/azure/embeddings.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* binding */ AzureOpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../embeddings.js */ \"(rsc)/./node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\nclass AzureOpenAIEmbeddings extends _embeddings_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbeddings {\n    constructor(fields, configuration){\n        const newFields = {\n            ...fields\n        };\n        if (Object.entries(newFields).length) {\n            // don't rewrite the fields if they are already set\n            newFields.azureOpenAIApiDeploymentName = newFields.azureOpenAIApiDeploymentName ?? newFields.deploymentName;\n            newFields.azureOpenAIApiKey = newFields.azureOpenAIApiKey ?? newFields.apiKey;\n            newFields.azureOpenAIApiVersion = newFields.azureOpenAIApiVersion ?? newFields.openAIApiVersion;\n        }\n        super(newFields, configuration);\n    }\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"] ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n            };\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_3__.AzureOpenAI({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                deployment: this.azureOpenAIApiDeploymentName,\n                ...params\n            });\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_2__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9henVyZS9lbWJlZGRpbmdzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTJEO0FBQ1A7QUFDSjtBQUNXO0FBQ3BELE1BQU1LLDhCQUE4QkgsNERBQWdCQTtJQUN2REksWUFBWUMsTUFBTSxFQUFFQyxhQUFhLENBQUU7UUFDL0IsTUFBTUMsWUFBWTtZQUFFLEdBQUdGLE1BQU07UUFBQztRQUM5QixJQUFJRyxPQUFPQyxPQUFPLENBQUNGLFdBQVdHLE1BQU0sRUFBRTtZQUNsQyxtREFBbUQ7WUFDbkRILFVBQVVJLDRCQUE0QixHQUNsQ0osVUFBVUksNEJBQTRCLElBQUlKLFVBQVVLLGNBQWM7WUFDdEVMLFVBQVVNLGlCQUFpQixHQUN2Qk4sVUFBVU0saUJBQWlCLElBQUlOLFVBQVVPLE1BQU07WUFDbkRQLFVBQVVRLHFCQUFxQixHQUMzQlIsVUFBVVEscUJBQXFCLElBQUlSLFVBQVVTLGdCQUFnQjtRQUNyRTtRQUNBLEtBQUssQ0FBQ1QsV0FBV0Q7SUFDckI7SUFDQSxNQUFNVyxtQkFBbUJDLE9BQU8sRUFBRTtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDQyxNQUFNLEVBQUU7WUFDZCxNQUFNQyx1QkFBdUI7Z0JBQ3pCVCw4QkFBOEIsSUFBSSxDQUFDQSw0QkFBNEI7Z0JBQy9EVSw0QkFBNEIsSUFBSSxDQUFDQSwwQkFBMEI7Z0JBQzNEUixtQkFBbUIsSUFBSSxDQUFDQSxpQkFBaUI7Z0JBQ3pDUyxxQkFBcUIsSUFBSSxDQUFDQSxtQkFBbUI7Z0JBQzdDQyxzQkFBc0IsSUFBSSxDQUFDQSxvQkFBb0I7Z0JBQy9DQyxTQUFTLElBQUksQ0FBQ0MsWUFBWSxDQUFDRCxPQUFPO1lBQ3RDO1lBQ0EsTUFBTUUsV0FBV3pCLDREQUFXQSxDQUFDbUI7WUFDN0IsTUFBTU8sU0FBUztnQkFDWCxHQUFHLElBQUksQ0FBQ0YsWUFBWTtnQkFDcEJELFNBQVNFO2dCQUNURSxTQUFTLElBQUksQ0FBQ0EsT0FBTztnQkFDckJDLFlBQVk7WUFDaEI7WUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDTixvQkFBb0IsRUFBRTtnQkFDNUJJLE9BQU9iLE1BQU0sR0FBR00scUJBQXFCUCxpQkFBaUI7WUFDMUQ7WUFDQSxJQUFJLENBQUNjLE9BQU9ILE9BQU8sRUFBRTtnQkFDakIsT0FBT0csT0FBT0gsT0FBTztZQUN6QjtZQUNBRyxPQUFPRyxjQUFjLEdBQUc7Z0JBQ3BCLEdBQUdILE9BQU9HLGNBQWM7Z0JBQ3hCLGNBQWNILE9BQU9HLGNBQWMsRUFBRSxDQUFDLGFBQWEsR0FDN0MsQ0FBQyxFQUFFSCxPQUFPRyxjQUFjLENBQUMsYUFBYSxDQUFDLDZCQUE2QixDQUFDLEdBQ3JFLENBQUMsMkJBQTJCLENBQUM7WUFDdkM7WUFDQSxJQUFJLENBQUNYLE1BQU0sR0FBRyxJQUFJcEIsK0NBQWlCQSxDQUFDO2dCQUNoQ2dDLFlBQVksSUFBSSxDQUFDaEIscUJBQXFCO2dCQUN0Q1Esc0JBQXNCLElBQUksQ0FBQ0Esb0JBQW9CO2dCQUMvQ1MsWUFBWSxJQUFJLENBQUNyQiw0QkFBNEI7Z0JBQzdDLEdBQUdnQixNQUFNO1lBQ2I7UUFDSjtRQUNBLE1BQU1NLGlCQUFpQixDQUFDO1FBQ3hCLElBQUksSUFBSSxDQUFDcEIsaUJBQWlCLEVBQUU7WUFDeEJvQixlQUFlQyxPQUFPLEdBQUc7Z0JBQ3JCLFdBQVcsSUFBSSxDQUFDckIsaUJBQWlCO2dCQUNqQyxHQUFHb0IsZUFBZUMsT0FBTztZQUM3QjtZQUNBRCxlQUFlRSxLQUFLLEdBQUc7Z0JBQ25CLGVBQWUsSUFBSSxDQUFDcEIscUJBQXFCO2dCQUN6QyxHQUFHa0IsZUFBZUUsS0FBSztZQUMzQjtRQUNKO1FBQ0EsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDO1lBQ3BCLElBQUk7Z0JBQ0EsTUFBTUMsTUFBTSxNQUFNLElBQUksQ0FBQ25CLE1BQU0sQ0FBQ29CLFVBQVUsQ0FBQ0MsTUFBTSxDQUFDdEIsU0FBU2U7Z0JBQ3pELE9BQU9LO1lBQ1gsRUFDQSxPQUFPRyxHQUFHO2dCQUNOLE1BQU1DLFFBQVF4Qyx1RUFBcUJBLENBQUN1QztnQkFDcEMsTUFBTUM7WUFDVjtRQUNKO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvYXp1cmUvZW1iZWRkaW5ncy5qcz8yZDQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF6dXJlT3BlbkFJIGFzIEF6dXJlT3BlbkFJQ2xpZW50LCB9IGZyb20gXCJvcGVuYWlcIjtcbmltcG9ydCB7IE9wZW5BSUVtYmVkZGluZ3MgfSBmcm9tIFwiLi4vZW1iZWRkaW5ncy5qc1wiO1xuaW1wb3J0IHsgZ2V0RW5kcG9pbnQgfSBmcm9tIFwiLi4vdXRpbHMvYXp1cmUuanNcIjtcbmltcG9ydCB7IHdyYXBPcGVuQUlDbGllbnRFcnJvciB9IGZyb20gXCIuLi91dGlscy9vcGVuYWkuanNcIjtcbmV4cG9ydCBjbGFzcyBBenVyZU9wZW5BSUVtYmVkZGluZ3MgZXh0ZW5kcyBPcGVuQUlFbWJlZGRpbmdzIHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgY29uc3QgbmV3RmllbGRzID0geyAuLi5maWVsZHMgfTtcbiAgICAgICAgaWYgKE9iamVjdC5lbnRyaWVzKG5ld0ZpZWxkcykubGVuZ3RoKSB7XG4gICAgICAgICAgICAvLyBkb24ndCByZXdyaXRlIHRoZSBmaWVsZHMgaWYgdGhleSBhcmUgYWxyZWFkeSBzZXRcbiAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lID1cbiAgICAgICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSA/PyBuZXdGaWVsZHMuZGVwbG95bWVudE5hbWU7XG4gICAgICAgICAgICBuZXdGaWVsZHMuYXp1cmVPcGVuQUlBcGlLZXkgPVxuICAgICAgICAgICAgICAgIG5ld0ZpZWxkcy5henVyZU9wZW5BSUFwaUtleSA/PyBuZXdGaWVsZHMuYXBpS2V5O1xuICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA9XG4gICAgICAgICAgICAgICAgbmV3RmllbGRzLmF6dXJlT3BlbkFJQXBpVmVyc2lvbiA/PyBuZXdGaWVsZHMub3BlbkFJQXBpVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihuZXdGaWVsZHMsIGNvbmZpZ3VyYXRpb24pO1xuICAgIH1cbiAgICBhc3luYyBlbWJlZGRpbmdXaXRoUmV0cnkocmVxdWVzdCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xpZW50KSB7XG4gICAgICAgICAgICBjb25zdCBvcGVuQUlFbmRwb2ludENvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lOiB0aGlzLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUsXG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWU6IHRoaXMuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUsXG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlBcGlLZXk6IHRoaXMuYXp1cmVPcGVuQUlBcGlLZXksXG4gICAgICAgICAgICAgICAgYXp1cmVPcGVuQUlCYXNlUGF0aDogdGhpcy5henVyZU9wZW5BSUJhc2VQYXRoLFxuICAgICAgICAgICAgICAgIGF6dXJlQURUb2tlblByb3ZpZGVyOiB0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIGJhc2VVUkw6IHRoaXMuY2xpZW50Q29uZmlnLmJhc2VVUkwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZW5kcG9pbnQgPSBnZXRFbmRwb2ludChvcGVuQUlFbmRwb2ludENvbmZpZyk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5jbGllbnRDb25maWcsXG4gICAgICAgICAgICAgICAgYmFzZVVSTDogZW5kcG9pbnQsXG4gICAgICAgICAgICAgICAgdGltZW91dDogdGhpcy50aW1lb3V0LFxuICAgICAgICAgICAgICAgIG1heFJldHJpZXM6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCF0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmFwaUtleSA9IG9wZW5BSUVuZHBvaW50Q29uZmlnLmF6dXJlT3BlbkFJQXBpS2V5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwYXJhbXMuYmFzZVVSTCkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBwYXJhbXMuYmFzZVVSTDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmFtcy5kZWZhdWx0SGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICAuLi5wYXJhbXMuZGVmYXVsdEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgXCJVc2VyLUFnZW50XCI6IHBhcmFtcy5kZWZhdWx0SGVhZGVycz8uW1wiVXNlci1BZ2VudFwiXVxuICAgICAgICAgICAgICAgICAgICA/IGAke3BhcmFtcy5kZWZhdWx0SGVhZGVyc1tcIlVzZXItQWdlbnRcIl19OiBsYW5nY2hhaW5qcy1henVyZS1vcGVuYWktdjJgXG4gICAgICAgICAgICAgICAgICAgIDogYGxhbmdjaGFpbmpzLWF6dXJlLW9wZW5haS12MmAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgQXp1cmVPcGVuQUlDbGllbnQoe1xuICAgICAgICAgICAgICAgIGFwaVZlcnNpb246IHRoaXMuYXp1cmVPcGVuQUlBcGlWZXJzaW9uLFxuICAgICAgICAgICAgICAgIGF6dXJlQURUb2tlblByb3ZpZGVyOiB0aGlzLmF6dXJlQURUb2tlblByb3ZpZGVyLFxuICAgICAgICAgICAgICAgIGRlcGxveW1lbnQ6IHRoaXMuYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSxcbiAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXF1ZXN0T3B0aW9ucyA9IHt9O1xuICAgICAgICBpZiAodGhpcy5henVyZU9wZW5BSUFwaUtleSkge1xuICAgICAgICAgICAgcmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgICBcImFwaS1rZXlcIjogdGhpcy5henVyZU9wZW5BSUFwaUtleSxcbiAgICAgICAgICAgICAgICAuLi5yZXF1ZXN0T3B0aW9ucy5oZWFkZXJzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlcXVlc3RPcHRpb25zLnF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIFwiYXBpLXZlcnNpb25cIjogdGhpcy5henVyZU9wZW5BSUFwaVZlcnNpb24sXG4gICAgICAgICAgICAgICAgLi4ucmVxdWVzdE9wdGlvbnMucXVlcnksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxlci5jYWxsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQuZW1iZWRkaW5ncy5jcmVhdGUocmVxdWVzdCwgcmVxdWVzdE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gd3JhcE9wZW5BSUNsaWVudEVycm9yKGUpO1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiQXp1cmVPcGVuQUkiLCJBenVyZU9wZW5BSUNsaWVudCIsIk9wZW5BSUVtYmVkZGluZ3MiLCJnZXRFbmRwb2ludCIsIndyYXBPcGVuQUlDbGllbnRFcnJvciIsIkF6dXJlT3BlbkFJRW1iZWRkaW5ncyIsImNvbnN0cnVjdG9yIiwiZmllbGRzIiwiY29uZmlndXJhdGlvbiIsIm5ld0ZpZWxkcyIsIk9iamVjdCIsImVudHJpZXMiLCJsZW5ndGgiLCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIiwiZGVwbG95bWVudE5hbWUiLCJhenVyZU9wZW5BSUFwaUtleSIsImFwaUtleSIsImF6dXJlT3BlbkFJQXBpVmVyc2lvbiIsIm9wZW5BSUFwaVZlcnNpb24iLCJlbWJlZGRpbmdXaXRoUmV0cnkiLCJyZXF1ZXN0IiwiY2xpZW50Iiwib3BlbkFJRW5kcG9pbnRDb25maWciLCJhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSIsImF6dXJlT3BlbkFJQmFzZVBhdGgiLCJhenVyZUFEVG9rZW5Qcm92aWRlciIsImJhc2VVUkwiLCJjbGllbnRDb25maWciLCJlbmRwb2ludCIsInBhcmFtcyIsInRpbWVvdXQiLCJtYXhSZXRyaWVzIiwiZGVmYXVsdEhlYWRlcnMiLCJhcGlWZXJzaW9uIiwiZGVwbG95bWVudCIsInJlcXVlc3RPcHRpb25zIiwiaGVhZGVycyIsInF1ZXJ5IiwiY2FsbGVyIiwiY2FsbCIsInJlcyIsImVtYmVkZGluZ3MiLCJjcmVhdGUiLCJlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/azure/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/azure/llms.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/azure/llms.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureOpenAI: () => (/* binding */ AzureOpenAI)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../llms.js */ \"(rsc)/./node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n\n\n\nclass AzureOpenAI extends _llms_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI {\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\"\n        };\n    }\n    constructor(fields){\n        const newFields = fields ? {\n            ...fields\n        } : fields;\n        if (newFields) {\n            // don't rewrite the fields if they are already set\n            newFields.azureOpenAIApiDeploymentName = newFields.azureOpenAIApiDeploymentName ?? newFields.deploymentName;\n            newFields.azureOpenAIApiKey = newFields.azureOpenAIApiKey ?? newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion = newFields.azureOpenAIApiVersion ?? newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                azureADTokenProvider: this.azureADTokenProvider,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_1__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!this.azureADTokenProvider) {\n                params.apiKey = openAIEndpointConfig.azureOpenAIApiKey;\n            }\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            params.defaultHeaders = {\n                ...params.defaultHeaders,\n                \"User-Agent\": params.defaultHeaders?.[\"User-Agent\"] ? `${params.defaultHeaders[\"User-Agent\"]}: langchainjs-azure-openai-v2` : `langchainjs-azure-openai-v2`\n            };\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_2__.AzureOpenAI({\n                apiVersion: this.azureOpenAIApiVersion,\n                azureADTokenProvider: this.azureADTokenProvider,\n                ...params\n            });\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n        }\n        return json;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/azure/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/chat_models.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/chat_models.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatOpenAI: () => (/* binding */ ChatOpenAI),\n/* harmony export */   _convertMessagesToOpenAIParams: () => (/* binding */ _convertMessagesToOpenAIParams),\n/* harmony export */   messageToOpenAIRole: () => (/* binding */ messageToOpenAIRole)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/messages */ \"(rsc)/./node_modules/@langchain/core/messages.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/chat_models */ \"(rsc)/./node_modules/@langchain/core/language_models/chat_models.js\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @langchain/core/runnables */ \"(rsc)/./node_modules/@langchain/core/runnables.js\");\n/* harmony import */ var _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @langchain/core/output_parsers */ \"(rsc)/./node_modules/@langchain/core/output_parsers.js\");\n/* harmony import */ var _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @langchain/core/output_parsers/openai_tools */ \"(rsc)/./node_modules/@langchain/core/output_parsers/openai_tools.js\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var openai_helpers_zod__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! openai/helpers/zod */ \"(rsc)/./node_modules/openai/helpers/zod.mjs\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n/* harmony import */ var _utils_openai_format_fndef_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/openai-format-fndef.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js\");\n/* harmony import */ var _utils_tools_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/tools.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/tools.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction extractGenericMessageCustomRole(message) {\n    if (message.role !== \"system\" && message.role !== \"developer\" && message.role !== \"assistant\" && message.role !== \"user\" && message.role !== \"function\" && message.role !== \"tool\") {\n        console.warn(`Unknown message role: ${message.role}`);\n    }\n    return message.role;\n}\nfunction messageToOpenAIRole(message) {\n    const type = message._getType();\n    switch(type){\n        case \"system\":\n            return \"system\";\n        case \"ai\":\n            return \"assistant\";\n        case \"human\":\n            return \"user\";\n        case \"function\":\n            return \"function\";\n        case \"tool\":\n            return \"tool\";\n        case \"generic\":\n            {\n                if (!_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage.isInstance(message)) throw new Error(\"Invalid generic chat message\");\n                return extractGenericMessageCustomRole(message);\n            }\n        default:\n            throw new Error(`Unknown message type: ${type}`);\n    }\n}\nfunction openAIResponseToChatMessage(message, rawResponse, includeRawResponse) {\n    const rawToolCalls = message.tool_calls;\n    switch(message.role){\n        case \"assistant\":\n            {\n                const toolCalls = [];\n                const invalidToolCalls = [];\n                for (const rawToolCall of rawToolCalls ?? []){\n                    try {\n                        toolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.parseToolCall)(rawToolCall, {\n                            returnId: true\n                        }));\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    } catch (e) {\n                        invalidToolCalls.push((0,_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.makeInvalidToolCall)(rawToolCall, e.message));\n                    }\n                }\n                const additional_kwargs = {\n                    function_call: message.function_call,\n                    tool_calls: rawToolCalls\n                };\n                if (includeRawResponse !== undefined) {\n                    additional_kwargs.__raw_response = rawResponse;\n                }\n                const response_metadata = {\n                    model_name: rawResponse.model,\n                    ...rawResponse.system_fingerprint ? {\n                        usage: {\n                            ...rawResponse.usage\n                        },\n                        system_fingerprint: rawResponse.system_fingerprint\n                    } : {}\n                };\n                if (message.audio) {\n                    additional_kwargs.audio = message.audio;\n                }\n                return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage({\n                    content: message.content || \"\",\n                    tool_calls: toolCalls,\n                    invalid_tool_calls: invalidToolCalls,\n                    additional_kwargs,\n                    response_metadata,\n                    id: rawResponse.id\n                });\n            }\n        default:\n            return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessage(message.content || \"\", message.role ?? \"unknown\");\n    }\n}\nfunction _convertDeltaToMessageChunk(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndelta, rawResponse, defaultRole, includeRawResponse) {\n    const role = delta.role ?? defaultRole;\n    const content = delta.content ?? \"\";\n    let additional_kwargs;\n    if (delta.function_call) {\n        additional_kwargs = {\n            function_call: delta.function_call\n        };\n    } else if (delta.tool_calls) {\n        additional_kwargs = {\n            tool_calls: delta.tool_calls\n        };\n    } else {\n        additional_kwargs = {};\n    }\n    if (includeRawResponse) {\n        additional_kwargs.__raw_response = rawResponse;\n    }\n    if (delta.audio) {\n        additional_kwargs.audio = {\n            ...delta.audio,\n            index: rawResponse.choices[0].index\n        };\n    }\n    const response_metadata = {\n        usage: {\n            ...rawResponse.usage\n        }\n    };\n    if (role === \"user\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.HumanMessageChunk({\n            content,\n            response_metadata\n        });\n    } else if (role === \"assistant\") {\n        const toolCallChunks = [];\n        if (Array.isArray(delta.tool_calls)) {\n            for (const rawToolCall of delta.tool_calls){\n                toolCallChunks.push({\n                    name: rawToolCall.function?.name,\n                    args: rawToolCall.function?.arguments,\n                    id: rawToolCall.id,\n                    index: rawToolCall.index,\n                    type: \"tool_call_chunk\"\n                });\n            }\n        }\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n            content,\n            tool_call_chunks: toolCallChunks,\n            additional_kwargs,\n            id: rawResponse.id,\n            response_metadata\n        });\n    } else if (role === \"system\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk({\n            content,\n            response_metadata\n        });\n    } else if (role === \"developer\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.SystemMessageChunk({\n            content,\n            response_metadata,\n            additional_kwargs: {\n                __openai_role__: \"developer\"\n            }\n        });\n    } else if (role === \"function\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.FunctionMessageChunk({\n            content,\n            additional_kwargs,\n            name: delta.name,\n            response_metadata\n        });\n    } else if (role === \"tool\") {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ToolMessageChunk({\n            content,\n            additional_kwargs,\n            tool_call_id: delta.tool_call_id,\n            response_metadata\n        });\n    } else {\n        return new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.ChatMessageChunk({\n            content,\n            role,\n            response_metadata\n        });\n    }\n}\n// Used in LangSmith, export is important here\nfunction _convertMessagesToOpenAIParams(messages, model) {\n    // TODO: Function messages do not support array content, fix cast\n    return messages.flatMap((message)=>{\n        let role = messageToOpenAIRole(message);\n        if (role === \"system\" && model?.startsWith(\"o1\")) {\n            role = \"developer\";\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const completionParam = {\n            role,\n            content: message.content\n        };\n        if (message.name != null) {\n            completionParam.name = message.name;\n        }\n        if (message.additional_kwargs.function_call != null) {\n            completionParam.function_call = message.additional_kwargs.function_call;\n            completionParam.content = null;\n        }\n        if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isAIMessage)(message) && !!message.tool_calls?.length) {\n            completionParam.tool_calls = message.tool_calls.map(_langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.convertLangChainToolCallToOpenAI);\n            completionParam.content = null;\n        } else {\n            if (message.additional_kwargs.tool_calls != null) {\n                completionParam.tool_calls = message.additional_kwargs.tool_calls;\n            }\n            if (message.tool_call_id != null) {\n                completionParam.tool_call_id = message.tool_call_id;\n            }\n        }\n        if (message.additional_kwargs.audio && typeof message.additional_kwargs.audio === \"object\" && \"id\" in message.additional_kwargs.audio) {\n            const audioMessage = {\n                role: \"assistant\",\n                audio: {\n                    id: message.additional_kwargs.audio.id\n                }\n            };\n            return [\n                completionParam,\n                audioMessage\n            ];\n        }\n        return completionParam;\n    });\n}\nfunction _convertChatOpenAIToolTypeToOpenAITool(tool, fields) {\n    if ((0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_4__.isOpenAITool)(tool)) {\n        if (fields?.strict !== undefined) {\n            return {\n                ...tool,\n                function: {\n                    ...tool.function,\n                    strict: fields.strict\n                }\n            };\n        }\n        return tool;\n    }\n    return (0,_utils_tools_js__WEBPACK_IMPORTED_MODULE_12__._convertToOpenAITool)(tool, fields);\n}\n/**\n * OpenAI chat model integration.\n *\n * Setup:\n * Install `@langchain/openai` and set an environment variable named `OPENAI_API_KEY`.\n *\n * ```bash\n * npm install @langchain/openai\n * export OPENAI_API_KEY=\"your-api-key\"\n * ```\n *\n * ## [Constructor args](https://api.js.langchain.com/classes/langchain_openai.ChatOpenAI.html#constructor)\n *\n * ## [Runtime args](https://api.js.langchain.com/interfaces/langchain_openai.ChatOpenAICallOptions.html)\n *\n * Runtime args can be passed as the second argument to any of the base runnable methods `.invoke`. `.stream`, `.batch`, etc.\n * They can also be passed via `.bind`, or the second arg in `.bindTools`, like shown in the examples below:\n *\n * ```typescript\n * // When calling `.bind`, call options should be passed via the first argument\n * const llmWithArgsBound = llm.bind({\n *   stop: [\"\\n\"],\n *   tools: [...],\n * });\n *\n * // When calling `.bindTools`, call options should be passed via the second argument\n * const llmWithTools = llm.bindTools(\n *   [...],\n *   {\n *     tool_choice: \"auto\",\n *   }\n * );\n * ```\n *\n * ## Examples\n *\n * <details open>\n * <summary><strong>Instantiate</strong></summary>\n *\n * ```typescript\n * import { ChatOpenAI } from '@langchain/openai';\n *\n * const llm = new ChatOpenAI({\n *   model: \"gpt-4o\",\n *   temperature: 0,\n *   maxTokens: undefined,\n *   timeout: undefined,\n *   maxRetries: 2,\n *   // apiKey: \"...\",\n *   // baseUrl: \"...\",\n *   // organization: \"...\",\n *   // other params...\n * });\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Invoking</strong></summary>\n *\n * ```typescript\n * const input = `Translate \"I love programming\" into French.`;\n *\n * // Models also accept a list of chat messages or a formatted prompt\n * const result = await llm.invoke(input);\n * console.log(result);\n * ```\n *\n * ```txt\n * AIMessage {\n *   \"id\": \"chatcmpl-9u4Mpu44CbPjwYFkTbeoZgvzB00Tz\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"tokenUsage\": {\n *       \"completionTokens\": 5,\n *       \"promptTokens\": 28,\n *       \"totalTokens\": 33\n *     },\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_3aa7262c27\"\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Streaming Chunks</strong></summary>\n *\n * ```typescript\n * for await (const chunk of await llm.stream(input)) {\n *   console.log(chunk);\n * }\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4NWB7yUeHCKdLr6jP3HpaOYHTqs\",\n *   \"content\": \"\"\n * }\n * AIMessageChunk {\n *   \"content\": \"J\"\n * }\n * AIMessageChunk {\n *   \"content\": \"'adore\"\n * }\n * AIMessageChunk {\n *   \"content\": \" la\"\n * }\n * AIMessageChunk {\n *   \"content\": \" programmation\",,\n * }\n * AIMessageChunk {\n *   \"content\": \".\",,\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"response_metadata\": {\n *     \"finish_reason\": \"stop\",\n *     \"system_fingerprint\": \"fp_c9aa9c0491\"\n *   },\n * }\n * AIMessageChunk {\n *   \"content\": \"\",\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Aggregate Streamed Chunks</strong></summary>\n *\n * ```typescript\n * import { AIMessageChunk } from '@langchain/core/messages';\n * import { concat } from '@langchain/core/utils/stream';\n *\n * const stream = await llm.stream(input);\n * let full: AIMessageChunk | undefined;\n * for await (const chunk of stream) {\n *   full = !full ? chunk : concat(full, chunk);\n * }\n * console.log(full);\n * ```\n *\n * ```txt\n * AIMessageChunk {\n *   \"id\": \"chatcmpl-9u4PnX6Fy7OmK46DASy0bH6cxn5Xu\",\n *   \"content\": \"J'adore la programmation.\",\n *   \"response_metadata\": {\n *     \"prompt\": 0,\n *     \"completion\": 0,\n *     \"finish_reason\": \"stop\",\n *   },\n *   \"usage_metadata\": {\n *     \"input_tokens\": 28,\n *     \"output_tokens\": 5,\n *     \"total_tokens\": 33\n *   }\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Bind tools</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const GetWeather = {\n *   name: \"GetWeather\",\n *   description: \"Get the current weather in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const GetPopulation = {\n *   name: \"GetPopulation\",\n *   description: \"Get the current population in a given location\",\n *   schema: z.object({\n *     location: z.string().describe(\"The city and state, e.g. San Francisco, CA\")\n *   }),\n * }\n *\n * const llmWithTools = llm.bindTools(\n *   [GetWeather, GetPopulation],\n *   {\n *     // strict: true  // enforce tool args schema is respected\n *   }\n * );\n * const aiMsg = await llmWithTools.invoke(\n *   \"Which city is hotter today and which is bigger: LA or NY?\"\n * );\n * console.log(aiMsg.tool_calls);\n * ```\n *\n * ```txt\n * [\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_uPU4FiFzoKAtMxfmPnfQL6UK'\n *   },\n *   {\n *     name: 'GetWeather',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_UNkEwuQsHrGYqgDQuH9nPAtX'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'Los Angeles, CA' },\n *     type: 'tool_call',\n *     id: 'call_kL3OXxaq9OjIKqRTpvjaCH14'\n *   },\n *   {\n *     name: 'GetPopulation',\n *     args: { location: 'New York, NY' },\n *     type: 'tool_call',\n *     id: 'call_s9KQB1UWj45LLGaEnjz0179q'\n *   }\n * ]\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Structured Output</strong></summary>\n *\n * ```typescript\n * import { z } from 'zod';\n *\n * const Joke = z.object({\n *   setup: z.string().describe(\"The setup of the joke\"),\n *   punchline: z.string().describe(\"The punchline to the joke\"),\n *   rating: z.number().optional().describe(\"How funny the joke is, from 1 to 10\")\n * }).describe('Joke to tell user.');\n *\n * const structuredLlm = llm.withStructuredOutput(Joke, {\n *   name: \"Joke\",\n *   strict: true, // Optionally enable OpenAI structured outputs\n * });\n * const jokeResult = await structuredLlm.invoke(\"Tell me a joke about cats\");\n * console.log(jokeResult);\n * ```\n *\n * ```txt\n * {\n *   setup: 'Why was the cat sitting on the computer?',\n *   punchline: 'Because it wanted to keep an eye on the mouse!',\n *   rating: 7\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>JSON Object Response Format</strong></summary>\n *\n * ```typescript\n * const jsonLlm = llm.bind({ response_format: { type: \"json_object\" } });\n * const jsonLlmAiMsg = await jsonLlm.invoke(\n *   \"Return a JSON object with key 'randomInts' and a value of 10 random ints in [0-99]\"\n * );\n * console.log(jsonLlmAiMsg.content);\n * ```\n *\n * ```txt\n * {\n *   \"randomInts\": [23, 87, 45, 12, 78, 34, 56, 90, 11, 67]\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Multimodal</strong></summary>\n *\n * ```typescript\n * import { HumanMessage } from '@langchain/core/messages';\n *\n * const imageUrl = \"https://example.com/image.jpg\";\n * const imageData = await fetch(imageUrl).then(res => res.arrayBuffer());\n * const base64Image = Buffer.from(imageData).toString('base64');\n *\n * const message = new HumanMessage({\n *   content: [\n *     { type: \"text\", text: \"describe the weather in this image\" },\n *     {\n *       type: \"image_url\",\n *       image_url: { url: `data:image/jpeg;base64,${base64Image}` },\n *     },\n *   ]\n * });\n *\n * const imageDescriptionAiMsg = await llm.invoke([message]);\n * console.log(imageDescriptionAiMsg.content);\n * ```\n *\n * ```txt\n * The weather in the image appears to be clear and sunny. The sky is mostly blue with a few scattered white clouds, indicating fair weather. The bright sunlight is casting shadows on the green, grassy hill, suggesting it is a pleasant day with good visibility. There are no signs of rain or stormy conditions.\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Usage Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForMetadata = await llm.invoke(input);\n * console.log(aiMsgForMetadata.usage_metadata);\n * ```\n *\n * ```txt\n * { input_tokens: 28, output_tokens: 5, total_tokens: 33 }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Logprobs</strong></summary>\n *\n * ```typescript\n * const logprobsLlm = new ChatOpenAI({ logprobs: true });\n * const aiMsgForLogprobs = await logprobsLlm.invoke(input);\n * console.log(aiMsgForLogprobs.response_metadata.logprobs);\n * ```\n *\n * ```txt\n * {\n *   content: [\n *     {\n *       token: 'J',\n *       logprob: -0.000050616763,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: \"'\",\n *       logprob: -0.01868736,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: 'ad',\n *       logprob: -0.0000030545007,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ore', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: ' la',\n *       logprob: -0.515404,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     {\n *       token: ' programm',\n *       logprob: -0.0000118755715,\n *       bytes: [Array],\n *       top_logprobs: []\n *     },\n *     { token: 'ation', logprob: 0, bytes: [Array], top_logprobs: [] },\n *     {\n *       token: '.',\n *       logprob: -0.0000037697225,\n *       bytes: [Array],\n *       top_logprobs: []\n *     }\n *   ],\n *   refusal: null\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Response Metadata</strong></summary>\n *\n * ```typescript\n * const aiMsgForResponseMetadata = await llm.invoke(input);\n * console.log(aiMsgForResponseMetadata.response_metadata);\n * ```\n *\n * ```txt\n * {\n *   tokenUsage: { completionTokens: 5, promptTokens: 28, totalTokens: 33 },\n *   finish_reason: 'stop',\n *   system_fingerprint: 'fp_3aa7262c27'\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>JSON Schema Structured Output</strong></summary>\n *\n * ```typescript\n * const llmForJsonSchema = new ChatOpenAI({\n *   model: \"gpt-4o-2024-08-06\",\n * }).withStructuredOutput(\n *   z.object({\n *     command: z.string().describe(\"The command to execute\"),\n *     expectedOutput: z.string().describe(\"The expected output of the command\"),\n *     options: z\n *       .array(z.string())\n *       .describe(\"The options you can pass to the command\"),\n *   }),\n *   {\n *     method: \"jsonSchema\",\n *     strict: true, // Optional when using the `jsonSchema` method\n *   }\n * );\n *\n * const jsonSchemaRes = await llmForJsonSchema.invoke(\n *   \"What is the command to list files in a directory?\"\n * );\n * console.log(jsonSchemaRes);\n * ```\n *\n * ```txt\n * {\n *   command: 'ls',\n *   expectedOutput: 'A list of files and subdirectories within the specified directory.',\n *   options: [\n *     '-a: include directory entries whose names begin with a dot (.).',\n *     '-l: use a long listing format.',\n *     '-h: with -l, print sizes in human readable format (e.g., 1K, 234M, 2G).',\n *     '-t: sort by time, newest first.',\n *     '-r: reverse order while sorting.',\n *     '-S: sort by file size, largest first.',\n *     '-R: list subdirectories recursively.'\n *   ]\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Audio Outputs</strong></summary>\n *\n * ```typescript\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * const modelWithAudioOutput = new ChatOpenAI({\n *   model: \"gpt-4o-audio-preview\",\n *   // You may also pass these fields to `.bind` as a call argument.\n *   modalities: [\"text\", \"audio\"], // Specifies that the model should output audio.\n *   audio: {\n *     voice: \"alloy\",\n *     format: \"wav\",\n *   },\n * });\n *\n * const audioOutputResult = await modelWithAudioOutput.invoke(\"Tell me a joke about cats.\");\n * const castMessageContent = audioOutputResult.content[0] as Record<string, any>;\n *\n * console.log({\n *   ...castMessageContent,\n *   data: castMessageContent.data.slice(0, 100) // Sliced for brevity\n * })\n * ```\n *\n * ```txt\n * {\n *   id: 'audio_67117718c6008190a3afad3e3054b9b6',\n *   data: 'UklGRqYwBgBXQVZFZm10IBAAAAABAAEAwF0AAIC7AAACABAATElTVBoAAABJTkZPSVNGVA4AAABMYXZmNTguMjkuMTAwAGRhdGFg',\n *   expires_at: 1729201448,\n *   transcript: 'Sure! Why did the cat sit on the computer? Because it wanted to keep an eye on the mouse!'\n * }\n * ```\n * </details>\n *\n * <br />\n *\n * <details>\n * <summary><strong>Audio Outputs</strong></summary>\n *\n * ```typescript\n * import { ChatOpenAI } from \"@langchain/openai\";\n *\n * const modelWithAudioOutput = new ChatOpenAI({\n *   model: \"gpt-4o-audio-preview\",\n *   // You may also pass these fields to `.bind` as a call argument.\n *   modalities: [\"text\", \"audio\"], // Specifies that the model should output audio.\n *   audio: {\n *     voice: \"alloy\",\n *     format: \"wav\",\n *   },\n * });\n *\n * const audioOutputResult = await modelWithAudioOutput.invoke(\"Tell me a joke about cats.\");\n * const castAudioContent = audioOutputResult.additional_kwargs.audio as Record<string, any>;\n *\n * console.log({\n *   ...castAudioContent,\n *   data: castAudioContent.data.slice(0, 100) // Sliced for brevity\n * })\n * ```\n *\n * ```txt\n * {\n *   id: 'audio_67117718c6008190a3afad3e3054b9b6',\n *   data: 'UklGRqYwBgBXQVZFZm10IBAAAAABAAEAwF0AAIC7AAACABAATElTVBoAAABJTkZPSVNGVA4AAABMYXZmNTguMjkuMTAwAGRhdGFg',\n *   expires_at: 1729201448,\n *   transcript: 'Sure! Why did the cat sit on the computer? Because it wanted to keep an eye on the mouse!'\n * }\n * ```\n * </details>\n *\n * <br />\n */ class ChatOpenAI extends _langchain_core_language_models_chat_models__WEBPACK_IMPORTED_MODULE_3__.BaseChatModel {\n    static lc_name() {\n        return \"ChatOpenAI\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\",\n            \"function_call\",\n            \"functions\",\n            \"tools\",\n            \"tool_choice\",\n            \"promptIndex\",\n            \"response_format\",\n            \"seed\",\n            \"reasoning_effort\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            apiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            apiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"streamUsage\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"topLogprobs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIEndpoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"__includeRawResponse\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Whether the model supports the `strict` argument when passing in tools.\n         * If `undefined` the `strict` argument will not be passed to OpenAI.\n         */ Object.defineProperty(this, \"supportsStrictToolCalling\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"audio\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modalities\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reasoningEffort\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? fields?.configuration?.apiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.apiKey = this.openAIApiKey;\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider ?? undefined;\n        if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"OpenAI or Azure OpenAI API key or Token Provider not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = fields?.azureOpenAIApiDeploymentName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\");\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.azureOpenAIEndpoint = fields?.azureOpenAIEndpoint ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_ENDPOINT\");\n        this.modelName = fields?.model ?? fields?.modelName ?? this.model;\n        this.model = this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.maxTokens = fields?.maxTokens;\n        this.logprobs = fields?.logprobs;\n        this.topLogprobs = fields?.topLogprobs;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stopSequences ?? fields?.stop;\n        this.stopSequences = this?.stop;\n        this.user = fields?.user;\n        this.__includeRawResponse = fields?.__includeRawResponse;\n        this.audio = fields?.audio;\n        this.modalities = fields?.modalities;\n        this.reasoningEffort = fields?.reasoningEffort;\n        if (this.azureOpenAIApiKey || this.azureADTokenProvider) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath && !this.azureOpenAIEndpoint) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName && this.azureOpenAIBasePath) {\n                const parts = this.azureOpenAIBasePath.split(\"/openai/deployments/\");\n                if (parts.length === 2) {\n                    const [, deployment] = parts;\n                    this.azureOpenAIApiDeploymentName = deployment;\n                }\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.apiKey = this.apiKey ?? \"\";\n            // Streaming usage is not supported by Azure deployments, so default to false\n            this.streamUsage = false;\n        }\n        this.streaming = fields?.streaming ?? false;\n        this.streamUsage = fields?.streamUsage ?? this.streamUsage;\n        this.clientConfig = {\n            apiKey: this.apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n        // If `supportsStrictToolCalling` is explicitly set, use that value.\n        // Else leave undefined so it's not passed to OpenAI.\n        if (fields?.supportsStrictToolCalling !== undefined) {\n            this.supportsStrictToolCalling = fields.supportsStrictToolCalling;\n        }\n    }\n    getLsParams(options) {\n        const params = this.invocationParams(options);\n        return {\n            ls_provider: \"openai\",\n            ls_model_name: this.model,\n            ls_model_type: \"chat\",\n            ls_temperature: params.temperature ?? undefined,\n            ls_max_tokens: params.max_tokens ?? undefined,\n            ls_stop: options.stop\n        };\n    }\n    bindTools(tools, kwargs) {\n        let strict;\n        if (kwargs?.strict !== undefined) {\n            strict = kwargs.strict;\n        } else if (this.supportsStrictToolCalling !== undefined) {\n            strict = this.supportsStrictToolCalling;\n        }\n        return this.bind({\n            tools: tools.map((tool)=>_convertChatOpenAIToolTypeToOpenAITool(tool, {\n                    strict\n                })),\n            ...kwargs\n        });\n    }\n    createResponseFormat(resFormat) {\n        if (resFormat && resFormat.type === \"json_schema\" && resFormat.json_schema.schema && isZodSchema(resFormat.json_schema.schema)) {\n            return (0,openai_helpers_zod__WEBPACK_IMPORTED_MODULE_13__.zodResponseFormat)(resFormat.json_schema.schema, resFormat.json_schema.name, {\n                description: resFormat.json_schema.description\n            });\n        }\n        return resFormat;\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams(options, extra) {\n        let strict;\n        if (options?.strict !== undefined) {\n            strict = options.strict;\n        } else if (this.supportsStrictToolCalling !== undefined) {\n            strict = this.supportsStrictToolCalling;\n        }\n        let streamOptionsConfig = {};\n        if (options?.stream_options !== undefined) {\n            streamOptionsConfig = {\n                stream_options: options.stream_options\n            };\n        } else if (this.streamUsage && (this.streaming || extra?.streaming)) {\n            streamOptionsConfig = {\n                stream_options: {\n                    include_usage: true\n                }\n            };\n        }\n        const params = {\n            model: this.model,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            logprobs: this.logprobs,\n            top_logprobs: this.topLogprobs,\n            n: this.n,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stopSequences,\n            user: this.user,\n            // if include_usage is set or streamUsage then stream must be set to true.\n            stream: this.streaming,\n            functions: options?.functions,\n            function_call: options?.function_call,\n            tools: options?.tools?.length ? options.tools.map((tool)=>_convertChatOpenAIToolTypeToOpenAITool(tool, {\n                    strict\n                })) : undefined,\n            tool_choice: (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_10__.formatToOpenAIToolChoice)(options?.tool_choice),\n            response_format: this.createResponseFormat(options?.response_format),\n            seed: options?.seed,\n            ...streamOptionsConfig,\n            parallel_tool_calls: options?.parallel_tool_calls,\n            ...this.audio || options?.audio ? {\n                audio: this.audio || options?.audio\n            } : {},\n            ...this.modalities || options?.modalities ? {\n                modalities: this.modalities || options?.modalities\n            } : {},\n            ...this.modelKwargs\n        };\n        if (options?.prediction !== undefined) {\n            params.prediction = options.prediction;\n        }\n        const reasoningEffort = options?.reasoning_effort ?? this.reasoningEffort;\n        if (reasoningEffort !== undefined) {\n            params.reasoning_effort = reasoningEffort;\n        }\n        return params;\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.model,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    async *_streamResponseChunks(messages, options, runManager) {\n        const messagesMapped = _convertMessagesToOpenAIParams(messages, this.model);\n        const params = {\n            ...this.invocationParams(options, {\n                streaming: true\n            }),\n            messages: messagesMapped,\n            stream: true\n        };\n        let defaultRole;\n        const streamIterable = await this.completionWithRetry(params, options);\n        let usage;\n        for await (const data of streamIterable){\n            const choice = data?.choices?.[0];\n            if (data.usage) {\n                usage = data.usage;\n            }\n            if (!choice) {\n                continue;\n            }\n            const { delta } = choice;\n            if (!delta) {\n                continue;\n            }\n            const chunk = _convertDeltaToMessageChunk(delta, data, defaultRole, this.__includeRawResponse);\n            defaultRole = delta.role ?? defaultRole;\n            const newTokenIndices = {\n                prompt: options.promptIndex ?? 0,\n                completion: choice.index ?? 0\n            };\n            if (typeof chunk.content !== \"string\") {\n                console.log(\"[WARNING]: Received non-string content from OpenAI. This is currently not supported.\");\n                continue;\n            }\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const generationInfo = {\n                ...newTokenIndices\n            };\n            if (choice.finish_reason != null) {\n                generationInfo.finish_reason = choice.finish_reason;\n                // Only include system fingerprint in the last chunk for now\n                // to avoid concatenation issues\n                generationInfo.system_fingerprint = data.system_fingerprint;\n                generationInfo.model_name = data.model;\n            }\n            if (this.logprobs) {\n                generationInfo.logprobs = choice.logprobs;\n            }\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.ChatGenerationChunk({\n                message: chunk,\n                text: chunk.content,\n                generationInfo\n            });\n            yield generationChunk;\n            await runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices, undefined, undefined, undefined, {\n                chunk: generationChunk\n            });\n        }\n        if (usage) {\n            const inputTokenDetails = {\n                ...usage.prompt_tokens_details?.audio_tokens !== null && {\n                    audio: usage.prompt_tokens_details?.audio_tokens\n                },\n                ...usage.prompt_tokens_details?.cached_tokens !== null && {\n                    cache_read: usage.prompt_tokens_details?.cached_tokens\n                }\n            };\n            const outputTokenDetails = {\n                ...usage.completion_tokens_details?.audio_tokens !== null && {\n                    audio: usage.completion_tokens_details?.audio_tokens\n                },\n                ...usage.completion_tokens_details?.reasoning_tokens !== null && {\n                    reasoning: usage.completion_tokens_details?.reasoning_tokens\n                }\n            };\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.ChatGenerationChunk({\n                message: new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessageChunk({\n                    content: \"\",\n                    response_metadata: {\n                        usage: {\n                            ...usage\n                        }\n                    },\n                    usage_metadata: {\n                        input_tokens: usage.prompt_tokens,\n                        output_tokens: usage.completion_tokens,\n                        total_tokens: usage.total_tokens,\n                        ...Object.keys(inputTokenDetails).length > 0 && {\n                            input_token_details: inputTokenDetails\n                        },\n                        ...Object.keys(outputTokenDetails).length > 0 && {\n                            output_token_details: outputTokenDetails\n                        }\n                    }\n                }),\n                text: \"\"\n            });\n            yield generationChunk;\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    /**\n     * Get the identifying parameters for the model\n     *\n     */ identifyingParams() {\n        return this._identifyingParams();\n    }\n    /** @ignore */ async _generate(messages, options, runManager) {\n        const usageMetadata = {};\n        const params = this.invocationParams(options);\n        const messagesMapped = _convertMessagesToOpenAIParams(messages, this.model);\n        if (params.stream) {\n            const stream = this._streamResponseChunks(messages, options, runManager);\n            const finalChunks = {};\n            for await (const chunk of stream){\n                chunk.message.response_metadata = {\n                    ...chunk.generationInfo,\n                    ...chunk.message.response_metadata\n                };\n                const index = chunk.generationInfo?.completion ?? 0;\n                if (finalChunks[index] === undefined) {\n                    finalChunks[index] = chunk;\n                } else {\n                    finalChunks[index] = finalChunks[index].concat(chunk);\n                }\n            }\n            const generations = Object.entries(finalChunks).sort(([aKey], [bKey])=>parseInt(aKey, 10) - parseInt(bKey, 10)).map(([_, value])=>value);\n            const { functions, function_call } = this.invocationParams(options);\n            // OpenAI does not support token usage report under stream mode,\n            // fallback to estimation.\n            const promptTokenUsage = await this.getEstimatedTokenCountFromPrompt(messages, functions, function_call);\n            const completionTokenUsage = await this.getNumTokensFromGenerations(generations);\n            usageMetadata.input_tokens = promptTokenUsage;\n            usageMetadata.output_tokens = completionTokenUsage;\n            usageMetadata.total_tokens = promptTokenUsage + completionTokenUsage;\n            return {\n                generations,\n                llmOutput: {\n                    estimatedTokenUsage: {\n                        promptTokens: usageMetadata.input_tokens,\n                        completionTokens: usageMetadata.output_tokens,\n                        totalTokens: usageMetadata.total_tokens\n                    }\n                }\n            };\n        } else {\n            let data;\n            if (options.response_format && options.response_format.type === \"json_schema\") {\n                data = await this.betaParsedCompletionWithRetry({\n                    ...params,\n                    stream: false,\n                    messages: messagesMapped\n                }, {\n                    signal: options?.signal,\n                    ...options?.options\n                });\n            } else {\n                data = await this.completionWithRetry({\n                    ...params,\n                    stream: false,\n                    messages: messagesMapped\n                }, {\n                    signal: options?.signal,\n                    ...options?.options\n                });\n            }\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, prompt_tokens_details: promptTokensDetails, completion_tokens_details: completionTokensDetails } = data?.usage ?? {};\n            if (completionTokens) {\n                usageMetadata.output_tokens = (usageMetadata.output_tokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                usageMetadata.input_tokens = (usageMetadata.input_tokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                usageMetadata.total_tokens = (usageMetadata.total_tokens ?? 0) + totalTokens;\n            }\n            if (promptTokensDetails?.audio_tokens !== null || promptTokensDetails?.cached_tokens !== null) {\n                usageMetadata.input_token_details = {\n                    ...promptTokensDetails?.audio_tokens !== null && {\n                        audio: promptTokensDetails?.audio_tokens\n                    },\n                    ...promptTokensDetails?.cached_tokens !== null && {\n                        cache_read: promptTokensDetails?.cached_tokens\n                    }\n                };\n            }\n            if (completionTokensDetails?.audio_tokens !== null || completionTokensDetails?.reasoning_tokens !== null) {\n                usageMetadata.output_token_details = {\n                    ...completionTokensDetails?.audio_tokens !== null && {\n                        audio: completionTokensDetails?.audio_tokens\n                    },\n                    ...completionTokensDetails?.reasoning_tokens !== null && {\n                        reasoning: completionTokensDetails?.reasoning_tokens\n                    }\n                };\n            }\n            const generations = [];\n            for (const part of data?.choices ?? []){\n                const text = part.message?.content ?? \"\";\n                const generation = {\n                    text,\n                    message: openAIResponseToChatMessage(part.message ?? {\n                        role: \"assistant\"\n                    }, data, this.__includeRawResponse)\n                };\n                generation.generationInfo = {\n                    ...part.finish_reason ? {\n                        finish_reason: part.finish_reason\n                    } : {},\n                    ...part.logprobs ? {\n                        logprobs: part.logprobs\n                    } : {}\n                };\n                if ((0,_langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.isAIMessage)(generation.message)) {\n                    generation.message.usage_metadata = usageMetadata;\n                }\n                // Fields are not serialized unless passed to the constructor\n                // Doing this ensures all fields on the message are serialized\n                generation.message = new _langchain_core_messages__WEBPACK_IMPORTED_MODULE_0__.AIMessage(Object.fromEntries(Object.entries(generation.message).filter(([key])=>!key.startsWith(\"lc_\"))));\n                generations.push(generation);\n            }\n            return {\n                generations,\n                llmOutput: {\n                    tokenUsage: {\n                        promptTokens: usageMetadata.input_tokens,\n                        completionTokens: usageMetadata.output_tokens,\n                        totalTokens: usageMetadata.total_tokens\n                    }\n                }\n            };\n        }\n    }\n    /**\n     * Estimate the number of tokens a prompt will use.\n     * Modified from: https://github.com/hmarr/openai-chat-tokens/blob/main/src/index.ts\n     */ async getEstimatedTokenCountFromPrompt(messages, functions, function_call) {\n        // It appears that if functions are present, the first system message is padded with a trailing newline. This\n        // was inferred by trying lots of combinations of messages and functions and seeing what the token counts were.\n        let tokens = (await this.getNumTokensFromMessages(messages)).totalCount;\n        // If there are functions, add the function definitions as they count towards token usage\n        if (functions && function_call !== \"auto\") {\n            const promptDefinitions = (0,_utils_openai_format_fndef_js__WEBPACK_IMPORTED_MODULE_11__.formatFunctionDefinitions)(functions);\n            tokens += await this.getNumTokens(promptDefinitions);\n            tokens += 9; // Add nine per completion\n        }\n        // If there's a system message _and_ functions are present, subtract four tokens. I assume this is because\n        // functions typically add a system message, but reuse the first one if it's already there. This offsets\n        // the extra 9 tokens added by the function definitions.\n        if (functions && messages.find((m)=>m._getType() === \"system\")) {\n            tokens -= 4;\n        }\n        // If function_call is 'none', add one token.\n        // If it's a FunctionCall object, add 4 + the number of tokens in the function name.\n        // If it's undefined or 'auto', don't add anything.\n        if (function_call === \"none\") {\n            tokens += 1;\n        } else if (typeof function_call === \"object\") {\n            tokens += await this.getNumTokens(function_call.name) + 4;\n        }\n        return tokens;\n    }\n    /**\n     * Estimate the number of tokens an array of generations have used.\n     */ async getNumTokensFromGenerations(generations) {\n        const generationUsages = await Promise.all(generations.map(async (generation)=>{\n            if (generation.message.additional_kwargs?.function_call) {\n                return (await this.getNumTokensFromMessages([\n                    generation.message\n                ])).countPerMessage[0];\n            } else {\n                return await this.getNumTokens(generation.message.content);\n            }\n        }));\n        return generationUsages.reduce((a, b)=>a + b, 0);\n    }\n    async getNumTokensFromMessages(messages) {\n        let totalCount = 0;\n        let tokensPerMessage = 0;\n        let tokensPerName = 0;\n        // From: https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb\n        if (this.model === \"gpt-3.5-turbo-0301\") {\n            tokensPerMessage = 4;\n            tokensPerName = -1;\n        } else {\n            tokensPerMessage = 3;\n            tokensPerName = 1;\n        }\n        const countPerMessage = await Promise.all(messages.map(async (message)=>{\n            const textCount = await this.getNumTokens(message.content);\n            const roleCount = await this.getNumTokens(messageToOpenAIRole(message));\n            const nameCount = message.name !== undefined ? tokensPerName + await this.getNumTokens(message.name) : 0;\n            let count = textCount + tokensPerMessage + roleCount + nameCount;\n            // From: https://github.com/hmarr/openai-chat-tokens/blob/main/src/index.ts messageTokenEstimate\n            const openAIMessage = message;\n            if (openAIMessage._getType() === \"function\") {\n                count -= 2;\n            }\n            if (openAIMessage.additional_kwargs?.function_call) {\n                count += 3;\n            }\n            if (openAIMessage?.additional_kwargs.function_call?.name) {\n                count += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.name);\n            }\n            if (openAIMessage.additional_kwargs.function_call?.arguments) {\n                try {\n                    count += await this.getNumTokens(// Remove newlines and spaces\n                    JSON.stringify(JSON.parse(openAIMessage.additional_kwargs.function_call?.arguments)));\n                } catch (error) {\n                    console.error(\"Error parsing function arguments\", error, JSON.stringify(openAIMessage.additional_kwargs.function_call));\n                    count += await this.getNumTokens(openAIMessage.additional_kwargs.function_call?.arguments);\n                }\n            }\n            totalCount += count;\n            return count;\n        }));\n        totalCount += 3; // every reply is primed with <|start|>assistant<|message|>\n        return {\n            totalCount,\n            countPerMessage\n        };\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.chat.completions.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_10__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /**\n     * Call the beta chat completions parse endpoint. This should only be called if\n     * response_format is set to \"json_object\".\n     * @param {OpenAIClient.Chat.ChatCompletionCreateParamsNonStreaming} request\n     * @param {OpenAICoreRequestOptions | undefined} options\n     */ async betaParsedCompletionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.beta.chat.completions.parse(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_10__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n                azureOpenAIEndpoint: this.azureOpenAIEndpoint\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_9__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_14__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n    /** @ignore */ _combineLLMOutput(...llmOutputs) {\n        return llmOutputs.reduce((acc, llmOutput)=>{\n            if (llmOutput && llmOutput.tokenUsage) {\n                acc.tokenUsage.completionTokens += llmOutput.tokenUsage.completionTokens ?? 0;\n                acc.tokenUsage.promptTokens += llmOutput.tokenUsage.promptTokens ?? 0;\n                acc.tokenUsage.totalTokens += llmOutput.tokenUsage.totalTokens ?? 0;\n            }\n            return acc;\n        }, {\n            tokenUsage: {\n                completionTokens: 0,\n                promptTokens: 0,\n                totalTokens: 0\n            }\n        });\n    }\n    withStructuredOutput(outputSchema, config) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let schema;\n        let name;\n        let method;\n        let includeRaw;\n        if (isStructuredOutputMethodParams(outputSchema)) {\n            schema = outputSchema.schema;\n            name = outputSchema.name;\n            method = outputSchema.method;\n            includeRaw = outputSchema.includeRaw;\n        } else {\n            schema = outputSchema;\n            name = config?.name;\n            method = config?.method;\n            includeRaw = config?.includeRaw;\n        }\n        let llm;\n        let outputParser;\n        if (config?.strict !== undefined && method === \"jsonMode\") {\n            throw new Error(\"Argument `strict` is only supported for `method` = 'function_calling'\");\n        }\n        if (method === \"jsonMode\") {\n            llm = this.bind({\n                response_format: {\n                    type: \"json_object\"\n                }\n            });\n            if (isZodSchema(schema)) {\n                outputParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__.StructuredOutputParser.fromZodSchema(schema);\n            } else {\n                outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__.JsonOutputParser();\n            }\n        } else if (method === \"jsonSchema\") {\n            llm = this.bind({\n                response_format: {\n                    type: \"json_schema\",\n                    json_schema: {\n                        name: name ?? \"extract\",\n                        description: schema.description,\n                        schema,\n                        strict: config?.strict\n                    }\n                }\n            });\n            if (isZodSchema(schema)) {\n                outputParser = _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__.StructuredOutputParser.fromZodSchema(schema);\n            } else {\n                outputParser = new _langchain_core_output_parsers__WEBPACK_IMPORTED_MODULE_6__.JsonOutputParser();\n            }\n        } else {\n            let functionName = name ?? \"extract\";\n            // Is function calling\n            if (isZodSchema(schema)) {\n                const asJsonSchema = (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_8__.zodToJsonSchema)(schema);\n                llm = this.bind({\n                    tools: [\n                        {\n                            type: \"function\",\n                            function: {\n                                name: functionName,\n                                description: asJsonSchema.description,\n                                parameters: asJsonSchema\n                            }\n                        }\n                    ],\n                    tool_choice: {\n                        type: \"function\",\n                        function: {\n                            name: functionName\n                        }\n                    },\n                    // Do not pass `strict` argument to OpenAI if `config.strict` is undefined\n                    ...config?.strict !== undefined ? {\n                        strict: config.strict\n                    } : {}\n                });\n                outputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.JsonOutputKeyToolsParser({\n                    returnSingle: true,\n                    keyName: functionName,\n                    zodSchema: schema\n                });\n            } else {\n                let openAIFunctionDefinition;\n                if (typeof schema.name === \"string\" && typeof schema.parameters === \"object\" && schema.parameters != null) {\n                    openAIFunctionDefinition = schema;\n                    functionName = schema.name;\n                } else {\n                    functionName = schema.title ?? functionName;\n                    openAIFunctionDefinition = {\n                        name: functionName,\n                        description: schema.description ?? \"\",\n                        parameters: schema\n                    };\n                }\n                llm = this.bind({\n                    tools: [\n                        {\n                            type: \"function\",\n                            function: openAIFunctionDefinition\n                        }\n                    ],\n                    tool_choice: {\n                        type: \"function\",\n                        function: {\n                            name: functionName\n                        }\n                    },\n                    // Do not pass `strict` argument to OpenAI if `config.strict` is undefined\n                    ...config?.strict !== undefined ? {\n                        strict: config.strict\n                    } : {}\n                });\n                outputParser = new _langchain_core_output_parsers_openai_tools__WEBPACK_IMPORTED_MODULE_7__.JsonOutputKeyToolsParser({\n                    returnSingle: true,\n                    keyName: functionName\n                });\n            }\n        }\n        if (!includeRaw) {\n            return llm.pipe(outputParser);\n        }\n        const parserAssign = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__.RunnablePassthrough.assign({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            parsed: (input, config)=>outputParser.invoke(input.raw, config)\n        });\n        const parserNone = _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__.RunnablePassthrough.assign({\n            parsed: ()=>null\n        });\n        const parsedWithFallback = parserAssign.withFallbacks({\n            fallbacks: [\n                parserNone\n            ]\n        });\n        return _langchain_core_runnables__WEBPACK_IMPORTED_MODULE_5__.RunnableSequence.from([\n            {\n                raw: llm\n            },\n            parsedWithFallback\n        ]);\n    }\n}\nfunction isZodSchema(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninput) {\n    // Check for a characteristic method of Zod schemas\n    return typeof input?.parse === \"function\";\n}\nfunction isStructuredOutputMethodParams(x) {\n    return x !== undefined && // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    typeof x.schema === \"object\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/embeddings.js":
/*!***********************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/embeddings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIEmbeddings: () => (/* binding */ OpenAIEmbeddings)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/embeddings */ \"(rsc)/./node_modules/@langchain/core/embeddings.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n/**\n * Class for generating embeddings using the OpenAI API. Extends the\n * Embeddings class and implements OpenAIEmbeddingsParams and\n * AzureOpenAIInput.\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */ class OpenAIEmbeddings extends _langchain_core_embeddings__WEBPACK_IMPORTED_MODULE_1__.Embeddings {\n    constructor(fields, configuration){\n        const fieldsWithDefaults = {\n            maxConcurrency: 2,\n            ...fields\n        };\n        super(fieldsWithDefaults);\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * The number of dimensions the resulting output embeddings should have.\n         * Only supported in `text-embedding-3` and later models.\n         */ Object.defineProperty(this, \"dimensions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        let apiKey = fieldsWithDefaults?.apiKey ?? fieldsWithDefaults?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        const azureApiKey = fieldsWithDefaults?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider ?? undefined;\n        if (!azureApiKey && !apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"OpenAI or Azure OpenAI API key or Token Provider not found\");\n        }\n        const azureApiInstanceName = fieldsWithDefaults?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        const azureApiDeploymentName = (fieldsWithDefaults?.azureOpenAIApiEmbeddingsDeploymentName || fieldsWithDefaults?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        const azureApiVersion = fieldsWithDefaults?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fieldsWithDefaults?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fieldsWithDefaults?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fieldsWithDefaults?.model ?? fieldsWithDefaults?.modelName ?? this.model;\n        this.model = this.modelName;\n        this.batchSize = fieldsWithDefaults?.batchSize ?? (azureApiKey ? 1 : this.batchSize);\n        this.stripNewLines = fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fieldsWithDefaults?.timeout;\n        this.dimensions = fieldsWithDefaults?.dimensions;\n        this.azureOpenAIApiVersion = azureApiVersion;\n        this.azureOpenAIApiKey = azureApiKey;\n        this.azureOpenAIApiInstanceName = azureApiInstanceName;\n        this.azureOpenAIApiDeploymentName = azureApiDeploymentName;\n        if (this.azureOpenAIApiKey || this.azureADTokenProvider) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            apiKey = apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the OpenAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */ async embedDocuments(texts) {\n        const batches = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_2__.chunkArray)(this.stripNewLines ? texts.map((t)=>t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch)=>{\n            const params = {\n                model: this.model,\n                input: batch\n            };\n            if (this.dimensions) {\n                params.dimensions = this.dimensions;\n            }\n            return this.embeddingWithRetry(params);\n        });\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for(let i = 0; i < batchResponses.length; i += 1){\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for(let j = 0; j < batch.length; j += 1){\n                embeddings.push(batchResponse[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */ async embedQuery(text) {\n        const params = {\n            model: this.model,\n            input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text\n        };\n        if (this.dimensions) {\n            params.dimensions = this.dimensions;\n        }\n        const { data } = await this.embeddingWithRetry(params);\n        return data[0].embedding;\n    }\n    /**\n     * Private method to make a request to the OpenAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the OpenAI API.\n     * @returns Promise that resolves to the response from the API.\n     */ async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_3__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_5__.OpenAI(params);\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/embeddings.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _azure_chat_models_js__WEBPACK_IMPORTED_MODULE_3__.AzureChatOpenAI),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _azure_llms_js__WEBPACK_IMPORTED_MODULE_5__.AzureOpenAI),\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* reexport safe */ _azure_embeddings_js__WEBPACK_IMPORTED_MODULE_6__.AzureOpenAIEmbeddings),\n/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_2__.ChatOpenAI),\n/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _tools_index_js__WEBPACK_IMPORTED_MODULE_11__.DallEAPIWrapper),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_4__.OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _llms_js__WEBPACK_IMPORTED_MODULE_4__.OpenAIChat),\n/* harmony export */   OpenAIClient: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _embeddings_js__WEBPACK_IMPORTED_MODULE_7__.OpenAIEmbeddings),\n/* harmony export */   _convertMessagesToOpenAIParams: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_2__._convertMessagesToOpenAIParams),\n/* harmony export */   convertPromptToOpenAI: () => (/* reexport safe */ _utils_prompts_js__WEBPACK_IMPORTED_MODULE_12__.convertPromptToOpenAI),\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_9__.formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_9__.formatToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_9__.formatToOpenAITool),\n/* harmony export */   formatToOpenAIToolChoice: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_9__.formatToOpenAIToolChoice),\n/* harmony export */   getEndpoint: () => (/* reexport safe */ _utils_azure_js__WEBPACK_IMPORTED_MODULE_10__.getEndpoint),\n/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _chat_models_js__WEBPACK_IMPORTED_MODULE_2__.messageToOpenAIRole),\n/* harmony export */   toFile: () => (/* reexport safe */ openai__WEBPACK_IMPORTED_MODULE_1__.toFile),\n/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _utils_openai_js__WEBPACK_IMPORTED_MODULE_9__.wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/uploads.mjs\");\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\");\n/* harmony import */ var _azure_chat_models_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./azure/chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/azure/chat_models.js\");\n/* harmony import */ var _llms_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./llms.js */ \"(rsc)/./node_modules/@langchain/openai/dist/llms.js\");\n/* harmony import */ var _azure_llms_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./azure/llms.js */ \"(rsc)/./node_modules/@langchain/openai/dist/azure/llms.js\");\n/* harmony import */ var _azure_embeddings_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./azure/embeddings.js */ \"(rsc)/./node_modules/@langchain/openai/dist/azure/embeddings.js\");\n/* harmony import */ var _embeddings_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./embeddings.js */ \"(rsc)/./node_modules/@langchain/openai/dist/embeddings.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@langchain/openai/dist/types.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _tools_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tools/index.js */ \"(rsc)/./node_modules/@langchain/openai/dist/tools/index.js\");\n/* harmony import */ var _utils_prompts_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./utils/prompts.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/prompts.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3RDtBQUN2QjtBQUNNO0FBQ2I7QUFDTTtBQUNNO0FBQ047QUFDTDtBQUNPO0FBQ0Q7QUFDQTtBQUMwQiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvaW5kZXguanM/ZmM1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgeyBPcGVuQUkgYXMgT3BlbkFJQ2xpZW50LCB0b0ZpbGUgfSBmcm9tIFwib3BlbmFpXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jaGF0X21vZGVscy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vYXp1cmUvY2hhdF9tb2RlbHMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2xsbXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F6dXJlL2xsbXMuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F6dXJlL2VtYmVkZGluZ3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2VtYmVkZGluZ3MuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3R5cGVzLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi91dGlscy9vcGVuYWkuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3V0aWxzL2F6dXJlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi90b29scy9pbmRleC5qc1wiO1xuZXhwb3J0IHsgY29udmVydFByb21wdFRvT3BlbkFJIH0gZnJvbSBcIi4vdXRpbHMvcHJvbXB0cy5qc1wiO1xuIl0sIm5hbWVzIjpbIk9wZW5BSSIsIk9wZW5BSUNsaWVudCIsInRvRmlsZSIsImNvbnZlcnRQcm9tcHRUb09wZW5BSSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/legacy.js":
/*!*******************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/legacy.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIChat: () => (/* binding */ OpenAIChat)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n/**\n * @deprecated For legacy compatibility. Use ChatOpenAI instead.\n *\n * Wrapper around OpenAI large language models that use the Chat endpoint.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/chat/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n *\n * @augments BaseLLM\n * @augments OpenAIInput\n * @augments AzureOpenAIChatInput\n * @example\n * ```typescript\n * const model = new OpenAIChat({\n *   prefixMessages: [\n *     {\n *       role: \"system\",\n *       content: \"You are a helpful assistant that answers in pirate language\",\n *     },\n *   ],\n *   maxTokens: 50,\n * });\n *\n * const res = await model.invoke(\n *   \"What would be a good company name for a company that makes colorful socks?\"\n * );\n * console.log({ res });\n * ```\n */ class OpenAIChat extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_2__.LLM {\n    static lc_name() {\n        return \"OpenAIChat\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\",\n            \"promptIndex\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo\"\n        });\n        Object.defineProperty(this, \"prefixMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiCompletionsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_1__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.model ?? fields?.modelName ?? this.modelName;\n        this.prefixMessages = fields?.prefixMessages ?? this.prefixMessages;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.logitBias = fields?.logitBias;\n        this.maxTokens = fields?.maxTokens;\n        this.stop = fields?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.n > 1) {\n            throw new Error(\"Cannot use n > 1 in OpenAIChat LLM. Use ChatOpenAI Chat Model instead.\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.openAIApiKey = this.openAIApiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            logit_bias: this.logitBias,\n            max_tokens: this.maxTokens === -1 ? undefined : this.maxTokens,\n            stop: options?.stop ?? this.stop,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs\n        };\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */ identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Formats the messages for the OpenAI API.\n     * @param prompt The prompt to be formatted.\n     * @returns Array of formatted messages.\n     */ formatMessages(prompt) {\n        const message = {\n            role: \"user\",\n            content: prompt\n        };\n        return this.prefixMessages ? [\n            ...this.prefixMessages,\n            message\n        ] : [\n            message\n        ];\n    }\n    async *_streamResponseChunks(prompt, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            messages: this.formatMessages(prompt),\n            stream: true\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream){\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const { delta } = choice;\n            const generationChunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_0__.GenerationChunk({\n                text: delta.content ?? \"\"\n            });\n            yield generationChunk;\n            const newTokenIndices = {\n                prompt: options.promptIndex ?? 0,\n                completion: choice.index ?? 0\n            };\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(generationChunk.text ?? \"\", newTokenIndices);\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    /** @ignore */ async _call(prompt, options, runManager) {\n        const params = this.invocationParams(options);\n        if (params.stream) {\n            const stream = await this._streamResponseChunks(prompt, options, runManager);\n            let finalChunk;\n            for await (const chunk of stream){\n                if (finalChunk === undefined) {\n                    finalChunk = chunk;\n                } else {\n                    finalChunk = finalChunk.concat(chunk);\n                }\n            }\n            return finalChunk?.text ?? \"\";\n        } else {\n            const response = await this.completionWithRetry({\n                ...params,\n                stream: false,\n                messages: this.formatMessages(prompt)\n            }, {\n                signal: options.signal,\n                ...options.options\n            });\n            return response?.choices[0]?.message?.content ?? \"\";\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.chat.completions.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_4__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /** @ignore */ _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_3__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_5__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/legacy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/llms.js":
/*!*****************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/llms.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAI: () => (/* binding */ OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _legacy_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIChat)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/language_models/base */ \"(rsc)/./node_modules/@langchain/core/language_models/base.js\");\n/* harmony import */ var _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/outputs */ \"(rsc)/./node_modules/@langchain/core/outputs.js\");\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @langchain/core/language_models/llms */ \"(rsc)/./node_modules/@langchain/core/language_models/llms.js\");\n/* harmony import */ var _langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @langchain/core/utils/chunk_array */ \"(rsc)/./node_modules/@langchain/core/utils/chunk_array.js\");\n/* harmony import */ var _utils_azure_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/azure.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\");\n/* harmony import */ var _legacy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./legacy.js */ \"(rsc)/./node_modules/@langchain/openai/dist/legacy.js\");\n/* harmony import */ var _utils_openai_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/openai.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\");\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.invoke(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */ class OpenAI extends _langchain_core_language_models_llms__WEBPACK_IMPORTED_MODULE_3__.BaseLLM {\n    static lc_name() {\n        return \"OpenAI\";\n    }\n    get callKeys() {\n        return [\n            ...super.callKeys,\n            \"options\"\n        ];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            apiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\"\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            apiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n        };\n    }\n    constructor(fields, /** @deprecated */ configuration){\n        let model = fields?.model ?? fields?.modelName;\n        if ((model?.startsWith(\"gpt-3.5-turbo\") || model?.startsWith(\"gpt-4\")) && !model?.includes(\"-instruct\")) {\n            console.warn([\n                `Your chosen OpenAI model, \"${model}\", is a chat model and not a text-in/text-out LLM.`,\n                `Passing it into the \"OpenAI\" class is deprecated and only permitted for backwards-compatibility. You may experience odd behavior.`,\n                `Please use the \"ChatOpenAI\" class instead.`,\n                \"\",\n                `See this page for more information:`,\n                \"|\",\n                `└> https://js.langchain.com/docs/integrations/chat/openai`\n            ].join(\"\\n\"));\n            // eslint-disable-next-line no-constructor-return\n            return new _legacy_js__WEBPACK_IMPORTED_MODULE_6__.OpenAIChat(fields, configuration);\n        }\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 256\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"bestOf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stopSequences\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"apiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureADTokenProvider\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        model = model ?? this.model;\n        this.openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        this.apiKey = this.openAIApiKey;\n        this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_KEY\");\n        this.azureADTokenProvider = fields?.azureADTokenProvider ?? undefined;\n        if (!this.azureOpenAIApiKey && !this.apiKey && !this.azureADTokenProvider) {\n            throw new Error(\"OpenAI or Azure OpenAI API key or Token Provider not found\");\n        }\n        this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiCompletionsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? ((0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") || (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization = fields?.configuration?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_2__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        this.modelName = model;\n        this.model = model;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.bestOf = fields?.bestOf ?? this.bestOf;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stopSequences ?? fields?.stop;\n        this.stopSequences = fields?.stopSequences;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.bestOf && this.bestOf > 1) {\n            throw new Error(\"Cannot stream results when bestOf > 1\");\n        }\n        if (this.azureOpenAIApiKey || this.azureADTokenProvider) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.apiKey = this.apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */ invocationParams(options) {\n        return {\n            model: this.model,\n            temperature: this.temperature,\n            max_tokens: this.maxTokens,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            best_of: this.bestOf,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stopSequences,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs\n        };\n    }\n    /** @ignore */ _identifyingParams() {\n        return {\n            model_name: this.model,\n            ...this.invocationParams(),\n            ...this.clientConfig\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */ identifyingParams() {\n        return this._identifyingParams();\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param [prompts] - The prompts to pass into the model.\n     * @param [options] - Optional list of stop words to use when generating.\n     * @param [runManager] - Optional callback manager to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */ async _generate(prompts, options, runManager) {\n        const subPrompts = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(prompts, this.batchSize);\n        const choices = [];\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        if (params.max_tokens === -1) {\n            if (prompts.length !== 1) {\n                throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n            }\n            params.max_tokens = await (0,_langchain_core_language_models_base__WEBPACK_IMPORTED_MODULE_0__.calculateMaxTokens)({\n                prompt: prompts[0],\n                // Cast here to allow for other models that may not fit the union\n                modelName: this.model\n            });\n        }\n        for(let i = 0; i < subPrompts.length; i += 1){\n            const data = params.stream ? await (async ()=>{\n                const choices = [];\n                let response;\n                const stream = await this.completionWithRetry({\n                    ...params,\n                    stream: true,\n                    prompt: subPrompts[i]\n                }, options);\n                for await (const message of stream){\n                    // on the first message set the response properties\n                    if (!response) {\n                        response = {\n                            id: message.id,\n                            object: message.object,\n                            created: message.created,\n                            model: message.model\n                        };\n                    }\n                    // on all messages, update choice\n                    for (const part of message.choices){\n                        if (!choices[part.index]) {\n                            choices[part.index] = part;\n                        } else {\n                            const choice = choices[part.index];\n                            choice.text += part.text;\n                            choice.finish_reason = part.finish_reason;\n                            choice.logprobs = part.logprobs;\n                        }\n                        void runManager?.handleLLMNewToken(part.text, {\n                            prompt: Math.floor(part.index / this.n),\n                            completion: part.index % this.n\n                        });\n                    }\n                }\n                if (options.signal?.aborted) {\n                    throw new Error(\"AbortError\");\n                }\n                return {\n                    ...response,\n                    choices\n                };\n            })() : await this.completionWithRetry({\n                ...params,\n                stream: false,\n                prompt: subPrompts[i]\n            }, {\n                signal: options.signal,\n                ...options.options\n            });\n            choices.push(...data.choices);\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens } = data.usage ? data.usage : {\n                completion_tokens: undefined,\n                prompt_tokens: undefined,\n                total_tokens: undefined\n            };\n            if (completionTokens) {\n                tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n        }\n        const generations = (0,_langchain_core_utils_chunk_array__WEBPACK_IMPORTED_MODULE_4__.chunkArray)(choices, this.n).map((promptChoices)=>promptChoices.map((choice)=>({\n                    text: choice.text ?? \"\",\n                    generationInfo: {\n                        finishReason: choice.finish_reason,\n                        logprobs: choice.logprobs\n                    }\n                })));\n        return {\n            generations,\n            llmOutput: {\n                tokenUsage\n            }\n        };\n    }\n    // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n    async *_streamResponseChunks(input, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt: input,\n            stream: true\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream){\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const chunk = new _langchain_core_outputs__WEBPACK_IMPORTED_MODULE_1__.GenerationChunk({\n                text: choice.text,\n                generationInfo: {\n                    finishReason: choice.finish_reason\n                }\n            });\n            yield chunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async ()=>{\n            try {\n                const res = await this.client.completions.create(request, requestOptions);\n                return res;\n            } catch (e) {\n                const error = (0,_utils_openai_js__WEBPACK_IMPORTED_MODULE_7__.wrapOpenAIClientError)(e);\n                throw error;\n            }\n        });\n    }\n    /**\n     * Calls the OpenAI API with retry logic in case of failures.\n     * @param request The request to send to the OpenAI API.\n     * @param options Optional configuration for the API call.\n     * @returns The response from the OpenAI API.\n     */ _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL\n            };\n            const endpoint = (0,_utils_azure_js__WEBPACK_IMPORTED_MODULE_5__.getEndpoint)(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new openai__WEBPACK_IMPORTED_MODULE_8__.OpenAI(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/llms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/tools/dalle.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/tools/dalle.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DallEAPIWrapper: () => (/* binding */ DallEAPIWrapper)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/env */ \"(rsc)/./node_modules/@langchain/core/utils/env.js\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _langchain_core_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/tools */ \"(rsc)/./node_modules/@langchain/core/tools.js\");\n/* eslint-disable no-param-reassign */ \n\n\n/**\n * A tool for generating images with Open AIs Dall-E 2 or 3 API.\n */ class DallEAPIWrapper extends _langchain_core_tools__WEBPACK_IMPORTED_MODULE_1__.Tool {\n    static lc_name() {\n        return \"DallEAPIWrapper\";\n    }\n    constructor(fields){\n        // Shim for new base tool param name\n        if (fields?.responseFormat !== undefined && [\n            \"url\",\n            \"b64_json\"\n        ].includes(fields.responseFormat)) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            fields.dallEResponseFormat = fields.responseFormat;\n            fields.responseFormat = \"content\";\n        }\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"dalle_api_wrapper\"\n        });\n        Object.defineProperty(this, \"description\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"A wrapper around OpenAI DALL-E API. Useful for when you need to generate images from a text description. Input should be an image description.\"\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"model\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"dall-e-3\"\n        });\n        Object.defineProperty(this, \"style\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"vivid\"\n        });\n        Object.defineProperty(this, \"quality\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"standard\"\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"size\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"1024x1024\"\n        });\n        Object.defineProperty(this, \"dallEResponseFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"url\"\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        const openAIApiKey = fields?.apiKey ?? fields?.openAIApiKey ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_API_KEY\");\n        const organization = fields?.organization ?? (0,_langchain_core_utils_env__WEBPACK_IMPORTED_MODULE_0__.getEnvironmentVariable)(\"OPENAI_ORGANIZATION\");\n        const clientConfig = {\n            apiKey: openAIApiKey,\n            organization,\n            dangerouslyAllowBrowser: true,\n            baseUrl: fields?.baseUrl\n        };\n        this.client = new openai__WEBPACK_IMPORTED_MODULE_2__.OpenAI(clientConfig);\n        this.model = fields?.model ?? fields?.modelName ?? this.model;\n        this.style = fields?.style ?? this.style;\n        this.quality = fields?.quality ?? this.quality;\n        this.n = fields?.n ?? this.n;\n        this.size = fields?.size ?? this.size;\n        this.dallEResponseFormat = fields?.dallEResponseFormat ?? this.dallEResponseFormat;\n        this.user = fields?.user;\n    }\n    /**\n     * Processes the API response if multiple images are generated.\n     * Returns a list of MessageContentImageUrl objects. If the response\n     * format is `url`, then the `image_url` field will contain the URL.\n     * If it is `b64_json`, then the `image_url` field will contain an object\n     * with a `url` field with the base64 encoded image.\n     *\n     * @param {OpenAIClient.Images.ImagesResponse[]} response The API response\n     * @returns {MessageContentImageUrl[]}\n     */ processMultipleGeneratedUrls(response) {\n        if (this.dallEResponseFormat === \"url\") {\n            return response.flatMap((res)=>{\n                const imageUrlContent = res.data.flatMap((item)=>{\n                    if (!item.url) return [];\n                    return {\n                        type: \"image_url\",\n                        image_url: item.url\n                    };\n                }).filter((item)=>item !== undefined && item.type === \"image_url\" && typeof item.image_url === \"string\" && item.image_url !== undefined);\n                return imageUrlContent;\n            });\n        } else {\n            return response.flatMap((res)=>{\n                const b64Content = res.data.flatMap((item)=>{\n                    if (!item.b64_json) return [];\n                    return {\n                        type: \"image_url\",\n                        image_url: {\n                            url: item.b64_json\n                        }\n                    };\n                }).filter((item)=>item !== undefined && item.type === \"image_url\" && typeof item.image_url === \"object\" && \"url\" in item.image_url && typeof item.image_url.url === \"string\" && item.image_url.url !== undefined);\n                return b64Content;\n            });\n        }\n    }\n    /** @ignore */ async _call(input) {\n        const generateImageFields = {\n            model: this.model,\n            prompt: input,\n            n: 1,\n            size: this.size,\n            response_format: this.dallEResponseFormat,\n            style: this.style,\n            quality: this.quality,\n            user: this.user\n        };\n        if (this.n > 1) {\n            const results = await Promise.all(Array.from({\n                length: this.n\n            }).map(()=>this.client.images.generate(generateImageFields)));\n            return this.processMultipleGeneratedUrls(results);\n        }\n        const response = await this.client.images.generate(generateImageFields);\n        let data = \"\";\n        if (this.dallEResponseFormat === \"url\") {\n            [data] = response.data.map((item)=>item.url).filter((url)=>url !== \"undefined\");\n        } else {\n            [data] = response.data.map((item)=>item.b64_json).filter((b64_json)=>b64_json !== \"undefined\");\n        }\n        return data;\n    }\n}\nObject.defineProperty(DallEAPIWrapper, \"toolName\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: \"dalle_api_wrapper\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/tools/dalle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/tools/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/tools/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _dalle_js__WEBPACK_IMPORTED_MODULE_0__.DallEAPIWrapper)\n/* harmony export */ });\n/* harmony import */ var _dalle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dalle.js */ \"(rsc)/./node_modules/@langchain/openai/dist/tools/dalle.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC90b29scy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdG9vbHMvaW5kZXguanM/N2M3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLi9kYWxsZS5qc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/tools/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/types.js":
/*!******************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/types.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC90eXBlcy5qcyIsIm1hcHBpbmdzIjoiO0FBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3R5cGVzLmpzPzJhN2EiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/azure.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEndpoint: () => (/* binding */ getEndpoint)\n/* harmony export */ });\n/**\n * This function generates an endpoint URL for (Azure) OpenAI\n * based on the configuration parameters provided.\n *\n * @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n *\n * @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI, e.g. `example-resource`.\n * @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n * @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI, e.g. `https://example-resource.azure.openai.com/openai/deployments/`.\n * @property {string} config.baseURL - Some other custom base path URL.\n * @property {string} config.azureOpenAIEndpoint - The endpoint for the Azure OpenAI instance, e.g. `https://example-resource.azure.openai.com/`.\n *\n * The function operates as follows:\n * - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n * - If both `azureOpenAIEndpoint` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIEndpoint}/openai/deployments/${azureOpenAIApiDeploymentName}`).\n * - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n * - If none of the above conditions are met, return any custom `baseURL`.\n * - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n *\n * @throws Will throw an error if the necessary parameters for generating the URL are missing.\n *\n * @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n */ function getEndpoint(config) {\n    const { azureOpenAIApiDeploymentName, azureOpenAIApiInstanceName, azureOpenAIApiKey, azureOpenAIBasePath, baseURL, azureADTokenProvider, azureOpenAIEndpoint } = config;\n    if ((azureOpenAIApiKey || azureADTokenProvider) && azureOpenAIBasePath && azureOpenAIApiDeploymentName) {\n        return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;\n    }\n    if ((azureOpenAIApiKey || azureADTokenProvider) && azureOpenAIEndpoint && azureOpenAIApiDeploymentName) {\n        return `${azureOpenAIEndpoint}/openai/deployments/${azureOpenAIApiDeploymentName}`;\n    }\n    if (azureOpenAIApiKey || azureADTokenProvider) {\n        if (!azureOpenAIApiInstanceName) {\n            throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n        }\n        if (!azureOpenAIApiDeploymentName) {\n            throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n        }\n        return `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;\n    }\n    return baseURL;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9henVyZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBdUJDLEdBQ00sU0FBU0EsWUFBWUMsTUFBTTtJQUM5QixNQUFNLEVBQUVDLDRCQUE0QixFQUFFQywwQkFBMEIsRUFBRUMsaUJBQWlCLEVBQUVDLG1CQUFtQixFQUFFQyxPQUFPLEVBQUVDLG9CQUFvQixFQUFFQyxtQkFBbUIsRUFBRyxHQUFHUDtJQUNsSyxJQUFJLENBQUNHLHFCQUFxQkcsb0JBQW1CLEtBQ3pDRix1QkFDQUgsOEJBQThCO1FBQzlCLE9BQU8sQ0FBQyxFQUFFRyxvQkFBb0IsQ0FBQyxFQUFFSCw2QkFBNkIsQ0FBQztJQUNuRTtJQUNBLElBQUksQ0FBQ0UscUJBQXFCRyxvQkFBbUIsS0FDekNDLHVCQUNBTiw4QkFBOEI7UUFDOUIsT0FBTyxDQUFDLEVBQUVNLG9CQUFvQixvQkFBb0IsRUFBRU4sNkJBQTZCLENBQUM7SUFDdEY7SUFDQSxJQUFJRSxxQkFBcUJHLHNCQUFzQjtRQUMzQyxJQUFJLENBQUNKLDRCQUE0QjtZQUM3QixNQUFNLElBQUlNLE1BQU07UUFDcEI7UUFDQSxJQUFJLENBQUNQLDhCQUE4QjtZQUMvQixNQUFNLElBQUlPLE1BQU07UUFDcEI7UUFDQSxPQUFPLENBQUMsUUFBUSxFQUFFTiwyQkFBMkIscUNBQXFDLEVBQUVELDZCQUE2QixDQUFDO0lBQ3RIO0lBQ0EsT0FBT0k7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvYXp1cmUuanM/ZDg3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGFuIGVuZHBvaW50IFVSTCBmb3IgKEF6dXJlKSBPcGVuQUlcbiAqIGJhc2VkIG9uIHRoZSBjb25maWd1cmF0aW9uIHBhcmFtZXRlcnMgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIHtPcGVuQUlFbmRwb2ludENvbmZpZ30gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciB0aGUgKEF6dXJlKSBlbmRwb2ludC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUgLSBUaGUgZGVwbG95bWVudCBuYW1lIG9mIEF6dXJlIE9wZW5BSS5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUgLSBUaGUgaW5zdGFuY2UgbmFtZSBvZiBBenVyZSBPcGVuQUksIGUuZy4gYGV4YW1wbGUtcmVzb3VyY2VgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbmZpZy5henVyZU9wZW5BSUFwaUtleSAtIFRoZSBBUEkgS2V5IGZvciBBenVyZSBPcGVuQUkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29uZmlnLmF6dXJlT3BlbkFJQmFzZVBhdGggLSBUaGUgYmFzZSBwYXRoIGZvciBBenVyZSBPcGVuQUksIGUuZy4gYGh0dHBzOi8vZXhhbXBsZS1yZXNvdXJjZS5henVyZS5vcGVuYWkuY29tL29wZW5haS9kZXBsb3ltZW50cy9gLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbmZpZy5iYXNlVVJMIC0gU29tZSBvdGhlciBjdXN0b20gYmFzZSBwYXRoIFVSTC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb25maWcuYXp1cmVPcGVuQUlFbmRwb2ludCAtIFRoZSBlbmRwb2ludCBmb3IgdGhlIEF6dXJlIE9wZW5BSSBpbnN0YW5jZSwgZS5nLiBgaHR0cHM6Ly9leGFtcGxlLXJlc291cmNlLmF6dXJlLm9wZW5haS5jb20vYC5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gb3BlcmF0ZXMgYXMgZm9sbG93czpcbiAqIC0gSWYgYm90aCBgYXp1cmVPcGVuQUlCYXNlUGF0aGAgYW5kIGBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lYCAocGx1cyBgYXp1cmVPcGVuQUlBcGlLZXlgKSBhcmUgcHJvdmlkZWQsIGl0IHJldHVybnMgYW4gVVJMIGNvbWJpbmluZyB0aGVzZSB0d28gcGFyYW1ldGVycyAoYCR7YXp1cmVPcGVuQUlCYXNlUGF0aH0vJHthenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lfWApLlxuICogLSBJZiBib3RoIGBhenVyZU9wZW5BSUVuZHBvaW50YCBhbmQgYGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWVgIChwbHVzIGBhenVyZU9wZW5BSUFwaUtleWApIGFyZSBwcm92aWRlZCwgaXQgcmV0dXJucyBhbiBVUkwgY29tYmluaW5nIHRoZXNlIHR3byBwYXJhbWV0ZXJzIChgJHthenVyZU9wZW5BSUVuZHBvaW50fS9vcGVuYWkvZGVwbG95bWVudHMvJHthenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lfWApLlxuICogLSBJZiBgYXp1cmVPcGVuQUlBcGlLZXlgIGlzIHByb3ZpZGVkLCBpdCBjaGVja3MgZm9yIGBhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZWAgYW5kIGBhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lYCBhbmQgdGhyb3dzIGFuIGVycm9yIGlmIGFueSBvZiB0aGVzZSBpcyBtaXNzaW5nLiBJZiBib3RoIGFyZSBwcm92aWRlZCwgaXQgZ2VuZXJhdGVzIGFuIFVSTCBpbmNvcnBvcmF0aW5nIHRoZXNlIHBhcmFtZXRlcnMuXG4gKiAtIElmIG5vbmUgb2YgdGhlIGFib3ZlIGNvbmRpdGlvbnMgYXJlIG1ldCwgcmV0dXJuIGFueSBjdXN0b20gYGJhc2VVUkxgLlxuICogLSBUaGUgZnVuY3Rpb24gcmV0dXJucyB0aGUgZ2VuZXJhdGVkIFVSTCBhcyBhIHN0cmluZywgb3IgdW5kZWZpbmVkIGlmIG5vIGN1c3RvbSBwYXRocyBhcmUgc3BlY2lmaWVkLlxuICpcbiAqIEB0aHJvd3MgV2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgbmVjZXNzYXJ5IHBhcmFtZXRlcnMgZm9yIGdlbmVyYXRpbmcgdGhlIFVSTCBhcmUgbWlzc2luZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nIHwgdW5kZWZpbmVkfSBUaGUgZ2VuZXJhdGVkIChBenVyZSkgT3BlbkFJIGVuZHBvaW50IFVSTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVuZHBvaW50KGNvbmZpZykge1xuICAgIGNvbnN0IHsgYXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZSwgYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUsIGF6dXJlT3BlbkFJQXBpS2V5LCBhenVyZU9wZW5BSUJhc2VQYXRoLCBiYXNlVVJMLCBhenVyZUFEVG9rZW5Qcm92aWRlciwgYXp1cmVPcGVuQUlFbmRwb2ludCwgfSA9IGNvbmZpZztcbiAgICBpZiAoKGF6dXJlT3BlbkFJQXBpS2V5IHx8IGF6dXJlQURUb2tlblByb3ZpZGVyKSAmJlxuICAgICAgICBhenVyZU9wZW5BSUJhc2VQYXRoICYmXG4gICAgICAgIGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGAke2F6dXJlT3BlbkFJQmFzZVBhdGh9LyR7YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZX1gO1xuICAgIH1cbiAgICBpZiAoKGF6dXJlT3BlbkFJQXBpS2V5IHx8IGF6dXJlQURUb2tlblByb3ZpZGVyKSAmJlxuICAgICAgICBhenVyZU9wZW5BSUVuZHBvaW50ICYmXG4gICAgICAgIGF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGAke2F6dXJlT3BlbkFJRW5kcG9pbnR9L29wZW5haS9kZXBsb3ltZW50cy8ke2F6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWV9YDtcbiAgICB9XG4gICAgaWYgKGF6dXJlT3BlbkFJQXBpS2V5IHx8IGF6dXJlQURUb2tlblByb3ZpZGVyKSB7XG4gICAgICAgIGlmICghYXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF6dXJlT3BlbkFJQXBpSW5zdGFuY2VOYW1lIGlzIHJlcXVpcmVkIHdoZW4gdXNpbmcgYXp1cmVPcGVuQUlBcGlLZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhenVyZU9wZW5BSUFwaURlcGxveW1lbnROYW1lIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyIHdoZW4gdXNpbmcgYXp1cmVPcGVuQUlBcGlLZXlcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGBodHRwczovLyR7YXp1cmVPcGVuQUlBcGlJbnN0YW5jZU5hbWV9Lm9wZW5haS5henVyZS5jb20vb3BlbmFpL2RlcGxveW1lbnRzLyR7YXp1cmVPcGVuQUlBcGlEZXBsb3ltZW50TmFtZX1gO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZVVSTDtcbn1cbiJdLCJuYW1lcyI6WyJnZXRFbmRwb2ludCIsImNvbmZpZyIsImF6dXJlT3BlbkFJQXBpRGVwbG95bWVudE5hbWUiLCJhenVyZU9wZW5BSUFwaUluc3RhbmNlTmFtZSIsImF6dXJlT3BlbkFJQXBpS2V5IiwiYXp1cmVPcGVuQUlCYXNlUGF0aCIsImJhc2VVUkwiLCJhenVyZUFEVG9rZW5Qcm92aWRlciIsImF6dXJlT3BlbkFJRW5kcG9pbnQiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/azure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/errors.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/errors.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLangChainErrorFields: () => (/* binding */ addLangChainErrorFields)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/no-explicit-any */ /* eslint-disable no-param-reassign */ function addLangChainErrorFields(error, lc_error_code) {\n    error.lc_error_code = lc_error_code;\n    error.message = `${error.message}\\n\\nTroubleshooting URL: https://js.langchain.com/docs/troubleshooting/errors/${lc_error_code}/\\n`;\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHFEQUFxRCxHQUNyRCxvQ0FBb0MsR0FDN0IsU0FBU0Esd0JBQXdCQyxLQUFLLEVBQUVDLGFBQWE7SUFDeERELE1BQU1DLGFBQWEsR0FBR0E7SUFDdEJELE1BQU1FLE9BQU8sR0FBRyxDQUFDLEVBQUVGLE1BQU1FLE9BQU8sQ0FBQyw4RUFBOEUsRUFBRUQsY0FBYyxHQUFHLENBQUM7SUFDbkksT0FBT0Q7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvZXJyb3JzLmpzP2I3NjQiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyhlcnJvciwgbGNfZXJyb3JfY29kZSkge1xuICAgIGVycm9yLmxjX2Vycm9yX2NvZGUgPSBsY19lcnJvcl9jb2RlO1xuICAgIGVycm9yLm1lc3NhZ2UgPSBgJHtlcnJvci5tZXNzYWdlfVxcblxcblRyb3VibGVzaG9vdGluZyBVUkw6IGh0dHBzOi8vanMubGFuZ2NoYWluLmNvbS9kb2NzL3Ryb3VibGVzaG9vdGluZy9lcnJvcnMvJHtsY19lcnJvcl9jb2RlfS9cXG5gO1xuICAgIHJldHVybiBlcnJvcjtcbn1cbiJdLCJuYW1lcyI6WyJhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyIsImVycm9yIiwibGNfZXJyb3JfY29kZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatFunctionDefinitions: () => (/* binding */ formatFunctionDefinitions)\n/* harmony export */ });\nfunction isAnyOfProp(prop) {\n    return prop.anyOf !== undefined && Array.isArray(prop.anyOf);\n}\n// When OpenAI use functions in the prompt, they format them as TypeScript definitions rather than OpenAPI JSON schemas.\n// This function converts the JSON schemas into TypeScript definitions.\nfunction formatFunctionDefinitions(functions) {\n    const lines = [\n        \"namespace functions {\",\n        \"\"\n    ];\n    for (const f of functions){\n        if (f.description) {\n            lines.push(`// ${f.description}`);\n        }\n        if (Object.keys(f.parameters.properties ?? {}).length > 0) {\n            lines.push(`type ${f.name} = (_: {`);\n            lines.push(formatObjectProperties(f.parameters, 0));\n            lines.push(\"}) => any;\");\n        } else {\n            lines.push(`type ${f.name} = () => any;`);\n        }\n        lines.push(\"\");\n    }\n    lines.push(\"} // namespace functions\");\n    return lines.join(\"\\n\");\n}\n// Format just the properties of an object (not including the surrounding braces)\nfunction formatObjectProperties(obj, indent) {\n    const lines = [];\n    for (const [name, param] of Object.entries(obj.properties ?? {})){\n        if (param.description && indent < 2) {\n            lines.push(`// ${param.description}`);\n        }\n        if (obj.required?.includes(name)) {\n            lines.push(`${name}: ${formatType(param, indent)},`);\n        } else {\n            lines.push(`${name}?: ${formatType(param, indent)},`);\n        }\n    }\n    return lines.map((line)=>\" \".repeat(indent) + line).join(\"\\n\");\n}\n// Format a single property type\nfunction formatType(param, indent) {\n    if (isAnyOfProp(param)) {\n        return param.anyOf.map((v)=>formatType(v, indent)).join(\" | \");\n    }\n    switch(param.type){\n        case \"string\":\n            if (param.enum) {\n                return param.enum.map((v)=>`\"${v}\"`).join(\" | \");\n            }\n            return \"string\";\n        case \"number\":\n            if (param.enum) {\n                return param.enum.map((v)=>`${v}`).join(\" | \");\n            }\n            return \"number\";\n        case \"integer\":\n            if (param.enum) {\n                return param.enum.map((v)=>`${v}`).join(\" | \");\n            }\n            return \"number\";\n        case \"boolean\":\n            return \"boolean\";\n        case \"null\":\n            return \"null\";\n        case \"object\":\n            return [\n                \"{\",\n                formatObjectProperties(param, indent + 2),\n                \"}\"\n            ].join(\"\\n\");\n        case \"array\":\n            if (param.items) {\n                return `${formatType(param.items, indent)}[]`;\n            }\n            return \"any[]\";\n        default:\n            return \"\";\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9vcGVuYWktZm9ybWF0LWZuZGVmLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxTQUFTQSxZQUFZQyxJQUFJO0lBQ3JCLE9BQVFBLEtBQUtDLEtBQUssS0FBS0MsYUFDbkJDLE1BQU1DLE9BQU8sQ0FBQ0osS0FBS0MsS0FBSztBQUNoQztBQUNBLHdIQUF3SDtBQUN4SCx1RUFBdUU7QUFDaEUsU0FBU0ksMEJBQTBCQyxTQUFTO0lBQy9DLE1BQU1DLFFBQVE7UUFBQztRQUF5QjtLQUFHO0lBQzNDLEtBQUssTUFBTUMsS0FBS0YsVUFBVztRQUN2QixJQUFJRSxFQUFFQyxXQUFXLEVBQUU7WUFDZkYsTUFBTUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFRixFQUFFQyxXQUFXLENBQUMsQ0FBQztRQUNwQztRQUNBLElBQUlFLE9BQU9DLElBQUksQ0FBQ0osRUFBRUssVUFBVSxDQUFDQyxVQUFVLElBQUksQ0FBQyxHQUFHQyxNQUFNLEdBQUcsR0FBRztZQUN2RFIsTUFBTUcsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFRixFQUFFUSxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ25DVCxNQUFNRyxJQUFJLENBQUNPLHVCQUF1QlQsRUFBRUssVUFBVSxFQUFFO1lBQ2hETixNQUFNRyxJQUFJLENBQUM7UUFDZixPQUNLO1lBQ0RILE1BQU1HLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRUYsRUFBRVEsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QztRQUNBVCxNQUFNRyxJQUFJLENBQUM7SUFDZjtJQUNBSCxNQUFNRyxJQUFJLENBQUM7SUFDWCxPQUFPSCxNQUFNVyxJQUFJLENBQUM7QUFDdEI7QUFDQSxpRkFBaUY7QUFDakYsU0FBU0QsdUJBQXVCRSxHQUFHLEVBQUVDLE1BQU07SUFDdkMsTUFBTWIsUUFBUSxFQUFFO0lBQ2hCLEtBQUssTUFBTSxDQUFDUyxNQUFNSyxNQUFNLElBQUlWLE9BQU9XLE9BQU8sQ0FBQ0gsSUFBSUwsVUFBVSxJQUFJLENBQUMsR0FBSTtRQUM5RCxJQUFJTyxNQUFNWixXQUFXLElBQUlXLFNBQVMsR0FBRztZQUNqQ2IsTUFBTUcsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFVyxNQUFNWixXQUFXLENBQUMsQ0FBQztRQUN4QztRQUNBLElBQUlVLElBQUlJLFFBQVEsRUFBRUMsU0FBU1IsT0FBTztZQUM5QlQsTUFBTUcsSUFBSSxDQUFDLENBQUMsRUFBRU0sS0FBSyxFQUFFLEVBQUVTLFdBQVdKLE9BQU9ELFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELE9BQ0s7WUFDRGIsTUFBTUcsSUFBSSxDQUFDLENBQUMsRUFBRU0sS0FBSyxHQUFHLEVBQUVTLFdBQVdKLE9BQU9ELFFBQVEsQ0FBQyxDQUFDO1FBQ3hEO0lBQ0o7SUFDQSxPQUFPYixNQUFNbUIsR0FBRyxDQUFDLENBQUNDLE9BQVMsSUFBSUMsTUFBTSxDQUFDUixVQUFVTyxNQUFNVCxJQUFJLENBQUM7QUFDL0Q7QUFDQSxnQ0FBZ0M7QUFDaEMsU0FBU08sV0FBV0osS0FBSyxFQUFFRCxNQUFNO0lBQzdCLElBQUlyQixZQUFZc0IsUUFBUTtRQUNwQixPQUFPQSxNQUFNcEIsS0FBSyxDQUFDeUIsR0FBRyxDQUFDLENBQUNHLElBQU1KLFdBQVdJLEdBQUdULFNBQVNGLElBQUksQ0FBQztJQUM5RDtJQUNBLE9BQVFHLE1BQU1TLElBQUk7UUFDZCxLQUFLO1lBQ0QsSUFBSVQsTUFBTVUsSUFBSSxFQUFFO2dCQUNaLE9BQU9WLE1BQU1VLElBQUksQ0FBQ0wsR0FBRyxDQUFDLENBQUNHLElBQU0sQ0FBQyxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxDQUFDLEVBQUVYLElBQUksQ0FBQztZQUNoRDtZQUNBLE9BQU87UUFDWCxLQUFLO1lBQ0QsSUFBSUcsTUFBTVUsSUFBSSxFQUFFO2dCQUNaLE9BQU9WLE1BQU1VLElBQUksQ0FBQ0wsR0FBRyxDQUFDLENBQUNHLElBQU0sQ0FBQyxFQUFFQSxFQUFFLENBQUMsRUFBRVgsSUFBSSxDQUFDO1lBQzlDO1lBQ0EsT0FBTztRQUNYLEtBQUs7WUFDRCxJQUFJRyxNQUFNVSxJQUFJLEVBQUU7Z0JBQ1osT0FBT1YsTUFBTVUsSUFBSSxDQUFDTCxHQUFHLENBQUMsQ0FBQ0csSUFBTSxDQUFDLEVBQUVBLEVBQUUsQ0FBQyxFQUFFWCxJQUFJLENBQUM7WUFDOUM7WUFDQSxPQUFPO1FBQ1gsS0FBSztZQUNELE9BQU87UUFDWCxLQUFLO1lBQ0QsT0FBTztRQUNYLEtBQUs7WUFDRCxPQUFPO2dCQUFDO2dCQUFLRCx1QkFBdUJJLE9BQU9ELFNBQVM7Z0JBQUk7YUFBSSxDQUFDRixJQUFJLENBQUM7UUFDdEUsS0FBSztZQUNELElBQUlHLE1BQU1XLEtBQUssRUFBRTtnQkFDYixPQUFPLENBQUMsRUFBRVAsV0FBV0osTUFBTVcsS0FBSyxFQUFFWixRQUFRLEVBQUUsQ0FBQztZQUNqRDtZQUNBLE9BQU87UUFDWDtZQUNJLE9BQU87SUFDZjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9vcGVuYWktZm9ybWF0LWZuZGVmLmpzPzhiMjkiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNBbnlPZlByb3AocHJvcCkge1xuICAgIHJldHVybiAocHJvcC5hbnlPZiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIEFycmF5LmlzQXJyYXkocHJvcC5hbnlPZikpO1xufVxuLy8gV2hlbiBPcGVuQUkgdXNlIGZ1bmN0aW9ucyBpbiB0aGUgcHJvbXB0LCB0aGV5IGZvcm1hdCB0aGVtIGFzIFR5cGVTY3JpcHQgZGVmaW5pdGlvbnMgcmF0aGVyIHRoYW4gT3BlbkFQSSBKU09OIHNjaGVtYXMuXG4vLyBUaGlzIGZ1bmN0aW9uIGNvbnZlcnRzIHRoZSBKU09OIHNjaGVtYXMgaW50byBUeXBlU2NyaXB0IGRlZmluaXRpb25zLlxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEZ1bmN0aW9uRGVmaW5pdGlvbnMoZnVuY3Rpb25zKSB7XG4gICAgY29uc3QgbGluZXMgPSBbXCJuYW1lc3BhY2UgZnVuY3Rpb25zIHtcIiwgXCJcIl07XG4gICAgZm9yIChjb25zdCBmIG9mIGZ1bmN0aW9ucykge1xuICAgICAgICBpZiAoZi5kZXNjcmlwdGlvbikge1xuICAgICAgICAgICAgbGluZXMucHVzaChgLy8gJHtmLmRlc2NyaXB0aW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhmLnBhcmFtZXRlcnMucHJvcGVydGllcyA/PyB7fSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGluZXMucHVzaChgdHlwZSAke2YubmFtZX0gPSAoXzoge2ApO1xuICAgICAgICAgICAgbGluZXMucHVzaChmb3JtYXRPYmplY3RQcm9wZXJ0aWVzKGYucGFyYW1ldGVycywgMCkpO1xuICAgICAgICAgICAgbGluZXMucHVzaChcIn0pID0+IGFueTtcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGB0eXBlICR7Zi5uYW1lfSA9ICgpID0+IGFueTtgKTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lcy5wdXNoKFwiXCIpO1xuICAgIH1cbiAgICBsaW5lcy5wdXNoKFwifSAvLyBuYW1lc3BhY2UgZnVuY3Rpb25zXCIpO1xuICAgIHJldHVybiBsaW5lcy5qb2luKFwiXFxuXCIpO1xufVxuLy8gRm9ybWF0IGp1c3QgdGhlIHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0IChub3QgaW5jbHVkaW5nIHRoZSBzdXJyb3VuZGluZyBicmFjZXMpXG5mdW5jdGlvbiBmb3JtYXRPYmplY3RQcm9wZXJ0aWVzKG9iaiwgaW5kZW50KSB7XG4gICAgY29uc3QgbGluZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBwYXJhbV0gb2YgT2JqZWN0LmVudHJpZXMob2JqLnByb3BlcnRpZXMgPz8ge30pKSB7XG4gICAgICAgIGlmIChwYXJhbS5kZXNjcmlwdGlvbiAmJiBpbmRlbnQgPCAyKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGAvLyAke3BhcmFtLmRlc2NyaXB0aW9ufWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvYmoucmVxdWlyZWQ/LmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGAke25hbWV9OiAke2Zvcm1hdFR5cGUocGFyYW0sIGluZGVudCl9LGApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGluZXMucHVzaChgJHtuYW1lfT86ICR7Zm9ybWF0VHlwZShwYXJhbSwgaW5kZW50KX0sYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzLm1hcCgobGluZSkgPT4gXCIgXCIucmVwZWF0KGluZGVudCkgKyBsaW5lKS5qb2luKFwiXFxuXCIpO1xufVxuLy8gRm9ybWF0IGEgc2luZ2xlIHByb3BlcnR5IHR5cGVcbmZ1bmN0aW9uIGZvcm1hdFR5cGUocGFyYW0sIGluZGVudCkge1xuICAgIGlmIChpc0FueU9mUHJvcChwYXJhbSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtLmFueU9mLm1hcCgodikgPT4gZm9ybWF0VHlwZSh2LCBpbmRlbnQpKS5qb2luKFwiIHwgXCIpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHBhcmFtLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgaWYgKHBhcmFtLmVudW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0uZW51bS5tYXAoKHYpID0+IGBcIiR7dn1cImApLmpvaW4oXCIgfCBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIjtcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgaWYgKHBhcmFtLmVudW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0uZW51bS5tYXAoKHYpID0+IGAke3Z9YCkuam9pbihcIiB8IFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICAgICAgaWYgKHBhcmFtLmVudW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW0uZW51bS5tYXAoKHYpID0+IGAke3Z9YCkuam9pbihcIiB8IFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIm51bWJlclwiO1xuICAgICAgICBjYXNlIFwiYm9vbGVhblwiOlxuICAgICAgICAgICAgcmV0dXJuIFwiYm9vbGVhblwiO1xuICAgICAgICBjYXNlIFwibnVsbFwiOlxuICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICByZXR1cm4gW1wie1wiLCBmb3JtYXRPYmplY3RQcm9wZXJ0aWVzKHBhcmFtLCBpbmRlbnQgKyAyKSwgXCJ9XCJdLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIGNhc2UgXCJhcnJheVwiOlxuICAgICAgICAgICAgaWYgKHBhcmFtLml0ZW1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2Zvcm1hdFR5cGUocGFyYW0uaXRlbXMsIGluZGVudCl9W11gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFwiYW55W11cIjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6WyJpc0FueU9mUHJvcCIsInByb3AiLCJhbnlPZiIsInVuZGVmaW5lZCIsIkFycmF5IiwiaXNBcnJheSIsImZvcm1hdEZ1bmN0aW9uRGVmaW5pdGlvbnMiLCJmdW5jdGlvbnMiLCJsaW5lcyIsImYiLCJkZXNjcmlwdGlvbiIsInB1c2giLCJPYmplY3QiLCJrZXlzIiwicGFyYW1ldGVycyIsInByb3BlcnRpZXMiLCJsZW5ndGgiLCJuYW1lIiwiZm9ybWF0T2JqZWN0UHJvcGVydGllcyIsImpvaW4iLCJvYmoiLCJpbmRlbnQiLCJwYXJhbSIsImVudHJpZXMiLCJyZXF1aXJlZCIsImluY2x1ZGVzIiwiZm9ybWF0VHlwZSIsIm1hcCIsImxpbmUiLCJyZXBlYXQiLCJ2IiwidHlwZSIsImVudW0iLCJpdGVtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/openai-format-fndef.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js":
/*!*************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/openai.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* binding */ formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.convertToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__.convertToOpenAITool),\n/* harmony export */   formatToOpenAIToolChoice: () => (/* binding */ formatToOpenAIToolChoice),\n/* harmony export */   wrapOpenAIClientError: () => (/* binding */ wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/error.mjs\");\n/* harmony import */ var zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod-to-json-schema */ \"(rsc)/./node_modules/zod-to-json-schema/dist/esm/index.js\");\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/@langchain/openai/dist/utils/errors.js\");\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction wrapOpenAIClientError(e) {\n    let error;\n    if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_3__.APIConnectionTimeoutError.name) {\n        error = new Error(e.message);\n        error.name = \"TimeoutError\";\n    } else if (e.constructor.name === openai__WEBPACK_IMPORTED_MODULE_3__.APIUserAbortError.name) {\n        error = new Error(e.message);\n        error.name = \"AbortError\";\n    } else if (e.status === 400 && e.message.includes(\"tool_calls\")) {\n        error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.addLangChainErrorFields)(e, \"INVALID_TOOL_RESULTS\");\n    } else if (e.status === 401) {\n        error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.addLangChainErrorFields)(e, \"MODEL_AUTHENTICATION\");\n    } else if (e.status === 429) {\n        error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.addLangChainErrorFields)(e, \"MODEL_RATE_LIMIT\");\n    } else if (e.status === 404) {\n        error = (0,_errors_js__WEBPACK_IMPORTED_MODULE_2__.addLangChainErrorFields)(e, \"MODEL_NOT_FOUND\");\n    } else {\n        error = e;\n    }\n    return error;\n}\n\nfunction formatToOpenAIAssistantTool(tool) {\n    return {\n        type: \"function\",\n        function: {\n            name: tool.name,\n            description: tool.description,\n            parameters: (0,zod_to_json_schema__WEBPACK_IMPORTED_MODULE_0__.zodToJsonSchema)(tool.schema)\n        }\n    };\n}\nfunction formatToOpenAIToolChoice(toolChoice) {\n    if (!toolChoice) {\n        return undefined;\n    } else if (toolChoice === \"any\" || toolChoice === \"required\") {\n        return \"required\";\n    } else if (toolChoice === \"auto\") {\n        return \"auto\";\n    } else if (toolChoice === \"none\") {\n        return \"none\";\n    } else if (typeof toolChoice === \"string\") {\n        return {\n            type: \"function\",\n            function: {\n                name: toolChoice\n            }\n        };\n    } else {\n        return toolChoice;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9vcGVuYWkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ2xCO0FBQ2tEO0FBQ2pEO0FBQ3RELDhEQUE4RDtBQUN2RCxTQUFTTSxzQkFBc0JDLENBQUM7SUFDbkMsSUFBSUM7SUFDSixJQUFJRCxFQUFFRSxXQUFXLENBQUNDLElBQUksS0FBS1YsNkRBQXlCQSxDQUFDVSxJQUFJLEVBQUU7UUFDdkRGLFFBQVEsSUFBSUcsTUFBTUosRUFBRUssT0FBTztRQUMzQkosTUFBTUUsSUFBSSxHQUFHO0lBQ2pCLE9BQ0ssSUFBSUgsRUFBRUUsV0FBVyxDQUFDQyxJQUFJLEtBQUtULHFEQUFpQkEsQ0FBQ1MsSUFBSSxFQUFFO1FBQ3BERixRQUFRLElBQUlHLE1BQU1KLEVBQUVLLE9BQU87UUFDM0JKLE1BQU1FLElBQUksR0FBRztJQUNqQixPQUNLLElBQUlILEVBQUVNLE1BQU0sS0FBSyxPQUFPTixFQUFFSyxPQUFPLENBQUNFLFFBQVEsQ0FBQyxlQUFlO1FBQzNETixRQUFRSCxtRUFBdUJBLENBQUNFLEdBQUc7SUFDdkMsT0FDSyxJQUFJQSxFQUFFTSxNQUFNLEtBQUssS0FBSztRQUN2QkwsUUFBUUgsbUVBQXVCQSxDQUFDRSxHQUFHO0lBQ3ZDLE9BQ0ssSUFBSUEsRUFBRU0sTUFBTSxLQUFLLEtBQUs7UUFDdkJMLFFBQVFILG1FQUF1QkEsQ0FBQ0UsR0FBRztJQUN2QyxPQUNLLElBQUlBLEVBQUVNLE1BQU0sS0FBSyxLQUFLO1FBQ3ZCTCxRQUFRSCxtRUFBdUJBLENBQUNFLEdBQUc7SUFDdkMsT0FDSztRQUNEQyxRQUFRRDtJQUNaO0lBQ0EsT0FBT0M7QUFDWDtBQUN5RztBQUNsRyxTQUFTUyw0QkFBNEJDLElBQUk7SUFDNUMsT0FBTztRQUNIQyxNQUFNO1FBQ05DLFVBQVU7WUFDTlYsTUFBTVEsS0FBS1IsSUFBSTtZQUNmVyxhQUFhSCxLQUFLRyxXQUFXO1lBQzdCQyxZQUFZcEIsbUVBQWVBLENBQUNnQixLQUFLSyxNQUFNO1FBQzNDO0lBQ0o7QUFDSjtBQUNPLFNBQVNDLHlCQUF5QkMsVUFBVTtJQUMvQyxJQUFJLENBQUNBLFlBQVk7UUFDYixPQUFPQztJQUNYLE9BQ0ssSUFBSUQsZUFBZSxTQUFTQSxlQUFlLFlBQVk7UUFDeEQsT0FBTztJQUNYLE9BQ0ssSUFBSUEsZUFBZSxRQUFRO1FBQzVCLE9BQU87SUFDWCxPQUNLLElBQUlBLGVBQWUsUUFBUTtRQUM1QixPQUFPO0lBQ1gsT0FDSyxJQUFJLE9BQU9BLGVBQWUsVUFBVTtRQUNyQyxPQUFPO1lBQ0hOLE1BQU07WUFDTkMsVUFBVTtnQkFDTlYsTUFBTWU7WUFDVjtRQUNKO0lBQ0osT0FDSztRQUNELE9BQU9BO0lBQ1g7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2JldHRlci10b2RvLy4vbm9kZV9tb2R1bGVzL0BsYW5nY2hhaW4vb3BlbmFpL2Rpc3QvdXRpbHMvb3BlbmFpLmpzPzkzM2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJQ29ubmVjdGlvblRpbWVvdXRFcnJvciwgQVBJVXNlckFib3J0RXJyb3IsIH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgem9kVG9Kc29uU2NoZW1hIH0gZnJvbSBcInpvZC10by1qc29uLXNjaGVtYVwiO1xuaW1wb3J0IHsgY29udmVydFRvT3BlbkFJRnVuY3Rpb24sIGNvbnZlcnRUb09wZW5BSVRvb2wsIH0gZnJvbSBcIkBsYW5nY2hhaW4vY29yZS91dGlscy9mdW5jdGlvbl9jYWxsaW5nXCI7XG5pbXBvcnQgeyBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyB9IGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiB3cmFwT3BlbkFJQ2xpZW50RXJyb3IoZSkge1xuICAgIGxldCBlcnJvcjtcbiAgICBpZiAoZS5jb25zdHJ1Y3Rvci5uYW1lID09PSBBUElDb25uZWN0aW9uVGltZW91dEVycm9yLm5hbWUpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgZXJyb3IubmFtZSA9IFwiVGltZW91dEVycm9yXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGUuY29uc3RydWN0b3IubmFtZSA9PT0gQVBJVXNlckFib3J0RXJyb3IubmFtZSkge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICBlcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGUuc3RhdHVzID09PSA0MDAgJiYgZS5tZXNzYWdlLmluY2x1ZGVzKFwidG9vbF9jYWxsc1wiKSkge1xuICAgICAgICBlcnJvciA9IGFkZExhbmdDaGFpbkVycm9yRmllbGRzKGUsIFwiSU5WQUxJRF9UT09MX1JFU1VMVFNcIik7XG4gICAgfVxuICAgIGVsc2UgaWYgKGUuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgZXJyb3IgPSBhZGRMYW5nQ2hhaW5FcnJvckZpZWxkcyhlLCBcIk1PREVMX0FVVEhFTlRJQ0FUSU9OXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgIGVycm9yID0gYWRkTGFuZ0NoYWluRXJyb3JGaWVsZHMoZSwgXCJNT0RFTF9SQVRFX0xJTUlUXCIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIGVycm9yID0gYWRkTGFuZ0NoYWluRXJyb3JGaWVsZHMoZSwgXCJNT0RFTF9OT1RfRk9VTkRcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlcnJvciA9IGU7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbmV4cG9ydCB7IGNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uIGFzIGZvcm1hdFRvT3BlbkFJRnVuY3Rpb24sIGNvbnZlcnRUb09wZW5BSVRvb2wgYXMgZm9ybWF0VG9PcGVuQUlUb29sLCB9O1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFRvT3BlbkFJQXNzaXN0YW50VG9vbCh0b29sKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBmdW5jdGlvbjoge1xuICAgICAgICAgICAgbmFtZTogdG9vbC5uYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IHRvb2wuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB6b2RUb0pzb25TY2hlbWEodG9vbC5zY2hlbWEpLFxuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0VG9PcGVuQUlUb29sQ2hvaWNlKHRvb2xDaG9pY2UpIHtcbiAgICBpZiAoIXRvb2xDaG9pY2UpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9vbENob2ljZSA9PT0gXCJhbnlcIiB8fCB0b29sQ2hvaWNlID09PSBcInJlcXVpcmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFwicmVxdWlyZWRcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAodG9vbENob2ljZSA9PT0gXCJhdXRvXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgICBlbHNlIGlmICh0b29sQ2hvaWNlID09PSBcIm5vbmVcIikge1xuICAgICAgICByZXR1cm4gXCJub25lXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB0b29sQ2hvaWNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgICBmdW5jdGlvbjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IHRvb2xDaG9pY2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRvb2xDaG9pY2U7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkFQSUNvbm5lY3Rpb25UaW1lb3V0RXJyb3IiLCJBUElVc2VyQWJvcnRFcnJvciIsInpvZFRvSnNvblNjaGVtYSIsImNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uIiwiY29udmVydFRvT3BlbkFJVG9vbCIsImFkZExhbmdDaGFpbkVycm9yRmllbGRzIiwid3JhcE9wZW5BSUNsaWVudEVycm9yIiwiZSIsImVycm9yIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiRXJyb3IiLCJtZXNzYWdlIiwic3RhdHVzIiwiaW5jbHVkZXMiLCJmb3JtYXRUb09wZW5BSUZ1bmN0aW9uIiwiZm9ybWF0VG9PcGVuQUlUb29sIiwiZm9ybWF0VG9PcGVuQUlBc3Npc3RhbnRUb29sIiwidG9vbCIsInR5cGUiLCJmdW5jdGlvbiIsImRlc2NyaXB0aW9uIiwicGFyYW1ldGVycyIsInNjaGVtYSIsImZvcm1hdFRvT3BlbkFJVG9vbENob2ljZSIsInRvb2xDaG9pY2UiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/openai.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/prompts.js":
/*!**************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/prompts.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertPromptToOpenAI: () => (/* binding */ convertPromptToOpenAI)\n/* harmony export */ });\n/* harmony import */ var _chat_models_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chat_models.js */ \"(rsc)/./node_modules/@langchain/openai/dist/chat_models.js\");\n\n/**\n * Convert a formatted LangChain prompt (e.g. pulled from the hub) into\n * a format expected by OpenAI's JS SDK.\n *\n * Requires the \"@langchain/openai\" package to be installed in addition\n * to the OpenAI SDK.\n *\n * @example\n * ```ts\n * import { convertPromptToOpenAI } from \"langsmith/utils/hub/openai\";\n * import { pull } from \"langchain/hub\";\n *\n * import OpenAI from 'openai';\n *\n * const prompt = await pull(\"jacob/joke-generator\");\n * const formattedPrompt = await prompt.invoke({\n *   topic: \"cats\",\n * });\n *\n * const { messages } = convertPromptToOpenAI(formattedPrompt);\n *\n * const openAIClient = new OpenAI();\n *\n * const openaiResponse = await openAIClient.chat.completions.create({\n *   model: \"gpt-4o\",\n *   messages,\n * });\n * ```\n * @param formattedPrompt\n * @returns A partial OpenAI payload.\n */ function convertPromptToOpenAI(formattedPrompt) {\n    const messages = formattedPrompt.toChatMessages();\n    return {\n        messages: (0,_chat_models_js__WEBPACK_IMPORTED_MODULE_0__._convertMessagesToOpenAIParams)(messages)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9wcm9tcHRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1FO0FBQ25FOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0E4QkMsR0FDTSxTQUFTQyxzQkFBc0JDLGVBQWU7SUFDakQsTUFBTUMsV0FBV0QsZ0JBQWdCRSxjQUFjO0lBQy9DLE9BQU87UUFDSEQsVUFBVUgsK0VBQThCQSxDQUFDRztJQUM3QztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmV0dGVyLXRvZG8vLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy9wcm9tcHRzLmpzPzNkNDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgX2NvbnZlcnRNZXNzYWdlc1RvT3BlbkFJUGFyYW1zIH0gZnJvbSBcIi4uL2NoYXRfbW9kZWxzLmpzXCI7XG4vKipcbiAqIENvbnZlcnQgYSBmb3JtYXR0ZWQgTGFuZ0NoYWluIHByb21wdCAoZS5nLiBwdWxsZWQgZnJvbSB0aGUgaHViKSBpbnRvXG4gKiBhIGZvcm1hdCBleHBlY3RlZCBieSBPcGVuQUkncyBKUyBTREsuXG4gKlxuICogUmVxdWlyZXMgdGhlIFwiQGxhbmdjaGFpbi9vcGVuYWlcIiBwYWNrYWdlIHRvIGJlIGluc3RhbGxlZCBpbiBhZGRpdGlvblxuICogdG8gdGhlIE9wZW5BSSBTREsuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBjb252ZXJ0UHJvbXB0VG9PcGVuQUkgfSBmcm9tIFwibGFuZ3NtaXRoL3V0aWxzL2h1Yi9vcGVuYWlcIjtcbiAqIGltcG9ydCB7IHB1bGwgfSBmcm9tIFwibGFuZ2NoYWluL2h1YlwiO1xuICpcbiAqIGltcG9ydCBPcGVuQUkgZnJvbSAnb3BlbmFpJztcbiAqXG4gKiBjb25zdCBwcm9tcHQgPSBhd2FpdCBwdWxsKFwiamFjb2Ivam9rZS1nZW5lcmF0b3JcIik7XG4gKiBjb25zdCBmb3JtYXR0ZWRQcm9tcHQgPSBhd2FpdCBwcm9tcHQuaW52b2tlKHtcbiAqICAgdG9waWM6IFwiY2F0c1wiLFxuICogfSk7XG4gKlxuICogY29uc3QgeyBtZXNzYWdlcyB9ID0gY29udmVydFByb21wdFRvT3BlbkFJKGZvcm1hdHRlZFByb21wdCk7XG4gKlxuICogY29uc3Qgb3BlbkFJQ2xpZW50ID0gbmV3IE9wZW5BSSgpO1xuICpcbiAqIGNvbnN0IG9wZW5haVJlc3BvbnNlID0gYXdhaXQgb3BlbkFJQ2xpZW50LmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcbiAqICAgbW9kZWw6IFwiZ3B0LTRvXCIsXG4gKiAgIG1lc3NhZ2VzLFxuICogfSk7XG4gKiBgYGBcbiAqIEBwYXJhbSBmb3JtYXR0ZWRQcm9tcHRcbiAqIEByZXR1cm5zIEEgcGFydGlhbCBPcGVuQUkgcGF5bG9hZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRQcm9tcHRUb09wZW5BSShmb3JtYXR0ZWRQcm9tcHQpIHtcbiAgICBjb25zdCBtZXNzYWdlcyA9IGZvcm1hdHRlZFByb21wdC50b0NoYXRNZXNzYWdlcygpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2VzOiBfY29udmVydE1lc3NhZ2VzVG9PcGVuQUlQYXJhbXMobWVzc2FnZXMpLFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiX2NvbnZlcnRNZXNzYWdlc1RvT3BlbkFJUGFyYW1zIiwiY29udmVydFByb21wdFRvT3BlbkFJIiwiZm9ybWF0dGVkUHJvbXB0IiwibWVzc2FnZXMiLCJ0b0NoYXRNZXNzYWdlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/prompts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/dist/utils/tools.js":
/*!************************************************************!*\
  !*** ./node_modules/@langchain/openai/dist/utils/tools.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _convertToOpenAITool: () => (/* binding */ _convertToOpenAITool)\n/* harmony export */ });\n/* harmony import */ var _langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @langchain/core/utils/function_calling */ \"(rsc)/./node_modules/@langchain/core/utils/function_calling.js\");\n/* harmony import */ var openai_helpers_zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai/helpers/zod */ \"(rsc)/./node_modules/openai/helpers/zod.mjs\");\n\n\n/**\n * Formats a tool in either OpenAI format, or LangChain structured tool format\n * into an OpenAI tool format. If the tool is already in OpenAI format, return without\n * any changes. If it is in LangChain structured tool format, convert it to OpenAI tool format\n * using OpenAI's `zodFunction` util, falling back to `convertToOpenAIFunction` if the parameters\n * returned from the `zodFunction` util are not defined.\n *\n * @param {BindToolsInput} tool The tool to convert to an OpenAI tool.\n * @param {Object} [fields] Additional fields to add to the OpenAI tool.\n * @returns {ToolDefinition} The inputted tool in OpenAI tool format.\n */ function _convertToOpenAITool(// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntool, fields) {\n    let toolDef;\n    if ((0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_0__.isLangChainTool)(tool)) {\n        const oaiToolDef = (0,openai_helpers_zod__WEBPACK_IMPORTED_MODULE_1__.zodFunction)({\n            name: tool.name,\n            parameters: tool.schema,\n            description: tool.description\n        });\n        if (!oaiToolDef.function.parameters) {\n            // Fallback to the `convertToOpenAIFunction` util if the parameters are not defined.\n            toolDef = {\n                type: \"function\",\n                function: (0,_langchain_core_utils_function_calling__WEBPACK_IMPORTED_MODULE_0__.convertToOpenAIFunction)(tool, fields)\n            };\n        } else {\n            toolDef = {\n                type: oaiToolDef.type,\n                function: {\n                    name: oaiToolDef.function.name,\n                    description: oaiToolDef.function.description,\n                    parameters: oaiToolDef.function.parameters,\n                    ...fields?.strict !== undefined ? {\n                        strict: fields.strict\n                    } : {}\n                }\n            };\n        }\n    } else {\n        toolDef = tool;\n    }\n    if (fields?.strict !== undefined) {\n        toolDef.function.strict = fields.strict;\n    }\n    return toolDef;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvZGlzdC91dGlscy90b29scy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUc7QUFDbEQ7QUFDakQ7Ozs7Ozs7Ozs7Q0FVQyxHQUNNLFNBQVNHLHFCQUNoQiw4REFBOEQ7QUFDOURDLElBQUksRUFBRUMsTUFBTTtJQUNSLElBQUlDO0lBQ0osSUFBSUwsdUZBQWVBLENBQUNHLE9BQU87UUFDdkIsTUFBTUcsYUFBYUwsK0RBQVdBLENBQUM7WUFDM0JNLE1BQU1KLEtBQUtJLElBQUk7WUFDZkMsWUFBWUwsS0FBS00sTUFBTTtZQUN2QkMsYUFBYVAsS0FBS08sV0FBVztRQUNqQztRQUNBLElBQUksQ0FBQ0osV0FBV0ssUUFBUSxDQUFDSCxVQUFVLEVBQUU7WUFDakMsb0ZBQW9GO1lBQ3BGSCxVQUFVO2dCQUNOTyxNQUFNO2dCQUNORCxVQUFVWiwrRkFBdUJBLENBQUNJLE1BQU1DO1lBQzVDO1FBQ0osT0FDSztZQUNEQyxVQUFVO2dCQUNOTyxNQUFNTixXQUFXTSxJQUFJO2dCQUNyQkQsVUFBVTtvQkFDTkosTUFBTUQsV0FBV0ssUUFBUSxDQUFDSixJQUFJO29CQUM5QkcsYUFBYUosV0FBV0ssUUFBUSxDQUFDRCxXQUFXO29CQUM1Q0YsWUFBWUYsV0FBV0ssUUFBUSxDQUFDSCxVQUFVO29CQUMxQyxHQUFJSixRQUFRUyxXQUFXQyxZQUFZO3dCQUFFRCxRQUFRVCxPQUFPUyxNQUFNO29CQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNyRTtZQUNKO1FBQ0o7SUFDSixPQUNLO1FBQ0RSLFVBQVVGO0lBQ2Q7SUFDQSxJQUFJQyxRQUFRUyxXQUFXQyxXQUFXO1FBQzlCVCxRQUFRTSxRQUFRLENBQUNFLE1BQU0sR0FBR1QsT0FBT1MsTUFBTTtJQUMzQztJQUNBLE9BQU9SO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9kaXN0L3V0aWxzL3Rvb2xzLmpzPzk5YmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmVydFRvT3BlbkFJRnVuY3Rpb24sIGlzTGFuZ0NoYWluVG9vbCwgfSBmcm9tIFwiQGxhbmdjaGFpbi9jb3JlL3V0aWxzL2Z1bmN0aW9uX2NhbGxpbmdcIjtcbmltcG9ydCB7IHpvZEZ1bmN0aW9uIH0gZnJvbSBcIm9wZW5haS9oZWxwZXJzL3pvZFwiO1xuLyoqXG4gKiBGb3JtYXRzIGEgdG9vbCBpbiBlaXRoZXIgT3BlbkFJIGZvcm1hdCwgb3IgTGFuZ0NoYWluIHN0cnVjdHVyZWQgdG9vbCBmb3JtYXRcbiAqIGludG8gYW4gT3BlbkFJIHRvb2wgZm9ybWF0LiBJZiB0aGUgdG9vbCBpcyBhbHJlYWR5IGluIE9wZW5BSSBmb3JtYXQsIHJldHVybiB3aXRob3V0XG4gKiBhbnkgY2hhbmdlcy4gSWYgaXQgaXMgaW4gTGFuZ0NoYWluIHN0cnVjdHVyZWQgdG9vbCBmb3JtYXQsIGNvbnZlcnQgaXQgdG8gT3BlbkFJIHRvb2wgZm9ybWF0XG4gKiB1c2luZyBPcGVuQUkncyBgem9kRnVuY3Rpb25gIHV0aWwsIGZhbGxpbmcgYmFjayB0byBgY29udmVydFRvT3BlbkFJRnVuY3Rpb25gIGlmIHRoZSBwYXJhbWV0ZXJzXG4gKiByZXR1cm5lZCBmcm9tIHRoZSBgem9kRnVuY3Rpb25gIHV0aWwgYXJlIG5vdCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7QmluZFRvb2xzSW5wdXR9IHRvb2wgVGhlIHRvb2wgdG8gY29udmVydCB0byBhbiBPcGVuQUkgdG9vbC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbZmllbGRzXSBBZGRpdGlvbmFsIGZpZWxkcyB0byBhZGQgdG8gdGhlIE9wZW5BSSB0b29sLlxuICogQHJldHVybnMge1Rvb2xEZWZpbml0aW9ufSBUaGUgaW5wdXR0ZWQgdG9vbCBpbiBPcGVuQUkgdG9vbCBmb3JtYXQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY29udmVydFRvT3BlbkFJVG9vbChcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG50b29sLCBmaWVsZHMpIHtcbiAgICBsZXQgdG9vbERlZjtcbiAgICBpZiAoaXNMYW5nQ2hhaW5Ub29sKHRvb2wpKSB7XG4gICAgICAgIGNvbnN0IG9haVRvb2xEZWYgPSB6b2RGdW5jdGlvbih7XG4gICAgICAgICAgICBuYW1lOiB0b29sLm5hbWUsXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB0b29sLnNjaGVtYSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiB0b29sLmRlc2NyaXB0aW9uLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFvYWlUb29sRGVmLmZ1bmN0aW9uLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBgY29udmVydFRvT3BlbkFJRnVuY3Rpb25gIHV0aWwgaWYgdGhlIHBhcmFtZXRlcnMgYXJlIG5vdCBkZWZpbmVkLlxuICAgICAgICAgICAgdG9vbERlZiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb246IGNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uKHRvb2wsIGZpZWxkcyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdG9vbERlZiA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBvYWlUb29sRGVmLnR5cGUsXG4gICAgICAgICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogb2FpVG9vbERlZi5mdW5jdGlvbi5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb2FpVG9vbERlZi5mdW5jdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyczogb2FpVG9vbERlZi5mdW5jdGlvbi5wYXJhbWV0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAuLi4oZmllbGRzPy5zdHJpY3QgIT09IHVuZGVmaW5lZCA/IHsgc3RyaWN0OiBmaWVsZHMuc3RyaWN0IH0gOiB7fSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRvb2xEZWYgPSB0b29sO1xuICAgIH1cbiAgICBpZiAoZmllbGRzPy5zdHJpY3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0b29sRGVmLmZ1bmN0aW9uLnN0cmljdCA9IGZpZWxkcy5zdHJpY3Q7XG4gICAgfVxuICAgIHJldHVybiB0b29sRGVmO1xufVxuIl0sIm5hbWVzIjpbImNvbnZlcnRUb09wZW5BSUZ1bmN0aW9uIiwiaXNMYW5nQ2hhaW5Ub29sIiwiem9kRnVuY3Rpb24iLCJfY29udmVydFRvT3BlbkFJVG9vbCIsInRvb2wiLCJmaWVsZHMiLCJ0b29sRGVmIiwib2FpVG9vbERlZiIsIm5hbWUiLCJwYXJhbWV0ZXJzIiwic2NoZW1hIiwiZGVzY3JpcHRpb24iLCJmdW5jdGlvbiIsInR5cGUiLCJzdHJpY3QiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/dist/utils/tools.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@langchain/openai/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@langchain/openai/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AzureChatOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureChatOpenAI),\n/* harmony export */   AzureOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureOpenAI),\n/* harmony export */   AzureOpenAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.AzureOpenAIEmbeddings),\n/* harmony export */   ChatOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatOpenAI),\n/* harmony export */   DallEAPIWrapper: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.DallEAPIWrapper),\n/* harmony export */   OpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAI),\n/* harmony export */   OpenAIChat: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIChat),\n/* harmony export */   OpenAIClient: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIClient),\n/* harmony export */   OpenAIEmbeddings: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.OpenAIEmbeddings),\n/* harmony export */   _convertMessagesToOpenAIParams: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__._convertMessagesToOpenAIParams),\n/* harmony export */   convertPromptToOpenAI: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.convertPromptToOpenAI),\n/* harmony export */   formatToOpenAIAssistantTool: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIAssistantTool),\n/* harmony export */   formatToOpenAIFunction: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIFunction),\n/* harmony export */   formatToOpenAITool: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAITool),\n/* harmony export */   formatToOpenAIToolChoice: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.formatToOpenAIToolChoice),\n/* harmony export */   getEndpoint: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.getEndpoint),\n/* harmony export */   messageToOpenAIRole: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.messageToOpenAIRole),\n/* harmony export */   toFile: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.toFile),\n/* harmony export */   wrapOpenAIClientError: () => (/* reexport safe */ _dist_index_js__WEBPACK_IMPORTED_MODULE_0__.wrapOpenAIClientError)\n/* harmony export */ });\n/* harmony import */ var _dist_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dist/index.js */ \"(rsc)/./node_modules/@langchain/openai/dist/index.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxhbmdjaGFpbi9vcGVuYWkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iZXR0ZXItdG9kby8uL25vZGVfbW9kdWxlcy9AbGFuZ2NoYWluL29wZW5haS9pbmRleC5qcz9iOTA2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGlzdC9pbmRleC5qcyciXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@langchain/openai/index.js\n");

/***/ })

};
;