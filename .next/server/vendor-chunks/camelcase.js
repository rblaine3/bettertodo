"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/camelcase";
exports.ids = ["vendor-chunks/camelcase"];
exports.modules = {

/***/ "(rsc)/./node_modules/camelcase/index.js":
/*!*****************************************!*\
  !*** ./node_modules/camelcase/index.js ***!
  \*****************************************/
/***/ ((module) => {

eval("\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\nconst LEADING_SEPARATORS = new RegExp(\"^\" + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, \"gu\");\nconst NUMBERS_AND_IDENTIFIER = new RegExp(\"\\\\d+\" + IDENTIFIER.source, \"gu\");\nconst preserveCamelCase = (string, toLowerCase, toUpperCase)=>{\n    let isLastCharLower = false;\n    let isLastCharUpper = false;\n    let isLastLastCharUpper = false;\n    for(let i = 0; i < string.length; i++){\n        const character = string[i];\n        if (isLastCharLower && UPPERCASE.test(character)) {\n            string = string.slice(0, i) + \"-\" + string.slice(i);\n            isLastCharLower = false;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = true;\n            i++;\n        } else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n            string = string.slice(0, i - 1) + \"-\" + string.slice(i - 1);\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = false;\n            isLastCharLower = true;\n        } else {\n            isLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n            isLastLastCharUpper = isLastCharUpper;\n            isLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n        }\n    }\n    return string;\n};\nconst preserveConsecutiveUppercase = (input, toLowerCase)=>{\n    LEADING_CAPITAL.lastIndex = 0;\n    return input.replace(LEADING_CAPITAL, (m1)=>toLowerCase(m1));\n};\nconst postProcess = (input, toUpperCase)=>{\n    SEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n    NUMBERS_AND_IDENTIFIER.lastIndex = 0;\n    return input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier)=>toUpperCase(identifier)).replace(NUMBERS_AND_IDENTIFIER, (m)=>toUpperCase(m));\n};\nconst camelCase = (input, options)=>{\n    if (!(typeof input === \"string\" || Array.isArray(input))) {\n        throw new TypeError(\"Expected the input to be `string | string[]`\");\n    }\n    options = {\n        pascalCase: false,\n        preserveConsecutiveUppercase: false,\n        ...options\n    };\n    if (Array.isArray(input)) {\n        input = input.map((x)=>x.trim()).filter((x)=>x.length).join(\"-\");\n    } else {\n        input = input.trim();\n    }\n    if (input.length === 0) {\n        return \"\";\n    }\n    const toLowerCase = options.locale === false ? (string)=>string.toLowerCase() : (string)=>string.toLocaleLowerCase(options.locale);\n    const toUpperCase = options.locale === false ? (string)=>string.toUpperCase() : (string)=>string.toLocaleUpperCase(options.locale);\n    if (input.length === 1) {\n        return options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n    }\n    const hasUpperCase = input !== toLowerCase(input);\n    if (hasUpperCase) {\n        input = preserveCamelCase(input, toLowerCase, toUpperCase);\n    }\n    input = input.replace(LEADING_SEPARATORS, \"\");\n    if (options.preserveConsecutiveUppercase) {\n        input = preserveConsecutiveUppercase(input, toLowerCase);\n    } else {\n        input = toLowerCase(input);\n    }\n    if (options.pascalCase) {\n        input = toUpperCase(input.charAt(0)) + input.slice(1);\n    }\n    return postProcess(input, toUpperCase);\n};\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports[\"default\"] = camelCase;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/camelcase/index.js\n");

/***/ })

};
;