"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mustache";
exports.ids = ["vendor-chunks/mustache"];
exports.modules = {

/***/ "(rsc)/./node_modules/mustache/mustache.mjs":
/*!********************************************!*\
  !*** ./node_modules/mustache/mustache.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */ var objectToString = Object.prototype.toString;\nvar isArray = Array.isArray || function isArrayPolyfill(object) {\n    return objectToString.call(object) === \"[object Array]\";\n};\nfunction isFunction(object) {\n    return typeof object === \"function\";\n}\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */ function typeStr(obj) {\n    return isArray(obj) ? \"array\" : typeof obj;\n}\nfunction escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n}\n/**\n * Null safe way of checking whether or not an object,\n * including its prototype, has a given property\n */ function hasProperty(obj, propName) {\n    return obj != null && typeof obj === \"object\" && propName in obj;\n}\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */ function primitiveHasOwnProperty(primitive, propName) {\n    return primitive != null && typeof primitive !== \"object\" && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);\n}\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n// See https://github.com/janl/mustache.js/issues/189\nvar regExpTest = RegExp.prototype.test;\nfunction testRegExp(re, string) {\n    return regExpTest.call(re, string);\n}\nvar nonSpaceRe = /\\S/;\nfunction isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n}\nvar entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\",\n    \"/\": \"&#x2F;\",\n    \"`\": \"&#x60;\",\n    \"=\": \"&#x3D;\"\n};\nfunction escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n        return entityMap[s];\n    });\n}\nvar whiteRe = /\\s*/;\nvar spaceRe = /\\s+/;\nvar equalsRe = /\\s*=/;\nvar curlyRe = /\\s*\\}/;\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n */ function parseTemplate(template, tags) {\n    if (!template) return [];\n    var lineHasNonSpace = false;\n    var sections = []; // Stack to hold section tokens\n    var tokens = []; // Buffer to hold the tokens\n    var spaces = []; // Indices of whitespace tokens on the current line\n    var hasTag = false; // Is there a {{tag}} on the current line?\n    var nonSpace = false; // Is there a non-space char on the current line?\n    var indentation = \"\"; // Tracks indentation for tags that use it\n    var tagIndex = 0; // Stores a count of number of tags encountered on a line\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n        if (hasTag && !nonSpace) {\n            while(spaces.length)delete tokens[spaces.pop()];\n        } else {\n            spaces = [];\n        }\n        hasTag = false;\n        nonSpace = false;\n    }\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags(tagsToCompile) {\n        if (typeof tagsToCompile === \"string\") tagsToCompile = tagsToCompile.split(spaceRe, 2);\n        if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error(\"Invalid tags: \" + tagsToCompile);\n        openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + \"\\\\s*\");\n        closingTagRe = new RegExp(\"\\\\s*\" + escapeRegExp(tagsToCompile[1]));\n        closingCurlyRe = new RegExp(\"\\\\s*\" + escapeRegExp(\"}\" + tagsToCompile[1]));\n    }\n    compileTags(tags || mustache.tags);\n    var scanner = new Scanner(template);\n    var start, type, value, chr, token, openSection;\n    while(!scanner.eos()){\n        start = scanner.pos;\n        // Match any text between tags.\n        value = scanner.scanUntil(openingTagRe);\n        if (value) {\n            for(var i = 0, valueLength = value.length; i < valueLength; ++i){\n                chr = value.charAt(i);\n                if (isWhitespace(chr)) {\n                    spaces.push(tokens.length);\n                    indentation += chr;\n                } else {\n                    nonSpace = true;\n                    lineHasNonSpace = true;\n                    indentation += \" \";\n                }\n                tokens.push([\n                    \"text\",\n                    chr,\n                    start,\n                    start + 1\n                ]);\n                start += 1;\n                // Check for whitespace on the current line.\n                if (chr === \"\\n\") {\n                    stripSpace();\n                    indentation = \"\";\n                    tagIndex = 0;\n                    lineHasNonSpace = false;\n                }\n            }\n        }\n        // Match the opening tag.\n        if (!scanner.scan(openingTagRe)) break;\n        hasTag = true;\n        // Get the tag type.\n        type = scanner.scan(tagRe) || \"name\";\n        scanner.scan(whiteRe);\n        // Get the tag value.\n        if (type === \"=\") {\n            value = scanner.scanUntil(equalsRe);\n            scanner.scan(equalsRe);\n            scanner.scanUntil(closingTagRe);\n        } else if (type === \"{\") {\n            value = scanner.scanUntil(closingCurlyRe);\n            scanner.scan(curlyRe);\n            scanner.scanUntil(closingTagRe);\n            type = \"&\";\n        } else {\n            value = scanner.scanUntil(closingTagRe);\n        }\n        // Match the closing tag.\n        if (!scanner.scan(closingTagRe)) throw new Error(\"Unclosed tag at \" + scanner.pos);\n        if (type == \">\") {\n            token = [\n                type,\n                value,\n                start,\n                scanner.pos,\n                indentation,\n                tagIndex,\n                lineHasNonSpace\n            ];\n        } else {\n            token = [\n                type,\n                value,\n                start,\n                scanner.pos\n            ];\n        }\n        tagIndex++;\n        tokens.push(token);\n        if (type === \"#\" || type === \"^\") {\n            sections.push(token);\n        } else if (type === \"/\") {\n            // Check section nesting.\n            openSection = sections.pop();\n            if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n            if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n        } else if (type === \"name\" || type === \"{\" || type === \"&\") {\n            nonSpace = true;\n        } else if (type === \"=\") {\n            // Set the tags for the next time around.\n            compileTags(value);\n        }\n    }\n    stripSpace();\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n    if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    return nestTokens(squashTokens(tokens));\n}\n/**\n * Combines the values of consecutive text tokens in the given `tokens` array\n * to a single token.\n */ function squashTokens(tokens) {\n    var squashedTokens = [];\n    var token, lastToken;\n    for(var i = 0, numTokens = tokens.length; i < numTokens; ++i){\n        token = tokens[i];\n        if (token) {\n            if (token[0] === \"text\" && lastToken && lastToken[0] === \"text\") {\n                lastToken[1] += token[1];\n                lastToken[3] = token[3];\n            } else {\n                squashedTokens.push(token);\n                lastToken = token;\n            }\n        }\n    }\n    return squashedTokens;\n}\n/**\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */ function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n    var token, section;\n    for(var i = 0, numTokens = tokens.length; i < numTokens; ++i){\n        token = tokens[i];\n        switch(token[0]){\n            case \"#\":\n            case \"^\":\n                collector.push(token);\n                sections.push(token);\n                collector = token[4] = [];\n                break;\n            case \"/\":\n                section = sections.pop();\n                section[5] = token[2];\n                collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n                break;\n            default:\n                collector.push(token);\n        }\n    }\n    return nestedTokens;\n}\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */ function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n}\n/**\n * Returns `true` if the tail is empty (end of string).\n */ Scanner.prototype.eos = function eos() {\n    return this.tail === \"\";\n};\n/**\n * Tries to match the given regular expression at the current position.\n * Returns the matched text if it can match, the empty string otherwise.\n */ Scanner.prototype.scan = function scan(re) {\n    var match = this.tail.match(re);\n    if (!match || match.index !== 0) return \"\";\n    var string = match[0];\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n    return string;\n};\n/**\n * Skips all text until the given regular expression can be matched. Returns\n * the skipped string, which is the entire tail if no match can be made.\n */ Scanner.prototype.scanUntil = function scanUntil(re) {\n    var index = this.tail.search(re), match;\n    switch(index){\n        case -1:\n            match = this.tail;\n            this.tail = \"\";\n            break;\n        case 0:\n            match = \"\";\n            break;\n        default:\n            match = this.tail.substring(0, index);\n            this.tail = this.tail.substring(index);\n    }\n    this.pos += match.length;\n    return match;\n};\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */ function Context(view, parentContext) {\n    this.view = view;\n    this.cache = {\n        \".\": this.view\n    };\n    this.parent = parentContext;\n}\n/**\n * Creates a new context using the given view with this context\n * as the parent.\n */ Context.prototype.push = function push(view) {\n    return new Context(view, this);\n};\n/**\n * Returns the value of the given name in this context, traversing\n * up the context hierarchy if the value is absent in this context's view.\n */ Context.prototype.lookup = function lookup(name) {\n    var cache1 = this.cache;\n    var value;\n    if (cache1.hasOwnProperty(name)) {\n        value = cache1[name];\n    } else {\n        var context = this, intermediateValue, names, index, lookupHit = false;\n        while(context){\n            if (name.indexOf(\".\") > 0) {\n                intermediateValue = context.view;\n                names = name.split(\".\");\n                index = 0;\n                /**\n         * Using the dot notion path in `name`, we descend through the\n         * nested objects.\n         *\n         * To be certain that the lookup has been successful, we have to\n         * check if the last object in the path actually has the property\n         * we are looking for. We store the result in `lookupHit`.\n         *\n         * This is specially necessary for when the value has been set to\n         * `undefined` and we want to avoid looking up parent contexts.\n         *\n         * In the case where dot notation is used, we consider the lookup\n         * to be successful even if the last \"object\" in the path is\n         * not actually an object but a primitive (e.g., a string, or an\n         * integer), because it is sometimes useful to access a property\n         * of an autoboxed primitive, such as the length of a string.\n         **/ while(intermediateValue != null && index < names.length){\n                    if (index === names.length - 1) lookupHit = hasProperty(intermediateValue, names[index]) || primitiveHasOwnProperty(intermediateValue, names[index]);\n                    intermediateValue = intermediateValue[names[index++]];\n                }\n            } else {\n                intermediateValue = context.view[name];\n                /**\n         * Only checking against `hasProperty`, which always returns `false` if\n         * `context.view` is not an object. Deliberately omitting the check\n         * against `primitiveHasOwnProperty` if dot notation is not used.\n         *\n         * Consider this example:\n         * ```\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n         * ```\n         *\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\n         * in the dot notation case, then render call would return:\n         *\n         * \"The length of a football field is 9.\"\n         *\n         * rather than the expected:\n         *\n         * \"The length of a football field is 100 yards.\"\n         **/ lookupHit = hasProperty(context.view, name);\n            }\n            if (lookupHit) {\n                value = intermediateValue;\n                break;\n            }\n            context = context.parent;\n        }\n        cache1[name] = value;\n    }\n    if (isFunction(value)) value = value.call(this.view);\n    return value;\n};\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */ function Writer() {\n    this.templateCache = {\n        _cache: {},\n        set: function set(key, value) {\n            this._cache[key] = value;\n        },\n        get: function get(key) {\n            return this._cache[key];\n        },\n        clear: function clear() {\n            this._cache = {};\n        }\n    };\n}\n/**\n * Clears all cached templates in this writer.\n */ Writer.prototype.clearCache = function clearCache() {\n    if (typeof this.templateCache !== \"undefined\") {\n        this.templateCache.clear();\n    }\n};\n/**\n * Parses and caches the given `template` according to the given `tags` or\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n * that is generated from the parse.\n */ Writer.prototype.parse = function parse(template, tags) {\n    var cache1 = this.templateCache;\n    var cacheKey = template + \":\" + (tags || mustache.tags).join(\":\");\n    var isCacheEnabled = typeof cache1 !== \"undefined\";\n    var tokens = isCacheEnabled ? cache1.get(cacheKey) : undefined;\n    if (tokens == undefined) {\n        tokens = parseTemplate(template, tags);\n        isCacheEnabled && cache1.set(cacheKey, tokens);\n    }\n    return tokens;\n};\n/**\n * High-level method that is used to render the given `template` with\n * the given `view`.\n *\n * The optional `partials` argument may be an object that contains the\n * names and templates of partials that are used in the template. It may\n * also be a function that is used to load partial templates on the fly\n * that takes a single argument: the name of the partial.\n *\n * If the optional `config` argument is given here, then it should be an\n * object with a `tags` attribute or an `escape` attribute or both.\n * If an array is passed, then it will be interpreted the same way as\n * a `tags` attribute on a `config` object.\n *\n * The `tags` attribute of a `config` object must be an array with two\n * string values: the opening and closing tags used in the template (e.g.\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n *\n * The `escape` attribute of a `config` object must be a function which\n * accepts a string as input and outputs a safely escaped string.\n * If an `escape` function is not provided, then an HTML-safe string\n * escaping function is used as the default.\n */ Writer.prototype.render = function render(template, view, partials, config) {\n    var tags = this.getConfigTags(config);\n    var tokens = this.parse(template, tags);\n    var context = view instanceof Context ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, config);\n};\n/**\n * Low-level method that renders the given array of `tokens` using\n * the given `context` and `partials`.\n *\n * Note: The `originalTemplate` is only ever used to extract the portion\n * of the original template that was contained in a higher-order section.\n * If the template doesn't use higher-order sections, this argument may\n * be omitted.\n */ Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {\n    var buffer = \"\";\n    var token, symbol, value;\n    for(var i = 0, numTokens = tokens.length; i < numTokens; ++i){\n        value = undefined;\n        token = tokens[i];\n        symbol = token[0];\n        if (symbol === \"#\") value = this.renderSection(token, context, partials, originalTemplate, config);\n        else if (symbol === \"^\") value = this.renderInverted(token, context, partials, originalTemplate, config);\n        else if (symbol === \">\") value = this.renderPartial(token, context, partials, config);\n        else if (symbol === \"&\") value = this.unescapedValue(token, context);\n        else if (symbol === \"name\") value = this.escapedValue(token, context, config);\n        else if (symbol === \"text\") value = this.rawValue(token);\n        if (value !== undefined) buffer += value;\n    }\n    return buffer;\n};\nWriter.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {\n    var self = this;\n    var buffer = \"\";\n    var value = context.lookup(token[1]);\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender(template) {\n        return self.render(template, context, partials, config);\n    }\n    if (!value) return;\n    if (isArray(value)) {\n        for(var j = 0, valueLength = value.length; j < valueLength; ++j){\n            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n        }\n    } else if (typeof value === \"object\" || typeof value === \"string\" || typeof value === \"number\") {\n        buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n    } else if (isFunction(value)) {\n        if (typeof originalTemplate !== \"string\") throw new Error(\"Cannot use higher-order sections without the original template\");\n        // Extract the portion of the original template that the section contains.\n        value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n        if (value != null) buffer += value;\n    } else {\n        buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n    }\n    return buffer;\n};\nWriter.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {\n    var value = context.lookup(token[1]);\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate, config);\n};\nWriter.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, \"\");\n    var partialByNl = partial.split(\"\\n\");\n    for(var i = 0; i < partialByNl.length; i++){\n        if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n            partialByNl[i] = filteredIndentation + partialByNl[i];\n        }\n    }\n    return partialByNl.join(\"\\n\");\n};\nWriter.prototype.renderPartial = function renderPartial(token, context, partials, config) {\n    if (!partials) return;\n    var tags = this.getConfigTags(config);\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n        var lineHasNonSpace = token[6];\n        var tagIndex = token[5];\n        var indentation = token[4];\n        var indentedValue = value;\n        if (tagIndex == 0 && indentation) {\n            indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n        }\n        var tokens = this.parse(indentedValue, tags);\n        return this.renderTokens(tokens, context, partials, indentedValue, config);\n    }\n};\nWriter.prototype.unescapedValue = function unescapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return value;\n};\nWriter.prototype.escapedValue = function escapedValue(token, context, config) {\n    var escape = this.getConfigEscape(config) || mustache.escape;\n    var value = context.lookup(token[1]);\n    if (value != null) return typeof value === \"number\" && escape === mustache.escape ? String(value) : escape(value);\n};\nWriter.prototype.rawValue = function rawValue(token) {\n    return token[1];\n};\nWriter.prototype.getConfigTags = function getConfigTags(config) {\n    if (isArray(config)) {\n        return config;\n    } else if (config && typeof config === \"object\") {\n        return config.tags;\n    } else {\n        return undefined;\n    }\n};\nWriter.prototype.getConfigEscape = function getConfigEscape(config) {\n    if (config && typeof config === \"object\" && !isArray(config)) {\n        return config.escape;\n    } else {\n        return undefined;\n    }\n};\nvar mustache = {\n    name: \"mustache.js\",\n    version: \"4.2.0\",\n    tags: [\n        \"{{\",\n        \"}}\"\n    ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n   * Allows a user to override the default caching strategy, by providing an\n   * object with set, get and clear methods. This can also be used to disable\n   * the cache by setting it to the literal `undefined`.\n   */ set templateCache (cache){\n        defaultWriter.templateCache = cache;\n    },\n    /**\n   * Gets the default or overridden caching object from the default writer.\n   */ get templateCache () {\n        return defaultWriter.templateCache;\n    }\n};\n// All high-level mustache.* functions use this writer.\nvar defaultWriter = new Writer();\n/**\n * Clears all cached templates in the default writer.\n */ mustache.clearCache = function clearCache() {\n    return defaultWriter.clearCache();\n};\n/**\n * Parses and caches the given template in the default writer and returns the\n * array of tokens it contains. Doing this ahead of time avoids the need to\n * parse templates on the fly as they are rendered.\n */ mustache.parse = function parse(template, tags) {\n    return defaultWriter.parse(template, tags);\n};\n/**\n * Renders the `template` with the given `view`, `partials`, and `config`\n * using the default writer.\n */ mustache.render = function render(template, view, partials, config) {\n    if (typeof template !== \"string\") {\n        throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + \"argument for mustache#render(template, view, partials)\");\n    }\n    return defaultWriter.render(template, view, partials, config);\n};\n// Export the escaping function so that the user may override it.\n// See https://github.com/janl/mustache.js/issues/244\nmustache.escape = escapeHtml;\n// Export these mainly for testing, but also for advanced usage.\nmustache.Scanner = Scanner;\nmustache.Context = Context;\nmustache.Writer = Writer;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mustache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mustache/mustache.mjs\n");

/***/ })

};
;